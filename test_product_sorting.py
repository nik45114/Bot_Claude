#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ –¥–ª—è ProductManager
"""

import sys
import os
import tempfile
from product_manager import ProductManager

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –ë–î –¥–ª—è —Ç–µ—Å—Ç–æ–≤
TEST_DB = os.path.join(tempfile.gettempdir(), 'test_product_sorting.db')

def setup_test_data(pm):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
    pm.add_product('Gorilla', 50.0)
    pm.add_product('Redbull', 60.0)
    pm.add_product('Bulmeni', 40.0)
    pm.add_product('Monster', 55.0)
    
    products = pm.list_products()
    gorilla_id = next(p['id'] for p in products if p['name'] == 'Gorilla')
    redbull_id = next(p['id'] for p in products if p['name'] == 'Redbull')
    bulmeni_id = next(p['id'] for p in products if p['name'] == 'Bulmeni')
    monster_id = next(p['id'] for p in products if p['name'] == 'Monster')
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ –∞–¥–º–∏–Ω–æ–≤
    pm.record_admin_product(101, 'Vanya', redbull_id, 2)
    pm.record_admin_product(101, 'Vanya', bulmeni_id, 4)
    pm.record_admin_product(102, 'Igor', gorilla_id, 12)
    pm.record_admin_product(102, 'Igor', redbull_id, 14)
    pm.record_admin_product(103, 'Anna', monster_id, 5)
    pm.record_admin_product(103, 'Anna', gorilla_id, 3)
    
    return {
        'gorilla_id': gorilla_id,
        'redbull_id': redbull_id,
        'bulmeni_id': bulmeni_id,
        'monster_id': monster_id
    }

def test_get_all_debts_sorting():
    """–¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–≥–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–≥–æ–≤...")
    
    if os.path.exists(TEST_DB):
        os.remove(TEST_DB)
    
    pm = ProductManager(TEST_DB)
    setup_test_data(pm)
    
    # –¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–æ–ª–≥—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    debts_by_debt = pm.get_all_debts(sort_by='debt')
    debt_values = [data['total'] for data in debts_by_debt.values()]
    assert debt_values == sorted(debt_values, reverse=True), "–î–æ–ª–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é"
    print("  ‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–æ–ª–≥—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)")
    
    # –¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –∏–º–µ–Ω–∏
    debts_by_name = pm.get_all_debts(sort_by='name')
    names = [data['name'] for data in debts_by_name.values()]
    assert names == sorted(names), f"–ò–º–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é, –ø–æ–ª—É—á–µ–Ω–æ: {names}"
    print("  ‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)")
    
    print("‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–æ–ª–≥–æ–≤ - –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")

def test_get_products_summary():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º...")
    
    if os.path.exists(TEST_DB):
        os.remove(TEST_DB)
    
    pm = ProductManager(TEST_DB)
    setup_test_data(pm)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É
    summary = pm.get_products_summary()
    
    assert len(summary) == 4, f"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 —Ç–æ–≤–∞—Ä–∞, –ø–æ–ª—É—á–µ–Ω–æ {len(summary)}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Gorilla (12 –æ—Ç Igor + 3 –æ—Ç Anna = 15)
    gorilla = next((s for s in summary if s['product_name'] == 'Gorilla'), None)
    assert gorilla is not None, "Gorilla –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–≤–æ–¥–∫–µ"
    assert gorilla['total_quantity'] == 15, f"Gorilla: –æ–∂–∏–¥–∞–ª–æ—Å—å 15 —à—Ç, –ø–æ–ª—É—á–µ–Ω–æ {gorilla['total_quantity']}"
    assert gorilla['total_debt'] == 750.0, f"Gorilla: –æ–∂–∏–¥–∞–ª–æ—Å—å 750‚ÇΩ, –ø–æ–ª—É—á–µ–Ω–æ {gorilla['total_debt']}"
    print("  ‚úÖ Gorilla: 15 —à—Ç = 750‚ÇΩ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redbull (2 –æ—Ç Vanya + 14 –æ—Ç Igor = 16)
    redbull = next((s for s in summary if s['product_name'] == 'Redbull'), None)
    assert redbull is not None, "Redbull –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–≤–æ–¥–∫–µ"
    assert redbull['total_quantity'] == 16, f"Redbull: –æ–∂–∏–¥–∞–ª–æ—Å—å 16 —à—Ç, –ø–æ–ª—É—á–µ–Ω–æ {redbull['total_quantity']}"
    assert redbull['total_debt'] == 960.0, f"Redbull: –æ–∂–∏–¥–∞–ª–æ—Å—å 960‚ÇΩ, –ø–æ–ª—É—á–µ–Ω–æ {redbull['total_debt']}"
    print("  ‚úÖ Redbull: 16 —à—Ç = 960‚ÇΩ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Bulmeni (4 –æ—Ç Vanya = 4)
    bulmeni = next((s for s in summary if s['product_name'] == 'Bulmeni'), None)
    assert bulmeni is not None, "Bulmeni –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–≤–æ–¥–∫–µ"
    assert bulmeni['total_quantity'] == 4, f"Bulmeni: –æ–∂–∏–¥–∞–ª–æ—Å—å 4 —à—Ç, –ø–æ–ª—É—á–µ–Ω–æ {bulmeni['total_quantity']}"
    assert bulmeni['total_debt'] == 160.0, f"Bulmeni: –æ–∂–∏–¥–∞–ª–æ—Å—å 160‚ÇΩ, –ø–æ–ª—É—á–µ–Ω–æ {bulmeni['total_debt']}"
    print("  ‚úÖ Bulmeni: 4 —à—Ç = 160‚ÇΩ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Monster (5 –æ—Ç Anna = 5)
    monster = next((s for s in summary if s['product_name'] == 'Monster'), None)
    assert monster is not None, "Monster –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–≤–æ–¥–∫–µ"
    assert monster['total_quantity'] == 5, f"Monster: –æ–∂–∏–¥–∞–ª–æ—Å—å 5 —à—Ç, –ø–æ–ª—É—á–µ–Ω–æ {monster['total_quantity']}"
    assert monster['total_debt'] == 275.0, f"Monster: –æ–∂–∏–¥–∞–ª–æ—Å—å 275‚ÇΩ, –ø–æ–ª—É—á–µ–Ω–æ {monster['total_debt']}"
    print("  ‚úÖ Monster: 5 —à—Ç = 275‚ÇΩ")
    
    print("‚úÖ –°–≤–æ–¥–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º - –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")

def test_get_products_report_sorting():
    """–¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –æ—Ç—á—ë—Ç–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –æ—Ç—á—ë—Ç–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º...")
    
    if os.path.exists(TEST_DB):
        os.remove(TEST_DB)
    
    pm = ProductManager(TEST_DB)
    setup_test_data(pm)
    
    # –¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –∞–¥–º–∏–Ω–∞–º
    report_by_admin = pm.get_products_report(sort_by='admin')
    assert len(report_by_admin) > 0, "–û—Ç—á—ë—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω—ã –∏–¥—É—Ç –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    admin_names = [item['admin_name'] for item in report_by_admin]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É: –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –ø–æ–¥—Ä—è–¥
    current_admin = None
    for name in admin_names:
        if current_admin is None:
            current_admin = name
        elif name != current_admin:
            # –°–º–µ–Ω–∏–ª—Å—è –∞–¥–º–∏–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è —Ä–∞–Ω–µ–µ
            assert name not in admin_names[:admin_names.index(name)][:-1] or admin_names[:admin_names.index(name)][-1] == name, \
                f"–ê–¥–º–∏–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã"
            current_admin = name
    print("  ‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω–∞–º")
    
    # –¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    report_by_product = pm.get_products_report(sort_by='product')
    assert len(report_by_product) > 0, "–û—Ç—á—ë—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä—ã –∏–¥—É—Ç –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    product_names = [item['product_name'] for item in report_by_product]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É: –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –ø–æ–¥—Ä—è–¥
    current_product = None
    for name in product_names:
        if current_product is None:
            current_product = name
        elif name != current_product:
            # –°–º–µ–Ω–∏–ª—Å—è —Ç–æ–≤–∞—Ä - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è —Ä–∞–Ω–µ–µ
            assert name not in product_names[:product_names.index(name)][:-1] or product_names[:product_names.index(name)][-1] == name, \
                f"–¢–æ–≤–∞—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã"
            current_product = name
    print("  ‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º")
    
    print("‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ - –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")

def test_format_products_summary_report():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞...")
    
    if os.path.exists(TEST_DB):
        os.remove(TEST_DB)
    
    pm = ProductManager(TEST_DB)
    setup_test_data(pm)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç
    report = pm.format_products_summary_report()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    assert "–°–í–û–î–ö–ê –ü–û –¢–û–í–ê–†–ê–ú" in report, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–≤–æ–¥–∫–∏"
    assert "15 Gorilla" in report or "15 –≥–æ—Ä–∏–ª–ª" in report.lower(), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å Gorilla —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 15"
    assert "16 Redbull" in report, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å Redbull —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 16"
    assert "4 Bulmeni" in report, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å Bulmeni —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 4"
    assert "5 Monster" in report, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å Monster —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 5"
    print("  ‚úÖ –§–æ—Ä–º–∞—Ç 'X –¢–æ–≤–∞—Ä' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–∏
    assert "–î–µ—Ç–∞–ª—å–Ω–æ:" in report or "–¥–µ—Ç–∞–ª—å–Ω–æ" in report.lower(), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞"
    print("  ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
    assert "–í–°–ï–ì–û:" in report or "–≤—Å–µ–≥–æ" in report.lower(), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—â–∞—è —Å—É–º–º–∞"
    print("  ‚úÖ –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ - –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")

def test_format_detailed_debts_report():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –ø–æ –¥–æ–ª–≥–∞–º"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –ø–æ –¥–æ–ª–≥–∞–º...")
    
    if os.path.exists(TEST_DB):
        os.remove(TEST_DB)
    
    pm = ProductManager(TEST_DB)
    setup_test_data(pm)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç
    report = pm.format_detailed_debts_report()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    assert "–î–ï–¢–ê–õ–¨–ù–´–ï –î–û–õ–ì–ò" in report or "–¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–æ–ª–≥–∏" in report.lower(), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç "–ò–º—è: X –¢–æ–≤–∞—Ä1, Y –¢–æ–≤–∞—Ä2 = –°—É–º–º–∞‚ÇΩ"
    assert "Vanya:" in report, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å Vanya"
    assert "2 Redbull" in report, "–£ Vanya –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 Redbull"
    assert "4 Bulmeni" in report, "–£ Vanya –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 Bulmeni"
    print("  ‚úÖ –§–æ—Ä–º–∞—Ç 'Vanya: 2 Redbull, 4 Bulmeni = X‚ÇΩ'")
    
    assert "Igor:" in report, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å Igor"
    assert "12 Gorilla" in report, "–£ Igor –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 12 Gorilla"
    assert "14 Redbull" in report, "–£ Igor –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 14 Redbull"
    print("  ‚úÖ –§–æ—Ä–º–∞—Ç 'Igor: 12 Gorilla, 14 Redbull = X‚ÇΩ'")
    
    assert "Anna:" in report, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å Anna"
    assert "3 Gorilla" in report, "–£ Anna –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 Gorilla"
    assert "5 Monster" in report, "–£ Anna –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 5 Monster"
    print("  ‚úÖ –§–æ—Ä–º–∞—Ç 'Anna: 3 Gorilla, 5 Monster = X‚ÇΩ'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
    assert "–í–°–ï–ì–û –î–û–õ–ì–û–í:" in report, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–≥–æ–≤"
    print("  ‚úÖ –û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–≥–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ - –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")

def test_format_all_debts_report_sorting():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –ø–æ –¥–æ–ª–≥–∞–º —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π...")
    
    if os.path.exists(TEST_DB):
        os.remove(TEST_DB)
    
    pm = ProductManager(TEST_DB)
    setup_test_data(pm)
    
    # –û—Ç—á—ë—Ç —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–æ–ª–≥—É
    report_by_debt = pm.format_all_debts_report(sort_by='debt')
    assert "–ø–æ —Å—É–º–º–µ –¥–æ–ª–≥–∞" in report_by_debt or "–ø–æ –¥–æ–ª–≥—É" in report_by_debt.lower(), \
        "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–º–µ—Ç–∫–∞ –æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –ø–æ –¥–æ–ª–≥—É"
    print("  ‚úÖ –û—Ç—á—ë—Ç —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–æ–ª–≥—É")
    
    # –û—Ç—á—ë—Ç —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –∏–º–µ–Ω–∏
    report_by_name = pm.format_all_debts_report(sort_by='name')
    assert "–ø–æ –∏–º–µ–Ω–∏" in report_by_name.lower(), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–º–µ—Ç–∫–∞ –æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –ø–æ –∏–º–µ–Ω–∏"
    print("  ‚úÖ –û—Ç—á—ë—Ç —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –∏–º–µ–Ω–∏")
    
    print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π - –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")

def test_format_products_report_sorting():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π...")
    
    if os.path.exists(TEST_DB):
        os.remove(TEST_DB)
    
    pm = ProductManager(TEST_DB)
    setup_test_data(pm)
    
    # –û—Ç—á—ë—Ç —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∞–¥–º–∏–Ω–∞–º
    report_by_admin = pm.format_products_report(sort_by='admin')
    assert "–ø–æ –∞–¥–º–∏–Ω–∞–º" in report_by_admin.lower(), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–º–µ—Ç–∫–∞ –æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ –ø–æ –∞–¥–º–∏–Ω–∞–º"
    assert "üë§" in report_by_admin, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∫–æ–Ω–∫–∏ –∞–¥–º–∏–Ω–æ–≤"
    print("  ‚úÖ –û—Ç—á—ë—Ç —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∞–¥–º–∏–Ω–∞–º")
    
    # –û—Ç—á—ë—Ç —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    report_by_product = pm.format_products_report(sort_by='product')
    assert "–ø–æ —Ç–æ–≤–∞—Ä–∞–º" in report_by_product.lower(), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–º–µ—Ç–∫–∞ –æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ –ø–æ —Ç–æ–≤–∞—Ä–∞–º"
    assert "üì¶" in report_by_product, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∫–æ–Ω–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤"
    print("  ‚úÖ –û—Ç—á—ë—Ç —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ —Ç–æ–≤–∞—Ä–∞–º")
    
    print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º - –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")

def main():
    print("=" * 60)
    print("   –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–†–¢–ò–†–û–í–ö–ò –ò –†–ê–°–®–ò–†–ï–ù–ù–´–• –û–¢–ß–Å–¢–û–í")
    print("=" * 60)
    
    try:
        test_get_all_debts_sorting()
        test_get_products_summary()
        test_get_products_report_sorting()
        test_format_products_summary_report()
        test_format_detailed_debts_report()
        test_format_all_debts_report_sorting()
        test_format_products_report_sorting()
        
        print("\n" + "=" * 60)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        
        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists(TEST_DB):
            os.remove(TEST_DB)
        
        return 0
        
    except AssertionError as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {e}")
        import traceback
        traceback.print_exc()
        return 1
    except Exception as e:
        print(f"\n‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == '__main__':
    sys.exit(main())
