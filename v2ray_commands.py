#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
V2Ray Bot Commands
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è V2Ray —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
"""

from telegram import Update
from telegram.ext import ContextTypes
import logging

logger = logging.getLogger(__name__)


class V2RayCommands:
    """–ö–ª–∞—Å—Å —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ V2Ray –¥–ª—è –±–æ—Ç–∞"""
    
    def __init__(self, manager, admin_manager, owner_id: int):
        self.manager = manager
        self.admin_manager = admin_manager
        self.owner_id = owner_id  # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å V2Ray
    
    def is_owner(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º"""
        return user_id == self.owner_id
    
    async def cmd_v2ray(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é V2Ray"""
        if not self.is_owner(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        text = """üîê V2Ray Manager

–ö–æ–º–∞–Ω–¥—ã:

üì° –°–µ—Ä–≤–µ—Ä—ã:
/v2add <–∏–º—è> <host> <user> <pass> - –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
/v2list - —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
/v2setup <–∏–º—è> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å V2Ray –Ω–∞ —Å–µ—Ä–≤–µ—Ä
/v2stats <–∏–º—è> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
/v2user <—Å–µ—Ä–≤–µ—Ä> <user_id> [email] - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/v2remove <—Å–µ—Ä–≤–µ—Ä> <uuid> - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
/v2traffic <—Å–µ—Ä–≤–µ—Ä> <—Ç–∏–ø> - –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞
  –¢–∏–ø—ã: tcp, ws, grpc, tls

–ü—Ä–∏–º–µ—Ä:
/v2add main 1.2.3.4 root MyPass123
/v2setup main
/v2user main @username –í–∞—Å—è"""

        await update.message.reply_text(text)
    
    async def cmd_v2add(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: /v2add <–∏–º—è> <host> <user> <pass>"""
        if not self.is_owner(update.effective_user.id):
            return
        
        try:
            if len(context.args) < 4:
                await update.message.reply_text(
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /v2add <–∏–º—è> <host> <user> <pass>\n\n"
                    "–ü—Ä–∏–º–µ—Ä: /v2add main 1.2.3.4 root MyPass123"
                )
                return
            
            name, host, username, password = context.args[0:4]
            
            await update.message.reply_text("‚è≥ –î–æ–±–∞–≤–ª—è—é —Å–µ—Ä–≤–µ—Ä...")
            
            if self.manager.add_server(name, host, username, password):
                await update.message.reply_text(
                    f"‚úÖ –°–µ—Ä–≤–µ—Ä '{name}' –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                    f"üñ• Host: {host}\n"
                    f"üë§ User: {username}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω–∏: /v2setup {name}"
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def cmd_v2list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        if not self.is_owner(update.effective_user.id):
            return
        
        servers = self.manager.list_servers()
        
        if not servers:
            await update.message.reply_text("üì≠ –ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤")
            return
        
        text = "üì° –°–µ—Ä–≤–µ—Ä—ã V2Ray:\n\n"
        
        for srv in servers:
            text += f"üîπ {srv['name']}\n"
            text += f"   Host: {srv['host']}\n"
            text += f"   Port: {srv['port']}\n"
            text += f"   Traffic: {srv['traffic_type']}\n\n"
        
        await update.message.reply_text(text)
    
    async def cmd_v2setup(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ V2Ray –Ω–∞ —Å–µ—Ä–≤–µ—Ä: /v2setup <–∏–º—è>"""
        if not self.is_owner(update.effective_user.id):
            return
        
        try:
            if len(context.args) < 1:
                await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /v2setup <–∏–º—è>")
                return
            
            server_name = context.args[0]
            
            await update.message.reply_text(f"‚è≥ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É {server_name}...")
            
            server = self.manager.get_server(server_name)
            
            if not server:
                await update.message.reply_text(f"‚ùå –°–µ—Ä–≤–µ—Ä {server_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            if not server.connect():
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
                return
            
            await update.message.reply_text("üì• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é V2Ray (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-3 –º–∏–Ω—É—Ç—ã)...")
            
            if not server.install_v2ray():
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ V2Ray")
                server.disconnect()
                return
            
            await update.message.reply_text("‚öôÔ∏è –°–æ–∑–¥–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
            
            config = server.create_config(port=443, traffic_type="tcp")
            
            if not server.deploy_config(config):
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                server.disconnect()
                return
            
            server.disconnect()
            
            await update.message.reply_text(
                f"‚úÖ V2Ray —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {server_name}!\n\n"
                f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
                f"/v2user {server_name} <user_id> [email]"
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def cmd_v2user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /v2user <—Å–µ—Ä–≤–µ—Ä> <user_id> [email]"""
        if not self.is_owner(update.effective_user.id):
            return
        
        try:
            if len(context.args) < 2:
                await update.message.reply_text(
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /v2user <—Å–µ—Ä–≤–µ—Ä> <user_id> [email]\n\n"
                    "–ü—Ä–∏–º–µ—Ä: /v2user main @username –í–∞—Å—è"
                )
                return
            
            server_name = context.args[0]
            user_id = context.args[1]
            email = ' '.join(context.args[2:]) if len(context.args) > 2 else ""
            
            await update.message.reply_text(f"‚è≥ –î–æ–±–∞–≤–ª—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ {server_name}...")
            
            server = self.manager.get_server(server_name)
            
            if not server:
                await update.message.reply_text(f"‚ùå –°–µ—Ä–≤–µ—Ä {server_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            if not server.connect():
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
                return
            
            vless_link = server.add_user(user_id, email)
            
            server.disconnect()
            
            if not vless_link:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º UUID –∏–∑ —Å—Å—ã–ª–∫–∏
            import re
            uuid_match = re.search(r'vless://([^@]+)@', vless_link)
            user_uuid = uuid_match.group(1) if uuid_match else ""
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            self.manager.save_user(server_name, user_id, user_uuid, vless_link, email)
            
            text = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            text += f"üë§ ID: {user_id}\n"
            text += f"üìß Email: {email or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            text += f"üîë UUID: {user_uuid}\n\n"
            text += f"üîó VLESS —Å—Å—ã–ª–∫–∞:\n`{vless_link}`"
            
            await update.message.reply_text(text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def cmd_v2stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: /v2stats <–∏–º—è>"""
        if not self.is_owner(update.effective_user.id):
            return
        
        try:
            if len(context.args) < 1:
                await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /v2stats <–∏–º—è>")
                return
            
            server_name = context.args[0]
            
            await update.message.reply_text("‚è≥ –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
            
            server = self.manager.get_server(server_name)
            
            if not server:
                await update.message.reply_text(f"‚ùå –°–µ—Ä–≤–µ—Ä {server_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            if not server.connect():
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
                return
            
            stats = server.get_stats()
            
            server.disconnect()
            
            if not stats:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                return
            
            status_emoji = "üü¢" if stats['running'] else "üî¥"
            
            text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {server_name}\n\n"
            text += f"{status_emoji} –°—Ç–∞—Ç—É—Å: {'–†–∞–±–æ—Ç–∞–µ—Ç' if stats['running'] else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            text += f"üñ• Host: {stats['host']}\n"
            text += f"üîå Port: {stats['port']}\n"
            text += f"üì° Network: {stats['network']}\n"
            text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}"
            
            await update.message.reply_text(text)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def cmd_v2traffic(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç—Ä–∞—Ñ–∏–∫–∞: /v2traffic <—Å–µ—Ä–≤–µ—Ä> <—Ç–∏–ø>"""
        if not self.is_owner(update.effective_user.id):
            return
        
        try:
            if len(context.args) < 2:
                await update.message.reply_text(
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /v2traffic <—Å–µ—Ä–≤–µ—Ä> <—Ç–∏–ø>\n\n"
                    "–¢–∏–ø—ã —Ç—Ä–∞—Ñ–∏–∫–∞:\n"
                    "‚Ä¢ tcp - –æ–±—ã—á–Ω—ã–π TCP\n"
                    "‚Ä¢ ws - WebSocket\n"
                    "‚Ä¢ grpc - gRPC\n"
                    "‚Ä¢ tls - TLS —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ\n\n"
                    "–ü—Ä–∏–º–µ—Ä: /v2traffic main ws"
                )
                return
            
            server_name = context.args[0]
            traffic_type = context.args[1].lower()
            
            if traffic_type not in ['tcp', 'ws', 'grpc', 'tls']:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π: tcp, ws, grpc, tls")
                return
            
            await update.message.reply_text(f"‚è≥ –ò–∑–º–µ–Ω—è—é —Ç–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ {traffic_type}...")
            
            server = self.manager.get_server(server_name)
            
            if not server:
                await update.message.reply_text(f"‚ùå –°–µ—Ä–≤–µ—Ä {server_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            if not server.connect():
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
                return
            
            if server.change_traffic_type(traffic_type):
                server.disconnect()
                await update.message.reply_text(
                    f"‚úÖ –¢–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {traffic_type}!\n\n"
                    f"‚ö†Ô∏è –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–∏ —Å—Å—ã–ª–∫–∏.\n"
                    f"–°–æ–∑–¥–∞–π –Ω–æ–≤—ã–µ: /v2user {server_name} <user_id>"
                )
            else:
                server.disconnect()
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç—Ä–∞—Ñ–∏–∫–∞")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def cmd_v2remove(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /v2remove <—Å–µ—Ä–≤–µ—Ä> <uuid>"""
        if not self.is_owner(update.effective_user.id):
            return
        
        try:
            if len(context.args) < 2:
                await update.message.reply_text(
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /v2remove <—Å–µ—Ä–≤–µ—Ä> <uuid>\n\n"
                    "UUID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ /v2stats"
                )
                return
            
            server_name = context.args[0]
            user_uuid = context.args[1]
            
            await update.message.reply_text("‚è≥ –£–¥–∞–ª—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            
            server = self.manager.get_server(server_name)
            
            if not server:
                await update.message.reply_text(f"‚ùå –°–µ—Ä–≤–µ—Ä {server_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            if not server.connect():
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
                return
            
            if server.remove_user(user_uuid):
                server.disconnect()
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_uuid} —É–¥–∞–ª—ë–Ω")
            else:
                server.disconnect()
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
