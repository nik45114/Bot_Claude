#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Club Commands - –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—É–±–∞–º–∏
–¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
"""

from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
import logging

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_REPORT = 1


class ClubCommands:
    """–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—É–±–∞–º–∏"""
    
    def __init__(self, manager, owner_id: int):
        self.manager = manager
        self.owner_id = owner_id
        self.pending_reports = {}  # {user_id: club_id}
    
    def is_owner(self, user_id: int) -> bool:
        return user_id == self.owner_id
    
    async def cmd_clubs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª—É–±–æ–≤"""
        if not self.is_owner(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        text = """üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—É–±–∞–º–∏

–ö–æ–º–∞–Ω–¥—ã:

üìã –ö–ª—É–±—ã:
/clubadd <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–∞–¥—Ä–µ—Å> - –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—É–±
/clublist - —Å–ø–∏—Å–æ–∫ –∫–ª—É–±–æ–≤
/clubstats <–Ω–∞–∑–≤–∞–Ω–∏–µ> [–¥–Ω–µ–π] - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üìä –û—Ç—á—ë—Ç—ã:
/report <–∫–ª—É–±> - –Ω–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç —Å–º–µ–Ω—ã
/lastreport <–∫–ª—É–±> - –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á—ë—Ç
/issues [–∫–ª—É–±] - –ø—Ä–æ–±–ª–µ–º—ã

–ü—Ä–∏–º–µ—Ä:
/clubadd –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –õ–µ–Ω–∏–Ω–∞ 123
/report –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π
‚Üí –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞"""
        
        await update.message.reply_text(text)
    
    async def cmd_clubadd(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—É–±–∞: /clubadd <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–∞–¥—Ä–µ—Å>"""
        if not self.is_owner(update.effective_user.id):
            return
        
        try:
            if len(context.args) < 1:
                await update.message.reply_text(
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /clubadd <–Ω–∞–∑–≤–∞–Ω–∏–µ> [–∞–¥—Ä–µ—Å]\n\n"
                    "–ü—Ä–∏–º–µ—Ä: /clubadd –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –õ–µ–Ω–∏–Ω–∞ 123"
                )
                return
            
            name = context.args[0]
            address = ' '.join(context.args[1:]) if len(context.args) > 1 else ""
            
            if self.manager.add_club(name, address=address):
                await update.message.reply_text(
                    f"‚úÖ –ö–ª—É–± '{name}' –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                    f"üìç –ê–¥—Ä–µ—Å: {address or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Å–¥–∞–≤–∞—Ç—å –æ—Ç—á—ë—Ç—ã:\n"
                    f"/report {name}"
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—É–±–∞")
        
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def cmd_clublist(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø–∏—Å–æ–∫ –∫–ª—É–±–æ–≤"""
        if not self.is_owner(update.effective_user.id):
            return
        
        clubs = self.manager.list_clubs()
        
        if not clubs:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∫–ª—É–±–æ–≤")
            return
        
        text = "üè¢ –ö–ª—É–±—ã:\n\n"
        
        for club in clubs:
            text += f"üîπ {club['name']}\n"
            if club['address']:
                text += f"   üìç {club['address']}\n"
            if club['phone']:
                text += f"   üìû {club['phone']}\n"
            text += "\n"
        
        await update.message.reply_text(text)
    
    async def cmd_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –æ—Ç—á—ë—Ç–∞: /report <–∫–ª—É–±>"""
        try:
            if len(context.args) < 1:
                await update.message.reply_text(
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /report <–∫–ª—É–±>\n\n"
                    "–ü—Ä–∏–º–µ—Ä: /report –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π"
                )
                return
            
            club_name = context.args[0]
            clubs = self.manager.list_clubs()
            club = next((c for c in clubs if c['name'].lower() == club_name.lower()), None)
            
            if not club:
                await update.message.reply_text(
                    f"‚ùå –ö–ª—É–± '{club_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
                    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—É–±—ã: /clublist"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—É–± –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.pending_reports[update.effective_user.id] = club['id']
            
            text = f"""üìã –û—Ç—á—ë—Ç —Å–º–µ–Ω—ã - {club['name']}

–û—Ç–ø—Ä–∞–≤—å –æ—Ç—á—ë—Ç –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.

–ü—Ä–∏–º–µ—Ä:
–í–µ—á–µ—Ä 15.10
–§–∞–∫—Ç –Ω–∞–ª 3 940 / 20 703
–ù–∞–ª–∏—á–∫–∞ –≤ —Å–µ–π—Ñ–µ 927
–§–∞–∫—Ç –±–Ω 16 327
QR 3 753
–î–∂–æ–π—Å—Ç–∏–∫–æ–≤ 15
3 –≤ —Ä–µ–º–æ–Ω—Ç–µ
–¢—É–∞–ª–µ—Ç–∫–∞ –µ—Å—Ç—å
–ë—É–º–∞–∂–Ω—ã–µ –ø–æ–ª–æ—Ç–µ–Ω—Ü–∞ –Ω–µ—Ç

–Ø —Ä–∞—Å–ø–∞—Ä—Å—é –∏ —Å–æ—Ö—Ä–∞–Ω—é –∫—Ä–∞—Å–∏–≤–æ!"""
            
            await update.message.reply_text(text)
            return WAITING_REPORT
        
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return ConversationHandler.END
    
    async def handle_report_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á—ë—Ç–∞"""
        user_id = update.effective_user.id
        
        if user_id not in self.pending_reports:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –æ—Ç—á—ë—Ç: /report <–∫–ª—É–±>"
            )
            return ConversationHandler.END
        
        try:
            club_id = self.pending_reports[user_id]
            text = update.message.text
            
            await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—Ç—á—ë—Ç...")
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç—á—ë—Ç
            report = self.manager.parse_report(text)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            admin_name = update.effective_user.full_name or update.effective_user.username
            shift_id = self.manager.save_shift_report(
                club_id, 
                user_id, 
                admin_name, 
                report
            )
            
            if shift_id == 0:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞")
                return ConversationHandler.END
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            formatted = self.manager.format_report(shift_id)
            await update.message.reply_text(formatted)
            
            # –û—á–∏—â–∞–µ–º
            del self.pending_reports[user_id]
            
            return ConversationHandler.END
        
        except Exception as e:
            logger.error(f"Report error: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return ConversationHandler.END
    
    async def cmd_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –æ—Ç—á—ë—Ç–∞"""
        user_id = update.effective_user.id
        if user_id in self.pending_reports:
            del self.pending_reports[user_id]
        await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return ConversationHandler.END
    
    async def cmd_lastreport(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á—ë—Ç –∫–ª—É–±–∞: /lastreport <–∫–ª—É–±>"""
        if not self.is_owner(update.effective_user.id):
            return
        
        try:
            if len(context.args) < 1:
                await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /lastreport <–∫–ª—É–±>")
                return
            
            club_name = context.args[0]
            clubs = self.manager.list_clubs()
            club = next((c for c in clubs if c['name'].lower() == club_name.lower()), None)
            
            if not club:
                await update.message.reply_text(f"‚ùå –ö–ª—É–± '{club_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–º–µ–Ω—É
            import sqlite3
            conn = sqlite3.connect(self.manager.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id FROM shifts 
                WHERE club_id = ? 
                ORDER BY created_at DESC 
                LIMIT 1
            ''', (club['id'],))
            
            row = cursor.fetchone()
            conn.close()
            
            if not row:
                await update.message.reply_text("üì≠ –ù–µ—Ç –æ—Ç—á—ë—Ç–æ–≤")
                return
            
            shift_id = row[0]
            formatted = self.manager.format_report(shift_id)
            await update.message.reply_text(formatted)
        
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def cmd_clubstats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—É–±–∞: /clubstats <–∫–ª—É–±> [–¥–Ω–µ–π]"""
        if not self.is_owner(update.effective_user.id):
            return
        
        try:
            if len(context.args) < 1:
                await update.message.reply_text(
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /clubstats <–∫–ª—É–±> [–¥–Ω–µ–π]\n\n"
                    "–ü—Ä–∏–º–µ—Ä: /clubstats –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π 7"
                )
                return
            
            club_name = context.args[0]
            days = int(context.args[1]) if len(context.args) > 1 else 7
            
            clubs = self.manager.list_clubs()
            club = next((c for c in clubs if c['name'].lower() == club_name.lower()), None)
            
            if not club:
                await update.message.reply_text(f"‚ùå –ö–ª—É–± '{club_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            await update.message.reply_text("‚è≥ –°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
            
            stats = self.manager.get_club_stats(club['id'], days)
            
            if not stats:
                await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                return
            
            avg_per_shift = stats['total_revenue'] / stats['shifts_count'] if stats['shifts_count'] > 0 else 0
            
            text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - {club['name']}
–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí∞ –í–´–†–£–ß–ö–ê
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üíµ –ù–∞–ª–∏—á–Ω—ã–µ:  {stats['total_cash']:>10,} ‚ÇΩ
üí≥ –ë–µ–∑–Ω–∞–ª:    {stats['total_cashless']:>10,} ‚ÇΩ
üì± QR:        {stats['total_qr']:>10,} ‚ÇΩ
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí∞ –ò–¢–û–ì–û:     {stats['total_revenue']:>10,} ‚ÇΩ

üìà –°–º–µ–Ω: {stats['shifts_count']}
üìä –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_per_shift:>10,.0f} ‚ÇΩ

‚ö†Ô∏è –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º: {stats['open_issues']}"""
            
            await update.message.reply_text(text)
        
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def cmd_issues(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º: /issues [–∫–ª—É–±]"""
        if not self.is_owner(update.effective_user.id):
            return
        
        try:
            club_id = None
            
            if len(context.args) > 0:
                club_name = context.args[0]
                clubs = self.manager.list_clubs()
                club = next((c for c in clubs if c['name'].lower() == club_name.lower()), None)
                if club:
                    club_id = club['id']
            
            issues = self.manager.get_issues_summary(club_id)
            
            if not issues:
                await update.message.reply_text("‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º!")
                return
            
            text = "‚ö†Ô∏è –û–¢–ö–†–´–¢–´–ï –ü–†–û–ë–õ–ï–ú–´\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            
            for i, issue in enumerate(issues, 1):
                text += f"{i}. üè¢ {issue['club']}\n"
                text += f"   {issue['issue']}\n"
                text += f"   üë§ {issue['admin']} ‚Ä¢ üìÖ {issue['created_at'][:10]}\n\n"
            
            await update.message.reply_text(text)
        
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
