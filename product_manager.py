#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Product Manager - –°–∏—Å—Ç–µ–º–∞ —É—á—ë—Ç–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
–ó–∞–ø–∏—Å—å —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∞–¥–º–∏–Ω–æ–≤, –æ—Ç—á—ë—Ç—ã, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏
"""

import sqlite3
from datetime import datetime
from typing import List, Dict, Optional
import logging

logger = logging.getLogger(__name__)


class ProductManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º—ã —É—á—ë—Ç–∞ —Ç–æ–≤–∞—Ä–∞"""
    
    def __init__(self, db_path: str = 'knowledge.db'):
        self.db_path = db_path
        self._init_db()
    
    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü"""
        try:
            logger.info(f"üîß Initializing Product Manager database at: {self.db_path}")
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
            logger.info("üìã Creating products table...")
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS products (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL UNIQUE,
                    cost_price REAL NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            logger.info("‚úÖ Products table created/verified")
            
            # –¢–∞–±–ª–∏—Ü–∞ –≤–∑—è—Ç—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∞–¥–º–∏–Ω–∞–º–∏
            logger.info("üìã Creating admin_products table...")
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS admin_products (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    admin_id INTEGER NOT NULL,
                    admin_name TEXT NOT NULL,
                    product_id INTEGER NOT NULL,
                    product_name TEXT NOT NULL,
                    quantity INTEGER NOT NULL,
                    cost_price REAL NOT NULL,
                    total_debt REAL NOT NULL,
                    taken_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    settled BOOLEAN DEFAULT FALSE,
                    FOREIGN KEY (product_id) REFERENCES products(id)
                )
            ''')
            logger.info("‚úÖ Admin_products table created/verified")
            
            conn.commit()
            
            # Verify tables exist
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='products'")
            if cursor.fetchone():
                logger.info("‚úÖ Products table exists in database")
            else:
                logger.error("‚ùå Products table was not created!")
                
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='admin_products'")
            if cursor.fetchone():
                logger.info("‚úÖ Admin_products table exists in database")
            else:
                logger.error("‚ùå Admin_products table was not created!")
            
            conn.close()
            logger.info("‚úÖ Product Manager database initialized successfully")
        except Exception as e:
            logger.error(f"‚ùå Error initializing Product Manager database: {e}")
            raise
    
    def add_product(self, name: str, cost_price: float) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä"""
        logger.info(f"üîÑ Attempting to add product: name='{name}', cost_price={cost_price}")
        
        # Validate inputs
        if not name or not name.strip():
            logger.error("‚ùå Product name is empty or invalid")
            return False
        
        if cost_price <= 0:
            logger.error(f"‚ùå Invalid cost_price: {cost_price} (must be > 0)")
            return False
        
        try:
            logger.info(f"üìÇ Connecting to database: {self.db_path}")
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # Check if products table exists
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='products'")
            if not cursor.fetchone():
                logger.error("‚ùå Products table does not exist! Attempting to recreate...")
                self._init_db()
                # Reconnect after recreation
                conn.close()
                conn = sqlite3.connect(self.db_path)
                cursor = conn.cursor()
            
            # Check if product already exists
            logger.info(f"üîç Checking if product '{name}' already exists...")
            cursor.execute('SELECT id FROM products WHERE name = ?', (name,))
            existing = cursor.fetchone()
            if existing:
                logger.error(f"‚ùå Product '{name}' already exists with ID: {existing[0]}")
                conn.close()
                return False
            
            logger.info(f"‚ûï Inserting product into database...")
            cursor.execute('''
                INSERT INTO products (name, cost_price)
                VALUES (?, ?)
            ''', (name, cost_price))
            
            product_id = cursor.lastrowid
            logger.info(f"‚úÖ Product inserted with ID: {product_id}")
            
            conn.commit()
            logger.info("‚úÖ Transaction committed")
            
            conn.close()
            logger.info("‚úÖ Database connection closed")
            
            logger.info(f"‚úÖ Product added successfully: {name} - {cost_price} ‚ÇΩ [ID: {product_id}]")
            return True
            
        except sqlite3.IntegrityError as e:
            logger.error(f"‚ùå IntegrityError adding product '{name}': {e}")
            return False
        except sqlite3.OperationalError as e:
            logger.error(f"‚ùå OperationalError adding product '{name}': {e}")
            logger.error("   This may indicate a database schema issue or locked database")
            return False
        except Exception as e:
            logger.error(f"‚ùå Unexpected error adding product '{name}': {type(e).__name__}: {e}")
            import traceback
            logger.error(f"   Traceback: {traceback.format_exc()}")
            return False
    
    def update_product_price(self, product_id: int, new_price: float) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE products 
                SET cost_price = ?, updated_at = CURRENT_TIMESTAMP
                WHERE id = ?
            ''', (new_price, product_id))
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ Product price updated: ID {product_id} -> {new_price} ‚ÇΩ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error updating product price: {e}")
            return False
    
    def list_products(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            cursor.execute('SELECT * FROM products ORDER BY name')
            
            products = [dict(row) for row in cursor.fetchall()]
            conn.close()
            
            return products
            
        except Exception as e:
            logger.error(f"‚ùå Error listing products: {e}")
            return []
    
    def get_product(self, product_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ"""
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            cursor.execute('SELECT * FROM products WHERE id = ?', (product_id,))
            
            row = cursor.fetchone()
            conn.close()
            
            return dict(row) if row else None
            
        except Exception as e:
            logger.error(f"‚ùå Error getting product: {e}")
            return None
    
    def record_admin_product(self, admin_id: int, admin_name: str, 
                           product_id: int, quantity: int) -> bool:
        """–ó–∞–ø–∏—Å–∞—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ –∞–¥–º–∏–Ω–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            product = self.get_product(product_id)
            if not product:
                logger.error(f"‚ùå Product {product_id} not found")
                return False
            
            total_debt = product['cost_price'] * quantity
            
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO admin_products 
                (admin_id, admin_name, product_id, product_name, quantity, cost_price, total_debt)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (admin_id, admin_name, product_id, product['name'], 
                  quantity, product['cost_price'], total_debt))
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ Product recorded: {admin_name} took {quantity}x {product['name']}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error recording admin product: {e}")
            return False
    
    def get_admin_debt(self, admin_id: int) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–π –¥–æ–ª–≥ –∞–¥–º–∏–Ω–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT SUM(total_debt) FROM admin_products
                WHERE admin_id = ? AND settled = FALSE
            ''', (admin_id,))
            
            row = cursor.fetchone()
            conn.close()
            
            return row[0] if row[0] else 0.0
            
        except Exception as e:
            logger.error(f"‚ùå Error getting admin debt: {e}")
            return 0.0
    
    def get_admin_products(self, admin_id: int, settled: bool = False) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤–∑—è—Ç—ã—Ö –∞–¥–º–∏–Ω–æ–º"""
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT * FROM admin_products
                WHERE admin_id = ? AND settled = ?
                ORDER BY taken_at DESC
            ''', (admin_id, settled))
            
            products = [dict(row) for row in cursor.fetchall()]
            conn.close()
            
            return products
            
        except Exception as e:
            logger.error(f"‚ùå Error getting admin products: {e}")
            return []
    
    def get_admin_nickname(self, admin_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º –∞–¥–º–∏–Ω–∞ –∏–∑ –ë–î
        
        Args:
            admin_id: ID –∞–¥–º–∏–Ω–∞
            
        Returns:
            –ù–∏–∫–Ω–µ–π–º –∞–¥–º–∏–Ω–∞ –∏–ª–∏ None
        """
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('SELECT admin_nickname FROM admins WHERE user_id = ?', (admin_id,))
            row = cursor.fetchone()
            conn.close()
            
            return row[0] if row and row[0] else None
            
        except Exception as e:
            logger.error(f"‚ùå Error getting admin nickname: {e}")
            return None
    
    def set_admin_nickname(self, admin_id: int, nickname: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –∞–¥–º–∏–Ω–∞
        
        Args:
            admin_id: ID –∞–¥–º–∏–Ω–∞
            nickname: –ù–∏–∫–Ω–µ–π–º –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥–º–∏–Ω
            cursor.execute('SELECT user_id FROM admins WHERE user_id = ?', (admin_id,))
            if not cursor.fetchone():
                # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                cursor.execute('''
                    INSERT INTO admins (user_id, admin_nickname, is_active)
                    VALUES (?, ?, 1)
                ''', (admin_id, nickname))
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∏–∫–Ω–µ–π–º
                cursor.execute('''
                    UPDATE admins 
                    SET admin_nickname = ?
                    WHERE user_id = ?
                ''', (nickname, admin_id))
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ Admin nickname set: {admin_id} -> {nickname}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error setting admin nickname: {e}")
            return False
    
    def get_display_name(self, admin_id: int, admin_name: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∞–¥–º–∏–Ω–∞ (–Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –∏–º—è)
        
        Args:
            admin_id: ID –∞–¥–º–∏–Ω–∞
            admin_name: –ò–º—è –∏–∑ Telegram
            
        Returns:
            –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: full_name > nickname > username > admin_name > admin_id
        """
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            # Get full_name and username from admins table
            cursor.execute('SELECT full_name, username FROM admins WHERE user_id = ?', (admin_id,))
            result = cursor.fetchone()
            conn.close()
            
            if result:
                full_name, username = result
                # Priority: full_name > nickname > username
                if full_name and full_name.strip():
                    return full_name
                
                nickname = self.get_admin_nickname(admin_id)
                if nickname:
                    return nickname
                
                if username and username.strip():
                    return f"@{username}"
            else:
                # Not in admins table, try nickname
                nickname = self.get_admin_nickname(admin_id)
                if nickname:
                    return nickname
            
            # Fallback to admin_name or admin_id
            return admin_name if admin_name else str(admin_id)
        except Exception as e:
            logger.error(f"‚ùå Error getting display name: {e}")
            nickname = self.get_admin_nickname(admin_id)
            return nickname if nickname else (admin_name if admin_name else str(admin_id))
    
    def get_all_debts(self, sort_by: str = 'debt') -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ–ª–≥–∏ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ —Å –Ω–∏–∫–Ω–µ–π–º–∞–º–∏
        
        Args:
            sort_by: 'debt' - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—É–º–º–µ –¥–æ–ª–≥–∞ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
                    'name' - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∞ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
        """
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            order_clause = 'total DESC' if sort_by == 'debt' else 'admin_name ASC'
            
            cursor.execute(f'''
                SELECT admin_id, admin_name, SUM(total_debt) as total
                FROM admin_products
                WHERE settled = FALSE
                GROUP BY admin_id
                ORDER BY {order_clause}
            ''')
            
            debts = {}
            for row in cursor.fetchall():
                admin_id, admin_name, total = row
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –∞–¥–º–∏–Ω–∞
                display_name = self.get_display_name(admin_id, admin_name)
                debts[admin_id] = {
                    'name': display_name,
                    'original_name': admin_name,
                    'total': total
                }
            
            conn.close()
            return debts
            
        except Exception as e:
            logger.error(f"‚ùå Error getting all debts: {e}")
            return {}
    
    def get_products_report(self, start_date: str = None, end_date: str = None, sort_by: str = 'admin') -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å –Ω–∏–∫–Ω–µ–π–º–∞–º–∏ –∞–¥–º–∏–Ω–æ–≤
        
        Args:
            start_date: –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
            end_date: –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
            sort_by: 'admin' - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∞
                    'product' - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
        """
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            query = '''
                SELECT admin_id, admin_name, product_name, 
                       SUM(quantity) as total_quantity,
                       SUM(total_debt) as total_debt
                FROM admin_products
                WHERE settled = FALSE
            '''
            
            params = []
            
            if start_date:
                query += ' AND taken_at >= ?'
                params.append(start_date)
            
            if end_date:
                query += ' AND taken_at <= ?'
                params.append(end_date)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            if sort_by == 'product':
                query += ' GROUP BY product_name, admin_id ORDER BY product_name, admin_name'
            else:
                query += ' GROUP BY admin_id, product_name ORDER BY admin_name, product_name'
            
            cursor.execute(query, params)
            
            report = []
            for row in cursor.fetchall():
                admin_id = row[0]
                admin_name = row[1]
                display_name = self.get_display_name(admin_id, admin_name)
                report.append({
                    'admin_id': admin_id,
                    'admin_name': display_name,
                    'original_name': admin_name,
                    'product_name': row[2],
                    'total_quantity': row[3],
                    'total_debt': row[4]
                })
            
            conn.close()
            return report
            
        except Exception as e:
            logger.error(f"‚ùå Error getting products report: {e}")
            return []
    
    def get_products_summary(self, start_date: str = None, end_date: str = None) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Ç–æ–≤–∞—Ä–∞–º (–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥)
        
        Args:
            start_date: –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
            end_date: –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–∂–¥–æ–º —Ç–æ–≤–∞—Ä–µ:
            [{'product_name': 'Gorilla', 'total_quantity': 12, 'total_debt': 600}, ...]
        """
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            query = '''
                SELECT product_name, 
                       SUM(quantity) as total_quantity,
                       SUM(total_debt) as total_debt
                FROM admin_products
                WHERE settled = FALSE
            '''
            
            params = []
            
            if start_date:
                query += ' AND taken_at >= ?'
                params.append(start_date)
            
            if end_date:
                query += ' AND taken_at <= ?'
                params.append(end_date)
            
            query += ' GROUP BY product_name ORDER BY product_name'
            
            cursor.execute(query, params)
            
            summary = []
            for row in cursor.fetchall():
                summary.append({
                    'product_name': row[0],
                    'total_quantity': row[1],
                    'total_debt': row[2]
                })
            
            conn.close()
            return summary
            
        except Exception as e:
            logger.error(f"‚ùå Error getting products summary: {e}")
            return []
    
    def clear_settled_products(self) -> int:
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–≥–∞—à–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('DELETE FROM admin_products WHERE settled = TRUE')
            deleted = cursor.rowcount
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ Cleared {deleted} settled products")
            return deleted
            
        except Exception as e:
            logger.error(f"‚ùå Error clearing settled products: {e}")
            return 0
    
    def clear_admin_debt(self, admin_id: int) -> bool:
        """–û–±–Ω—É–ª–∏—Ç—å –¥–æ–ª–≥ –∞–¥–º–∏–Ω–∞ (–ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø–æ–≥–∞—à–µ–Ω–Ω—ã–π)"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE admin_products 
                SET settled = TRUE
                WHERE admin_id = ? AND settled = FALSE
            ''', (admin_id,))
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ Admin {admin_id} debt cleared")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error clearing admin debt: {e}")
            return False
    
    def clear_all_debts(self) -> bool:
        """–û–±–Ω—É–ª–∏—Ç—å –í–°–ï –¥–æ–ª–≥–∏ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ (–ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø–æ–≥–∞—à–µ–Ω–Ω—ã–µ)"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE admin_products 
                SET settled = TRUE
                WHERE settled = FALSE
            ''')
            
            affected = cursor.rowcount
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ All debts cleared ({affected} records)")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error clearing all debts: {e}")
            return False
    
    def format_products_list(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        products = self.list_products()
        
        if not products:
            return "üì≠ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ"
        
        text = "üì¶ –°–ü–ò–°–û–ö –¢–û–í–ê–†–û–í\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        for prod in products:
            text += f"üîπ {prod['name']}\n"
            text += f"   üí∞ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {prod['cost_price']:,.0f} ‚ÇΩ\n"
            text += f"   üÜî ID: {prod['id']}\n\n"
        
        return text
    
    def format_admin_debt_report(self, admin_id: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –ø–æ –¥–æ–ª–≥—É –∞–¥–º–∏–Ω–∞"""
        products = self.get_admin_products(admin_id, settled=False)
        total_debt = self.get_admin_debt(admin_id)
        
        if not products:
            return "‚úÖ –ù–µ—Ç –¥–æ–ª–≥–æ–≤"
        
        text = "üí≥ –ú–û–ô –î–û–õ–ì –ü–û –¢–û–í–ê–†–ê–ú\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–æ–≤–∞—Ä–∞–º
        grouped = {}
        for prod in products:
            name = prod['product_name']
            if name not in grouped:
                grouped[name] = {
                    'quantity': 0,
                    'debt': 0,
                    'price': prod['cost_price']
                }
            grouped[name]['quantity'] += prod['quantity']
            grouped[name]['debt'] += prod['total_debt']
        
        for name, data in grouped.items():
            text += f"üì¶ {name}\n"
            text += f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']} —à—Ç\n"
            text += f"   –¶–µ–Ω–∞: {data['price']:,.0f} ‚ÇΩ/—à—Ç\n"
            text += f"   –°—É–º–º–∞: {data['debt']:,.0f} ‚ÇΩ\n\n"
        
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        text += f"üí∞ –ò–¢–û–ì–û –ö –û–ü–õ–ê–¢–ï: {total_debt:,.0f} ‚ÇΩ"
        
        return text
    
    def format_all_debts_report(self, sort_by: str = 'debt') -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –ø–æ –≤—Å–µ–º –¥–æ–ª–≥–∞–º
        
        Args:
            sort_by: 'debt' - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—É–º–º–µ –¥–æ–ª–≥–∞
                    'name' - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∞
        """
        debts = self.get_all_debts(sort_by=sort_by)
        
        if not debts:
            return "‚úÖ –ù–µ—Ç –¥–æ–ª–≥–æ–≤"
        
        sort_label = "–ø–æ —Å—É–º–º–µ –¥–æ–ª–≥–∞" if sort_by == 'debt' else "–ø–æ –∏–º–µ–Ω–∏"
        
        text = f"üí≥ –î–û–õ–ì–ò –ê–î–ú–ò–ù–û–í –ü–û –¢–û–í–ê–†–ê–ú (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ {sort_label})\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        total_all = 0
        
        for admin_id, data in debts.items():
            text += f"üë§ {data['name']}\n"
            text += f"   üí∞ –î–æ–ª–≥: {data['total']:,.0f} ‚ÇΩ\n\n"
            total_all += data['total']
        
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        text += f"üíé –í–°–ï–ì–û –î–û–õ–ì–û–í: {total_all:,.0f} ‚ÇΩ"
        
        return text
    
    def format_products_report(self, start_date: str = None, end_date: str = None, sort_by: str = 'admin') -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥
        
        Args:
            start_date: –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
            end_date: –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
            sort_by: 'admin' - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω–∞–º
                    'product' - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
        """
        report = self.get_products_report(start_date, end_date, sort_by=sort_by)
        
        if not report:
            return "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥"
        
        period_text = ""
        if start_date and end_date:
            period_text = f" —Å {start_date[:10]} –ø–æ {end_date[:10]}"
        elif start_date:
            period_text = f" —Å {start_date[:10]}"
        
        sort_label = "–ø–æ –∞–¥–º–∏–Ω–∞–º" if sort_by == 'admin' else "–ø–æ —Ç–æ–≤–∞—Ä–∞–º"
        
        text = f"üìä –û–¢–ß–Å–¢ –ü–û –¢–û–í–ê–†–ê–ú{period_text} ({sort_label})\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        if sort_by == 'product':
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
            current_product = None
            product_total = 0
            
            for item in report:
                if current_product != item['product_name']:
                    if current_product:
                        text += f"   üí∞ –ò—Ç–æ–≥–æ: {product_total:,.0f} ‚ÇΩ\n\n"
                    
                    current_product = item['product_name']
                    product_total = 0
                    text += f"üì¶ {current_product}\n"
                
                text += f"   üë§ {item['admin_name']}: {item['total_quantity']} —à—Ç √ó "
                text += f"{item['total_debt']/item['total_quantity']:,.0f} ‚ÇΩ = "
                text += f"{item['total_debt']:,.0f} ‚ÇΩ\n"
                
                product_total += item['total_debt']
            
            if current_product:
                text += f"   üí∞ –ò—Ç–æ–≥–æ: {product_total:,.0f} ‚ÇΩ\n"
        else:
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω–∞–º
            current_admin = None
            admin_total = 0
            
            for item in report:
                if current_admin != item['admin_name']:
                    if current_admin:
                        text += f"   üí∞ –ò—Ç–æ–≥–æ: {admin_total:,.0f} ‚ÇΩ\n\n"
                    
                    current_admin = item['admin_name']
                    admin_total = 0
                    text += f"üë§ {current_admin}\n"
                
                text += f"   üì¶ {item['product_name']}: {item['total_quantity']} —à—Ç √ó "
                text += f"{item['total_debt']/item['total_quantity']:,.0f} ‚ÇΩ = "
                text += f"{item['total_debt']:,.0f} ‚ÇΩ\n"
                
                admin_total += item['total_debt']
            
            if current_admin:
                text += f"   üí∞ –ò—Ç–æ–≥–æ: {admin_total:,.0f} ‚ÇΩ\n"
        
        return text
    
    def format_products_summary_report(self, start_date: str = None, end_date: str = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º (–æ–±—â–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
        
        Args:
            start_date: –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
            end_date: –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "12 Gorilla, 14 Redbull –∑–∞ –ø–µ—Ä–∏–æ–¥"
        """
        summary = self.get_products_summary(start_date, end_date)
        
        if not summary:
            return "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥"
        
        period_text = ""
        if start_date and end_date:
            period_text = f" —Å {start_date[:10]} –ø–æ {end_date[:10]}"
        elif start_date:
            period_text = f" —Å {start_date[:10]}"
        
        text = f"üìä –°–í–û–î–ö–ê –ü–û –¢–û–í–ê–†–ê–ú{period_text}\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        # –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "12 Gorilla, 14 Redbull"
        products_list = []
        total_debt = 0
        
        for item in summary:
            products_list.append(f"{item['total_quantity']} {item['product_name']}")
            total_debt += item['total_debt']
        
        text += "üì¶ " + ", ".join(products_list) + "\n\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞
        text += "\n–î–µ—Ç–∞–ª—å–Ω–æ:\n"
        for item in summary:
            text += f"  ‚Ä¢ {item['product_name']}: {item['total_quantity']} —à—Ç = {item['total_debt']:,.0f} ‚ÇΩ\n"
        
        text += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        text += f"üí∞ –í–°–ï–ì–û: {total_debt:,.0f} ‚ÇΩ"
        
        return text
    
    def format_detailed_debts_report(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –∞–¥–º–∏–Ω–∞–º –∏ —Ç–æ–≤–∞—Ä–∞–º
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "Vanya: 2 Redbull, 4 Bulmeni = 300‚ÇΩ"
        """
        report = self.get_products_report(sort_by='admin')
        
        if not report:
            return "‚úÖ –ù–µ—Ç –¥–æ–ª–≥–æ–≤"
        
        text = "üí≥ –î–ï–¢–ê–õ–¨–ù–´–ï –î–û–õ–ì–ò –ê–î–ú–ò–ù–û–í\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        current_admin = None
        admin_products = []
        admin_total = 0
        grand_total = 0
        
        for item in report:
            if current_admin != item['admin_name']:
                # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
                if current_admin and admin_products:
                    text += f"üë§ {current_admin}: "
                    text += ", ".join(admin_products)
                    text += f" = {admin_total:,.0f} ‚ÇΩ\n\n"
                
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
                current_admin = item['admin_name']
                admin_products = []
                admin_total = 0
            
            admin_products.append(f"{item['total_quantity']} {item['product_name']}")
            admin_total += item['total_debt']
            grand_total += item['total_debt']
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∞
        if current_admin and admin_products:
            text += f"üë§ {current_admin}: "
            text += ", ".join(admin_products)
            text += f" = {admin_total:,.0f} ‚ÇΩ\n\n"
        
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        text += f"üíé –í–°–ï–ì–û –î–û–õ–ì–û–í: {grand_total:,.0f} ‚ÇΩ"
        
        return text

