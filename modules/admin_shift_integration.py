#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Admin & Shift Management Integration - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–æ–¥—É–ª—å
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏, –∫–æ–Ω—Ç—Ä–æ–ª—å —Å–º–µ–Ω –∏ OCR
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, CallbackQueryHandler

from .admin_management import AdminManagementSystem, AdminManagementCommands
from .shift_control import ShiftControlSystem, ShiftControlCommands
from .ocr_processor import OCRProcessor, OCRCommands
from .manual_update import ManualUpdateSystem, ManualUpdateCommands

logger = logging.getLogger(__name__)

class AdminShiftIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏ –∏ —Å–º–µ–Ω–∞–º–∏"""
    
    def __init__(self, db_path: str, photo_storage_path: str = "/opt/club_assistant/photos"):
        self.db_path = db_path
        self.photo_storage_path = photo_storage_path
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã
        self.admin_mgmt = AdminManagementSystem(db_path)
        self.shift_control = ShiftControlSystem(db_path, photo_storage_path)
        self.ocr_processor = OCRProcessor()
        self.update_system = ManualUpdateSystem()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        self.admin_commands = AdminManagementCommands(self.admin_mgmt)
        self.shift_commands = ShiftControlCommands(self.shift_control)
        self.ocr_commands = OCRCommands(self.ocr_processor)
        self.update_commands = ManualUpdateCommands(self.update_system)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤
        self.admin_mgmt.sync_with_existing_admins()
        
        logger.info("‚úÖ Admin & Shift Management Integration initialized")
    
    def register_handlers(self, application):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏
        application.add_handler(CommandHandler("adminmgmt", self.admin_commands.cmd_admin_management))
        application.add_handler(CallbackQueryHandler(self.admin_commands.admin_list_callback, pattern="^admin_list"))
        application.add_handler(CallbackQueryHandler(self.admin_commands.admin_stats_callback, pattern="^admin_stats"))
        application.add_handler(CallbackQueryHandler(self.admin_commands.admin_sync_callback, pattern="^admin_sync"))
        
        # –ö–æ–º–∞–Ω–¥—ã –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–º–µ–Ω
        application.add_handler(CommandHandler("shiftmgmt", self.shift_commands.cmd_shift_control))
        application.add_handler(CallbackQueryHandler(self.shift_commands.shift_submit_callback, pattern="^shift_submit"))
        application.add_handler(CallbackQueryHandler(self.shift_commands.shift_reports_callback, pattern="^shift_reports"))
        application.add_handler(CallbackQueryHandler(self.shift_commands.shift_stats_callback, pattern="^shift_stats"))
        
        # –ö–æ–º–∞–Ω–¥—ã —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        application.add_handler(CommandHandler("manualupdate", self.update_commands.cmd_manual_update))
        application.add_handler(CommandHandler("updatelog", self.update_commands.cmd_update_log))
        
        logger.info("‚úÖ Admin & Shift Management handlers registered")
    
    async def handle_shift_with_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Å —Ñ–æ—Ç–æ"""
        try:
            if not update.message.photo:
                await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é")
                return
            
            user_id = update.effective_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            shift_data = context.user_data.get('shift_data', {})
            club_name = context.user_data.get('shift_club', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            shift_date = context.user_data.get('shift_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            shift_time = context.user_data.get('shift_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
            photo = update.message.photo[-1]
            photo_path = await self.shift_control.save_shift_photo(
                photo.file_id, user_id, club_name, shift_date, shift_time, context.bot
            )
            
            if not photo_path:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —Å OCR
            ocr_result = await self.ocr_commands.process_shift_photo(
                update, context, photo_path, shift_data
            )
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ —Å–º–µ–Ω–µ
            shift_id = self.shift_control.create_shift_report(
                user_id, club_name, shift_date, shift_time, shift_data, photo_path, ocr_result
            )
            
            if shift_id:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω–∞
                self.admin_mgmt.update_admin_activity(
                    user_id, 'shift_submitted', {
                        'shift_id': shift_id,
                        'club': club_name,
                        'ocr_success': ocr_result.get('success', False)
                    }
                )
                
                await update.message.reply_text(
                    f"‚úÖ **–°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–Ω–∞!**\n\n"
                    f"üÜî ID –æ—Ç—á–µ—Ç–∞: {shift_id}\n"
                    f"üè¢ –ö–ª—É–±: {club_name}\n"
                    f"üìÖ –î–∞—Ç–∞: {shift_date}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {shift_time}\n"
                    f"üîç OCR: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if ocr_result.get('success') else '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å'}\n"
                    f"üì∏ –§–æ—Ç–æ: ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ",
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ —Å–º–µ–Ω–µ")
            
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data.clear()
            
        except Exception as e:
            logger.error(f"‚ùå Error handling shift with photo: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–º–µ–Ω—ã: {e}")
    
    def get_system_status(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
        try:
            admin_stats = self.admin_mgmt.get_admin_stats()
            shift_stats = self.shift_control.get_shift_statistics()
            
            return {
                'admin_management': {
                    'total_admins': admin_stats.get('total_admins', 0),
                    'active_last_week': admin_stats.get('active_last_week', 0),
                    'roles_stats': admin_stats.get('roles_stats', {})
                },
                'shift_control': {
                    'total_shifts': shift_stats.get('total_shifts', 0),
                    'verified_shifts': shift_stats.get('verified_shifts', 0),
                    'pending_shifts': shift_stats.get('pending_shifts', 0),
                    'ocr_verified_shifts': shift_stats.get('ocr_verified_shifts', 0)
                },
                'ocr_processor': {
                    'available': True,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Tesseract
                    'patterns_count': len(self.ocr_processor.number_patterns)
                },
                'photo_storage': {
                    'path': self.photo_storage_path,
                    'available': True  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error getting system status: {e}")
            return {'error': str(e)}
    
    async def cmd_system_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
        user_id = update.effective_user.id
        
        if not self._is_authorized(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")
            return
        
        status = self.get_system_status()
        
        text = "üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è**\n\n"
        
        # –°—Ç–∞—Ç—É—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏
        admin_mgmt = status.get('admin_management', {})
        text += "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏:**\n"
        text += f"  ‚Ä¢ –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–æ–≤: {admin_mgmt.get('total_admins', 0)}\n"
        text += f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {admin_mgmt.get('active_last_week', 0)}\n"
        
        roles = admin_mgmt.get('roles_stats', {})
        if roles:
            text += "  ‚Ä¢ –ü–æ —Ä–æ–ª—è–º:\n"
            for role, count in roles.items():
                text += f"    - {role}: {count}\n"
        
        # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–º–µ–Ω
        shift_control = status.get('shift_control', {})
        text += f"\nüìã **–ö–æ–Ω—Ç—Ä–æ–ª—å —Å–º–µ–Ω:**\n"
        text += f"  ‚Ä¢ –í—Å–µ–≥–æ —Å–º–µ–Ω: {shift_control.get('total_shifts', 0)}\n"
        text += f"  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {shift_control.get('verified_shifts', 0)}\n"
        text += f"  ‚Ä¢ –û–∂–∏–¥–∞–µ—Ç: {shift_control.get('pending_shifts', 0)}\n"
        text += f"  ‚Ä¢ OCR –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {shift_control.get('ocr_verified_shifts', 0)}\n"
        
        # –°—Ç–∞—Ç—É—Å OCR
        ocr = status.get('ocr_processor', {})
        text += f"\nüîç **OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä:**\n"
        text += f"  ‚Ä¢ –î–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ' if ocr.get('available') else '‚ùå'}\n"
        text += f"  ‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {ocr.get('patterns_count', 0)}\n"
        
        # –°—Ç–∞—Ç—É—Å —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
        photo = status.get('photo_storage', {})
        text += f"\nüì∏ **–•—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ:**\n"
        text += f"  ‚Ä¢ –ü—É—Ç—å: {photo.get('path', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        text += f"  ‚Ä¢ –î–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ' if photo.get('available') else '‚ùå'}\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')
    
    def _is_authorized(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–¥–º–∏–Ω–æ–≤
        return True


def register_admin_shift_management(application, config: dict, db_path: str):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏ –∏ —Å–º–µ–Ω–∞–º–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        integration = AdminShiftIntegration(db_path)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        integration.register_handlers(application)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
        application.add_handler(CommandHandler("systemstatus", integration.cmd_system_status))
        
        logger.info("‚úÖ Admin & Shift Management system registered successfully")
        return integration
        
    except Exception as e:
        logger.error(f"‚ùå Error registering Admin & Shift Management: {e}")
        return None
