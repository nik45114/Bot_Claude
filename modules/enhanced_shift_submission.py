#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Enhanced Shift Submission - –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–¥–∞—á–∏ —Å–º–µ–Ω —Å –∫–Ω–æ–ø–æ—á–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
"""

import logging
import sqlite3
import json
import os
from datetime import datetime, date
from typing import List, Dict, Optional, Tuple
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, ConversationHandler

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å–¥–∞—á–∏ —Å–º–µ–Ω—ã
(SHIFT_CLUB_SELECT, SHIFT_TIME_SELECT, SHIFT_DATA_INPUT, SHIFT_PHOTO_UPLOAD, 
 SHIFT_CONFIRMATION, SHIFT_COMPLETE) = range(6)

class EnhancedShiftSubmission:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–¥–∞—á–∏ —Å–º–µ–Ω —Å –∫–Ω–æ–ø–æ—á–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    
    def __init__(self, db_path: str, photo_storage_path: str = "/opt/club_assistant/photos"):
        self.db_path = db_path
        self.photo_storage_path = photo_storage_path
        self.owner_id = None
        
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—É–±–æ–≤
        self.clubs = ["–†–∏–æ", "–ú–æ—Å–∫–≤–∞", "–°–ü–±", "–ö–∞–∑–∞–Ω—å", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"]
        
        # –í—Ä–µ–º–µ–Ω–∞ —Å–º–µ–Ω
        self.shift_times = ["morning", "evening"]
        
        self._init_database()
        self._init_photo_storage()
    
    def set_owner_id(self, owner_id: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ID –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
        self.owner_id = owner_id
    
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–º–µ–Ω
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS shift_submissions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    admin_id INTEGER NOT NULL,
                    club_name TEXT NOT NULL,
                    shift_date DATE NOT NULL,
                    shift_time TEXT NOT NULL,
                    
                    -- –î–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã
                    fact_cash REAL DEFAULT 0,
                    fact_card REAL DEFAULT 0,
                    qr_amount REAL DEFAULT 0,
                    card2_amount REAL DEFAULT 0,
                    safe_cash_end REAL DEFAULT 0,
                    box_cash_end REAL DEFAULT 0,
                    
                    -- –§–æ—Ç–æ –∏ OCR
                    photo_file_id TEXT,
                    photo_path TEXT,
                    ocr_text TEXT,
                    ocr_numbers TEXT,
                    ocr_verified BOOLEAN DEFAULT 0,
                    ocr_confidence REAL DEFAULT 0,
                    
                    -- –°—Ç–∞—Ç—É—Å
                    status TEXT DEFAULT 'submitted',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    
                    FOREIGN KEY (admin_id) REFERENCES admin_management(user_id)
                )
            ''')
            
            conn.commit()
            conn.close()
            logger.info("‚úÖ Enhanced Shift Submission Database initialized")
            
        except Exception as e:
            logger.error(f"‚ùå Error initializing shift submission database: {e}")
    
    def _init_photo_storage(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–æ—Ç–æ"""
        try:
            os.makedirs(self.photo_storage_path, exist_ok=True)
            logger.info(f"‚úÖ Photo storage initialized: {self.photo_storage_path}")
        except Exception as e:
            logger.error(f"‚ùå Error initializing photo storage: {e}")
    
    async def save_shift_photo(self, file_id: str, admin_id: int, club_name: str, 
                              shift_date: date, shift_time: str, bot) -> Optional[str]:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ —Å–º–µ–Ω—ã"""
        try:
            file = await bot.get_file(file_id)
            
            filename = f"{admin_id}_{club_name}_{shift_date}_{shift_time}_{datetime.now().strftime('%H%M%S')}.jpg"
            file_path = os.path.join(self.photo_storage_path, filename)
            
            await file.download_to_drive(file_path)
            
            logger.info(f"‚úÖ Photo saved: {file_path}")
            return file_path
            
        except Exception as e:
            logger.error(f"‚ùå Error saving shift photo: {e}")
            return None
    
    def extract_numbers_from_photo(self, photo_path: str) -> Dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–µ–ª –∏–∑ —Ñ–æ—Ç–æ —Å –ø–æ–º–æ—â—å—é OCR"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OCR
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            
            import cv2
            import numpy as np
            
            image = cv2.imread(photo_path)
            if image is None:
                return {'error': 'Could not load image'}
            
            # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            _, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ OCR –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            
            extracted_numbers = {
                'fact_cash': None,
                'fact_card': None,
                'qr_amount': None,
                'card2_amount': None,
                'safe_cash_end': None,
                'box_cash_end': None,
                'confidence': 0.0,
                'raw_text': '',
                'processing_time': 0.0
            }
            
            return extracted_numbers
            
        except Exception as e:
            logger.error(f"‚ùå Error extracting numbers from photo: {e}")
            return {'error': str(e)}
    
    def create_shift_submission(self, admin_id: int, club_name: str, shift_date: date, 
                               shift_time: str, shift_data: Dict, photo_path: str = None,
                               ocr_data: Dict = None) -> Optional[int]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Å–º–µ–Ω–µ"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO shift_submissions 
                (admin_id, club_name, shift_date, shift_time, fact_cash, fact_card,
                 qr_amount, card2_amount, safe_cash_end, box_cash_end, photo_path,
                 ocr_text, ocr_numbers, ocr_verified, ocr_confidence)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                admin_id, club_name, shift_date, shift_time,
                shift_data.get('fact_cash', 0),
                shift_data.get('fact_card', 0),
                shift_data.get('qr_amount', 0),
                shift_data.get('card2_amount', 0),
                shift_data.get('safe_cash_end', 0),
                shift_data.get('box_cash_end', 0),
                photo_path,
                ocr_data.get('raw_text', '') if ocr_data else '',
                json.dumps(ocr_data) if ocr_data else None,
                ocr_data.get('confidence', 0) > 0.8 if ocr_data else False,
                ocr_data.get('confidence', 0) if ocr_data else 0
            ))
            
            shift_id = cursor.lastrowid
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∞
            cursor.execute('''
                UPDATE admin_management 
                SET shift_count = shift_count + 1, 
                    last_shift_date = ?,
                    updated_at = CURRENT_TIMESTAMP
                WHERE user_id = ?
            ''', (shift_date, admin_id))
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ Shift submission created: ID {shift_id}")
            return shift_id
            
        except Exception as e:
            logger.error(f"‚ùå Error creating shift submission: {e}")
            return None


class EnhancedShiftCommands:
    """–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–º–µ–Ω"""
    
    def __init__(self, shift_system: EnhancedShiftSubmission):
        self.shift_system = shift_system
    
    async def cmd_submit_shift(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–¥–∞—á–∏ —Å–º–µ–Ω—ã"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not self._is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–¥–∞—á–∏ —Å–º–µ–Ω")
            return
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.clear()
        
        await self.show_club_selection(update, context)
        return SHIFT_CLUB_SELECT
    
    async def show_club_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∫–ª—É–±–∞"""
        keyboard = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—É–±–∞
        for club in self.shift_system.clubs:
            keyboard.append([InlineKeyboardButton(f"üè¢ {club}", callback_data=f"club_{club}")])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_shift")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "üè¢ **–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–± –¥–ª—è —Å–¥–∞—á–∏ —Å–º–µ–Ω—ã:**"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def club_selected_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª—É–±–∞"""
        query = update.callback_query
        await query.answer()
        
        club_name = query.data.split('_')[1]
        context.user_data['shift_club'] = club_name
        
        await self.show_time_selection(update, context)
        return SHIFT_TIME_SELECT
    
    async def show_time_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã"""
        keyboard = [
            [InlineKeyboardButton("‚òÄÔ∏è –£—Ç—Ä–µ–Ω–Ω—è—è —Å–º–µ–Ω–∞", callback_data="time_morning")],
            [InlineKeyboardButton("üåô –í–µ—á–µ—Ä–Ω—è—è —Å–º–µ–Ω–∞", callback_data="time_evening")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_clubs")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_shift")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        club_name = context.user_data.get('shift_club', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        text = f"‚è∞ **–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å–º–µ–Ω—ã –¥–ª—è {club_name}:**"
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def time_selected_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
        query = update.callback_query
        await query.answer()
        
        shift_time = query.data.split('_')[1]
        context.user_data['shift_time'] = shift_time
        context.user_data['shift_date'] = date.today()
        
        await self.show_data_input(update, context)
        return SHIFT_DATA_INPUT
    
    async def show_data_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö"""
        club_name = context.user_data.get('shift_club', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        shift_time = context.user_data.get('shift_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        shift_date = context.user_data.get('shift_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        text = f"üìä **–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã**\n\n"
        text += f"üè¢ –ö–ª—É–±: {club_name}\n"
        text += f"üìÖ –î–∞—Ç–∞: {shift_date}\n"
        text += f"‚è∞ –í—Ä–µ–º—è: {shift_time}\n\n"
        text += f"**–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:**\n\n"
        text += f"```\n"
        text += f"–§–∞–∫—Ç –Ω–∞–ª: 5000\n"
        text += f"–§–∞–∫—Ç –∫–∞—Ä—Ç–∞: 15000\n"
        text += f"QR: 2000\n"
        text += f"–ö–∞—Ä—Ç–∞2: 0\n"
        text += f"–°–µ–π—Ñ: 10000\n"
        text += f"–ö–æ—Ä–æ–±–∫–∞: 5000\n"
        text += f"```\n\n"
        text += f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è."
        
        keyboard = [
            [InlineKeyboardButton("üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="upload_photo")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_time")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_shift")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def upload_photo_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
        query = update.callback_query
        await query.answer()
        
        text = "üì∏ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–º–µ–Ω—ã**\n\n"
        text += "–§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å:\n"
        text += "‚Ä¢ –°—É–º–º—ã –Ω–∞–ª–∏—á–Ω—ã—Ö –∏ –±–µ–∑–Ω–∞–ª–∞\n"
        text += "‚Ä¢ –û—Å—Ç–∞—Ç–∫–∏ –≤ –∫–∞—Å—Å–∞—Ö\n"
        text += "‚Ä¢ –ß–µ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –∏ —Ü–∏—Ñ—Ä—ã\n\n"
        text += "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ—Ç —á–∏—Å–ª–∞."
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_data")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_shift")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        
        context.user_data['waiting_for_photo'] = True
        return SHIFT_PHOTO_UPLOAD
    
    async def handle_shift_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å–º–µ–Ω—ã"""
        if not update.message.photo:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ")
            return
        
        if not context.user_data.get('waiting_for_photo'):
            return
        
        user_id = update.effective_user.id
        club_name = context.user_data.get('shift_club')
        shift_date = context.user_data.get('shift_date')
        shift_time = context.user_data.get('shift_time')
        
        await update.message.reply_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]
        photo_path = await self.shift_system.save_shift_photo(
            photo.file_id, user_id, club_name, shift_date, shift_time, context.bot
        )
        
        if not photo_path:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —Å OCR
        ocr_result = self.shift_system.extract_numbers_from_photo(photo_path)
        
        if ocr_result.get('error'):
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ OCR: {ocr_result['error']}")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã OCR
        context.user_data['ocr_result'] = ocr_result
        context.user_data['photo_path'] = photo_path
        context.user_data['waiting_for_photo'] = False
        
        await self.show_confirmation(update, context)
        return SHIFT_CONFIRMATION
    
    async def show_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        club_name = context.user_data.get('shift_club')
        shift_date = context.user_data.get('shift_date')
        shift_time = context.user_data.get('shift_time')
        ocr_result = context.user_data.get('ocr_result', {})
        photo_path = context.user_data.get('photo_path')
        
        text = f"üìã **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã**\n\n"
        text += f"üè¢ –ö–ª—É–±: {club_name}\n"
        text += f"üìÖ –î–∞—Ç–∞: {shift_date}\n"
        text += f"‚è∞ –í—Ä–µ–º—è: {shift_time}\n\n"
        
        if ocr_result:
            text += f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã OCR:**\n"
            numbers = ocr_result.get('numbers', {})
            
            field_names = {
                'fact_cash': '–ù–∞–ª–∏—á–Ω—ã–µ',
                'fact_card': '–ö–∞—Ä—Ç–∞',
                'qr_amount': 'QR',
                'card2_amount': '–ö–∞—Ä—Ç–∞ 2',
                'safe_cash_end': '–°–µ–π—Ñ',
                'box_cash_end': '–ö–æ—Ä–æ–±–∫–∞'
            }
            
            for field, name in field_names.items():
                value = numbers.get(field)
                if value is not None:
                    text += f"  ‚Ä¢ {name}: {value:,.0f} ‚ÇΩ\n"
                else:
                    text += f"  ‚Ä¢ {name}: ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ\n"
            
            text += f"\nüìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å OCR: {ocr_result.get('confidence', 0):.1%}\n"
        
        text += f"\nüì∏ –§–æ—Ç–æ: {'‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ' if photo_path else '‚ùå –ù–µ—Ç'}"
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–º–µ–Ω—É", callback_data="confirm_shift")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_data")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_data")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_shift")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def confirm_shift_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        club_name = context.user_data.get('shift_club')
        shift_date = context.user_data.get('shift_date')
        shift_time = context.user_data.get('shift_time')
        ocr_result = context.user_data.get('ocr_result', {})
        photo_path = context.user_data.get('photo_path')
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã
        shift_data = ocr_result.get('numbers', {})
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ —Å–º–µ–Ω–µ
        shift_id = self.shift_system.create_shift_submission(
            user_id, club_name, shift_date, shift_time, shift_data, photo_path, ocr_result
        )
        
        if shift_id:
            text = f"‚úÖ **–°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–Ω–∞!**\n\n"
            text += f"üÜî ID –æ—Ç—á–µ—Ç–∞: {shift_id}\n"
            text += f"üè¢ –ö–ª—É–±: {club_name}\n"
            text += f"üìÖ –î–∞—Ç–∞: {shift_date}\n"
            text += f"‚è∞ –í—Ä–µ–º—è: {shift_time}\n"
            text += f"üîç OCR: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if ocr_result.get('success') else '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å'}\n"
            text += f"üì∏ –§–æ—Ç–æ: ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n"
            text += f"–û—Ç—á–µ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            
            keyboard = [
                [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç", callback_data=f"view_report_{shift_id}")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ —Å–º–µ–Ω–µ")
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.clear()
        return SHIFT_COMPLETE
    
    async def cancel_shift_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Å–º–µ–Ω—ã"""
        query = update.callback_query
        await query.answer()
        
        context.user_data.clear()
        
        await query.edit_message_text(
            "‚ùå –°–¥–∞—á–∞ —Å–º–µ–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        )
        
        return ConversationHandler.END
    
    def _is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        try:
            conn = sqlite3.connect(self.shift_system.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM admin_management WHERE user_id = ? AND is_active = 1', (user_id,))
            count = cursor.fetchone()[0]
            conn.close()
            return count > 0
        except:
            return False


def register_enhanced_shift_submission(application, config: dict, db_path: str, owner_id: int):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–º–µ–Ω"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        shift_system = EnhancedShiftSubmission(db_path)
        shift_system.set_owner_id(owner_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        commands = EnhancedShiftCommands(shift_system)
        
        # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è —Å–º–µ–Ω
        shift_conversation = ConversationHandler(
            entry_points=[CommandHandler("shift", commands.cmd_submit_shift)],
            states={
                SHIFT_CLUB_SELECT: [
                    CallbackQueryHandler(commands.club_selected_callback, pattern="^club_"),
                    CallbackQueryHandler(commands.cancel_shift_callback, pattern="^cancel_shift$")
                ],
                SHIFT_TIME_SELECT: [
                    CallbackQueryHandler(commands.time_selected_callback, pattern="^time_"),
                    CallbackQueryHandler(commands.show_club_selection, pattern="^back_to_clubs$"),
                    CallbackQueryHandler(commands.cancel_shift_callback, pattern="^cancel_shift$")
                ],
                SHIFT_DATA_INPUT: [
                    CallbackQueryHandler(commands.upload_photo_callback, pattern="^upload_photo$"),
                    CallbackQueryHandler(commands.show_time_selection, pattern="^back_to_time$"),
                    CallbackQueryHandler(commands.cancel_shift_callback, pattern="^cancel_shift$")
                ],
                SHIFT_PHOTO_UPLOAD: [
                    MessageHandler(filters.PHOTO, commands.handle_shift_photo),
                    CallbackQueryHandler(commands.show_data_input, pattern="^back_to_data$"),
                    CallbackQueryHandler(commands.cancel_shift_callback, pattern="^cancel_shift$")
                ],
                SHIFT_CONFIRMATION: [
                    CallbackQueryHandler(commands.confirm_shift_callback, pattern="^confirm_shift$"),
                    CallbackQueryHandler(commands.show_data_input, pattern="^edit_data$"),
                    CallbackQueryHandler(commands.show_data_input, pattern="^back_to_data$"),
                    CallbackQueryHandler(commands.cancel_shift_callback, pattern="^cancel_shift$")
                ],
                SHIFT_COMPLETE: [
                    CallbackQueryHandler(commands.cancel_shift_callback, pattern="^cancel_shift$")
                ]
            },
            fallbacks=[CallbackQueryHandler(commands.cancel_shift_callback, pattern="^cancel_shift$")]
        )
        
        application.add_handler(shift_conversation)
        
        logger.info("‚úÖ Enhanced Shift Submission system registered")
        return shift_system
        
    except Exception as e:
        logger.error(f"‚ùå Error registering Enhanced Shift Submission: {e}")
        return None
