#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FinMon Shift Wizard - Button-based shift submission
Handles /shift command with step-by-step wizard
"""

import logging
from datetime import datetime, date, timedelta
from typing import Optional, Dict

# Try to use zoneinfo (Python 3.9+), fallback to pytz if needed
try:
    from zoneinfo import ZoneInfo
    PYTZ_AVAILABLE = False
except ImportError:
    try:
        import pytz
        PYTZ_AVAILABLE = True
    except ImportError:
        # Neither available, will use naive datetime
        PYTZ_AVAILABLE = False
        pytz = None

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

# Try to import analytics module
try:
    from modules.finmon_analytics import FinMonAnalytics
    ANALYTICS_AVAILABLE = True
except ImportError:
    ANALYTICS_AVAILABLE = False
    FinMonAnalytics = None

logger = logging.getLogger(__name__)

# Conversation states for CLOSING shift
(SELECT_CLUB, CONFIRM_IDENTITY, ENTER_FACT_CASH, ENTER_FACT_CARD, 
 ENTER_QR, ENTER_CARD2, ENTER_SAFE, ENTER_BOX, ENTER_TOVARKA, ENTER_GAMEPADS, ENTER_REPAIR, 
 ENTER_NEED_REPAIR, ENTER_GAMES, CONFIRM_SHIFT) = range(14)

# Conversation states for EXPENSE tracking (separate conversation)
(EXPENSE_SELECT_CASH_SOURCE, EXPENSE_ENTER_AMOUNT, EXPENSE_ENTER_REASON, EXPENSE_CONFIRM) = range(14, 18)

# Timezone and shift windows
TIMEZONE = 'Europe/Moscow'
SHIFT_CLOSE_TIMES = {
    'morning': {'hour': 10, 'minute': 0},   # 10:00 MSK
    'evening': {'hour': 22, 'minute': 0}    # 22:00 MSK
}
EARLY_OFFSET_HOURS = 1  # Allow early close 1 hour before
GRACE_MINUTES = 60      # Grace period after close time


def now_msk() -> datetime:
    """Get current time in Moscow timezone"""
    try:
        if PYTZ_AVAILABLE:
            msk = pytz.timezone(TIMEZONE)
            return datetime.now(msk)
        else:
            # Use zoneinfo (Python 3.9+)
            msk = ZoneInfo(TIMEZONE)
            return datetime.now(msk)
    except Exception as e:
        # Fallback to naive datetime if timezone not available
        logger.warning(f"‚ö†Ô∏è Timezone conversion failed: {e}, using naive datetime")
        return datetime.now()


def get_current_shift_window() -> Optional[Dict]:
    """
    Auto-detect which shift should be closed based on current MSK time
    
    Returns:
        Dict with shift_time and reason, or None if outside windows
    """
    now = now_msk()
    current_hour = now.hour
    current_minute = now.minute
    
    # Morning shift window: 09:00 - 11:00 (10:00 ¬± 1h + grace)
    morning_close = SHIFT_CLOSE_TIMES['morning']['hour']
    if (current_hour == morning_close - 1) or \
       (current_hour == morning_close and current_minute <= GRACE_MINUTES) or \
       (current_hour == morning_close + 1 and current_minute == 0):
        return {
            'shift_time': 'morning',
            'shift_date': now.date(),
            'reason': 'auto'
        }
    
    # Evening shift window: 21:00 - 23:00 (22:00 ¬± 1h + grace)
    evening_close = SHIFT_CLOSE_TIMES['evening']['hour']
    if (current_hour == evening_close - 1) or \
       (current_hour == evening_close and current_minute <= GRACE_MINUTES) or \
       (current_hour == evening_close + 1 and current_minute == 0):
        return {
            'shift_time': 'evening',
            'shift_date': now.date(),
            'reason': 'auto'
        }
    
    # Special case: very early morning (00:00 - 00:30) for late evening shifts
    if current_hour == 0 and current_minute <= 30:
        yesterday = now.date() - timedelta(days=1)
        return {
            'shift_time': 'evening',
            'shift_date': yesterday,
            'reason': 'late'
        }
    
    return None


def get_shift_type_for_opening() -> str:
    """
    Auto-detect which shift type to open based on current MSK time
    
    Returns:
        'morning' or 'evening'
    """
    now = now_msk()
    current_hour = now.hour
    
    # 10:00-22:00 = morning shift (–¥–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞, –∑–∞–∫—Ä–æ–µ—Ç—Å—è –≤ 22:00)
    # 22:00-10:00 = evening shift (–Ω–æ—á–Ω–∞—è —Å–º–µ–Ω–∞, –∑–∞–∫—Ä–æ–µ—Ç—Å—è –≤ 10:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è)
    if 10 <= current_hour < 22:
        return 'morning'
    else:
        return 'evening'


class ShiftWizard:
    """Wizard for button-based shift submission"""
    
    def __init__(self, finmon_simple, schedule, shift_manager=None, schedule_parser=None, owner_ids: list = None):
        """
        Initialize wizard
        
        Args:
            finmon_simple: FinMonSimple instance
            schedule: FinMonSchedule instance
            shift_manager: ShiftManager instance (optional)
            schedule_parser: ScheduleParser instance (optional)
            owner_ids: List of owner telegram IDs
        """
        self.finmon = finmon_simple
        self.schedule = schedule
        self.shift_manager = shift_manager
        self.schedule_parser = schedule_parser
        self.owner_ids = owner_ids or []
    
    def is_owner(self, user_id: int) -> bool:
        """Check if user is owner"""
        return user_id in self.owner_ids
    
    async def cmd_shift(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start shift submission process (CLOSE shift)"""
        user_id = update.effective_user.id
        
        # Check if shift manager is available
        if not self.shift_manager:
            await update.message.reply_text("‚ùå –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return ConversationHandler.END
        
        # Check for active shift
        active_shift = self.shift_manager.get_active_shift(user_id)
        
        if not active_shift:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–º–µ–Ω—ã\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–º–µ–Ω—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É:\n"
                "üîì –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É"
            )
            return ConversationHandler.END
        
        # Get shift data
        club = active_shift['club']
        shift_type = active_shift['shift_type']
        shift_id = active_shift['id']
        
        # Initialize shift data in context
        context.user_data['shift_data'] = {
            'fact_cash': 0.0,
            'fact_card': 0.0,
            'qr': 0.0,
            'card2': 0.0,
            'safe_cash_end': 0.0,
            'box_cash_end': 0.0,
            'tovarka': 0.0,
            'gamepads': 0,
            'repair': 0,
            'need_repair': 0,
            'games': 0
        }
        
        context.user_data['shift_club'] = club
        context.user_data['shift_time'] = shift_type
        context.user_data['active_shift_id'] = shift_id
        
        # Get expenses from this shift
        expenses = self.shift_manager.get_shift_expenses(shift_id)
        context.user_data['shift_expenses'] = expenses
        
        # Start from cash input
        shift_label = "‚òÄÔ∏è –£—Ç—Ä–æ (–¥–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞)" if shift_type == "morning" else "üåô –í–µ—á–µ—Ä (–Ω–æ—á–Ω–∞—è —Å–º–µ–Ω–∞)"
        
        msg = f"üìã –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã\n\n"
        msg += f"üè¢ –ö–ª—É–±: {club}\n"
        msg += f"‚è∞ {shift_label}\n\n"
        
        if expenses:
            expenses_total = sum(exp['amount'] for exp in expenses)
            msg += f"üí∏ –°–ø–∏—Å–∞–Ω–∏–π –≤ —Å–º–µ–Ω–µ: {expenses_total:,.0f} ‚ÇΩ\n\n"
        
        msg += "üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–ª–∏—á–∫—É —Ñ–∞–∫—Ç:\n\n–ü—Ä–∏–º–µ—Ä: 3440"
        
        await update.message.reply_text(msg)
        return ENTER_FACT_CASH
    
    # ===== Open Shift Methods =====
    
    async def cmd_open_shift(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Open a new shift"""
        user_id = update.effective_user.id
        
        # Check if shift manager is available
        if not self.shift_manager:
            await update.message.reply_text("‚ùå –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # Check if user already has an open shift
        active_shift = self.shift_manager.get_active_shift(user_id)
        if active_shift:
            await update.message.reply_text(
                f"‚ùå –£ –≤–∞—Å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ —Å–º–µ–Ω–∞\n\n"
                f"üè¢ –ö–ª—É–±: {active_shift['club']}\n"
                f"‚è∞ –¢–∏–ø: {'‚òÄÔ∏è –£—Ç—Ä–æ' if active_shift['shift_type'] == 'morning' else 'üåô –í–µ—á–µ—Ä'}\n\n"
                f"–°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä–æ–π—Ç–µ –µ—ë —á–µ—Ä–µ–∑:\nüîí –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É"
            )
            return
        
        # Auto-detect club from chat ID
        chat_id = update.effective_chat.id
        club = self.finmon.get_club_from_chat(chat_id)
        
        if club:
            # Club auto-detected
            return await self._open_shift_for_club(update, context, club)
        else:
            # Ask user to select club
            msg = "üîì –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã\n\n‚ö†Ô∏è –ö–ª—É–± –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±:"
            
            keyboard = [
                [InlineKeyboardButton("üè¢ –†–∏–æ", callback_data="open_rio")],
                [InlineKeyboardButton("üè¢ –°–µ–≤–µ—Ä", callback_data="open_sever")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="open_cancel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(msg, reply_markup=reply_markup)
    
    async def handle_open_club_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle club selection for opening shift"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "open_cancel":
            await query.edit_message_text("‚ùå –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        if query.data == "open_rio":
            club = "–†–∏–æ"
        elif query.data == "open_sever":
            club = "–°–µ–≤–µ—Ä"
        else:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            return
        
        return await self._open_shift_for_club(update, context, club, is_callback=True)
    
    async def _open_shift_for_club(self, update, context, club, is_callback=False):
        """Open shift for selected club"""
        user_id = update.effective_user.id if not is_callback else update.callback_query.from_user.id
        user = update.effective_user if not is_callback else update.callback_query.from_user
        
        # Auto-detect shift type based on time
        shift_type = get_shift_type_for_opening()
        shift_label = "‚òÄÔ∏è –£—Ç—Ä–æ (–¥–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞)" if shift_type == "morning" else "üåô –í–µ—á–µ—Ä (–Ω–æ—á–Ω–∞—è —Å–º–µ–Ω–∞)"
        close_time = "22:00" if shift_type == "morning" else "10:00"
        
        # Parse schedule from Google Sheets if available
        if self.schedule_parser:
            try:
                logger.info(f"üìä Parsing Google Sheets for {date.today()}, club={club}, shift={shift_type}")
                schedule_data = self.schedule_parser.parse_for_date(date.today())
                
                # Get duty for this club and shift type
                duty_key = (club, shift_type)
                if duty_key in schedule_data:
                    parsed_duty = schedule_data[duty_key]
                    logger.info(f"‚úÖ Found duty in Google Sheets: {parsed_duty}")
                    
                    # Update database with fresh data from Google Sheets
                    if parsed_duty.get('admin_name'):
                        self.shift_manager.add_duty_schedule(
                            duty_date=date.today(),
                            club=club,
                            shift_type=shift_type,
                            admin_id=parsed_duty.get('admin_id'),
                            admin_name=parsed_duty['admin_name']
                        )
                        logger.info(f"üíæ Updated DB with Google Sheets data")
                else:
                    logger.info(f"üìã No duty found in Google Sheets for {duty_key}")
                    
            except Exception as e:
                logger.error(f"‚ùå Failed to parse Google Sheets: {e}")
                import traceback
                traceback.print_exc()
                # Continue with DB fallback
        
        # Check if there's an expected duty person (from DB, potentially updated from Sheets)
        duty_info = None
        if self.shift_manager:
            duty_info = self.shift_manager.get_expected_duty(club, shift_type, date.today())
        
        # Build confirmation message
        username = f"@{user.username}" if user.username else "–ë–µ–∑ username"
        full_name = user.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        
        msg = f"üîì –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã\n\n"
        msg += f"üè¢ –ö–ª—É–±: {club}\n"
        msg += f"‚è∞ –°–º–µ–Ω–∞: {shift_label}\n"
        msg += f"üïê –ó–∞–∫—Ä—ã—Ç–∏–µ –≤: {close_time} –ú–°–ö\n\n"
        msg += f"üë§ –û—Ç–∫—Ä—ã–≤–∞–µ—Ç:\n"
        msg += f"  ‚Ä¢ {full_name}\n"
        msg += f"  ‚Ä¢ {username}\n"
        msg += f"  ‚Ä¢ ID: {user_id}\n\n"
        
        # Check if it's a replacement
        is_replacement = False
        if duty_info and duty_info.get('admin_name'):
            expected_name = duty_info['admin_name']
            expected_id = duty_info.get('admin_id')
            
            msg += f"üìã –ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é:\n  ‚Ä¢ {expected_name}"
            if expected_id:
                msg += f" (ID: {expected_id})"
                # Check if opener is different from expected
                if expected_id != user_id:
                    is_replacement = True
                    msg += "\n\n‚ö†Ô∏è –ó–ê–ú–ï–ù–ê"
            msg += "\n\n"
            
            # Will send confirmation request to duty person
            context.user_data['expected_duty_id'] = expected_id
            context.user_data['expected_duty_name'] = expected_name
            context.user_data['is_replacement'] = is_replacement
        else:
            msg += f"üìã –ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
        
        msg += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã:"
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data=f"confirm_open_{club}_{shift_type}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="open_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if is_callback:
            await update.callback_query.edit_message_text(msg, reply_markup=reply_markup)
        else:
            await update.message.reply_text(msg, reply_markup=reply_markup)
    
    async def handle_confirm_open_shift(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle shift open confirmation"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "open_cancel":
            await query.edit_message_text("‚ùå –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        # Parse callback data
        parts = query.data.split('_')  # confirm_open_ClubName_shifttype
        if len(parts) < 4:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        club = parts[2]
        shift_type = parts[3]
        user_id = query.from_user.id
        
        # Check if there's an expected duty person
        expected_duty_id = context.user_data.get('expected_duty_id')
        expected_duty_name = context.user_data.get('expected_duty_name')
        
        confirmed_by = user_id  # Default: self-confirm
        
        # If there's an expected duty person and it's not the opener, send confirmation request
        if expected_duty_id and expected_duty_id != user_id:
            # Send confirmation request to expected duty
            msg_to_duty = f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã\n\n"
            msg_to_duty += f"üè¢ –ö–ª—É–±: {club}\n"
            msg_to_duty += f"‚è∞ –°–º–µ–Ω–∞: {'‚òÄÔ∏è –£—Ç—Ä–æ' if shift_type == 'morning' else 'üåô –í–µ—á–µ—Ä'}\n"
            msg_to_duty += f"üìÖ –î–∞—Ç–∞: {date.today().strftime('%d.%m.%Y')}\n\n"
            msg_to_duty += f"üë§ –û—Ç–∫—Ä—ã–≤–∞–µ—Ç: {query.from_user.full_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
            if query.from_user.username:
                msg_to_duty += f" (@{query.from_user.username})"
            msg_to_duty += f"\nID: {user_id}\n\n"
            msg_to_duty += f"–í—ã –¥–µ–∂—É—Ä–Ω—ã–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é ({expected_duty_name})\n\n"
            msg_to_duty += "–≠—Ç–æ –≤—ã –Ω–∞ —Å–º–µ–Ω–µ?"
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", 
                                    callback_data=f"duty_confirm_{user_id}_{club}_{shift_type}")],
                [InlineKeyboardButton("‚ùå –ù–µ—Ç, —ç—Ç–æ –æ—à–∏–±–∫–∞", 
                                    callback_data=f"duty_reject_{user_id}_{club}_{shift_type}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            try:
                await context.bot.send_message(
                    chat_id=expected_duty_id,
                    text=msg_to_duty,
                    reply_markup=reply_markup
                )
                
                # Store pending shift info
                context.user_data['pending_shift'] = {
                    'opener_id': user_id,
                    'club': club,
                    'shift_type': shift_type,
                    'awaiting_confirmation': True
                }
                
                await query.edit_message_text(
                    f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n"
                    f"–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–µ–∂—É—Ä–Ω–æ–º—É ({expected_duty_name})\n"
                    f"–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è..."
                )
                return
                
            except Exception as e:
                logger.error(f"‚ùå Failed to send confirmation request: {e}")
                # Continue without confirmation
        
        # Open shift
        shift_id = self.shift_manager.open_shift(user_id, club, shift_type, confirmed_by)
        
        if shift_id:
            shift_label = "‚òÄÔ∏è –£—Ç—Ä–æ" if shift_type == "morning" else "üåô –í–µ—á–µ—Ä"
            await query.edit_message_text(
                f"‚úÖ –°–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞!\n\n"
                f"üè¢ –ö–ª—É–±: {club}\n"
                f"‚è∞ {shift_label}\n"
                f"üÜî ID —Å–º–µ–Ω—ã: {shift_id}\n\n"
                f"–î–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –¥–µ–Ω–µ–≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                f"üí∏ –°–ø–∏—Å–∞—Ç—å —Å –∫–∞—Å—Å—ã\n\n"
                f"–î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                f"üîí –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É"
            )
            
            # Update reply keyboard to show new buttons
            from telegram import KeyboardButton, ReplyKeyboardMarkup
            keyboard = [
                [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")],
                [KeyboardButton("üí∏ –°–ø–∏—Å–∞—Ç—å —Å –∫–∞—Å—Å—ã"), KeyboardButton("üîí –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await context.bot.send_message(
                chat_id=user_id,
                text="üîÑ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
                reply_markup=reply_markup
            )
            
            # Check if this is a replacement
            is_replacement = context.user_data.get('is_replacement', False)
            duty_info = {
                'admin_id': expected_duty_id,
                'admin_name': expected_duty_name
            } if expected_duty_id and expected_duty_name else None
            
            # Notify owner ONLY about replacements (not regular shift openings)
            if self.owner_ids and is_replacement and duty_info:
                for owner_id in self.owner_ids:
                    try:
                        notify_msg = f"üîì –û—Ç–∫—Ä—ã—Ç–∞ —Å–º–µ–Ω–∞ #{shift_id}\n\n"
                        notify_msg += f"üè¢ {club} | {shift_label}\n"
                        notify_msg += f"üë§ {query.from_user.full_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
                        if query.from_user.username:
                            notify_msg += f" (@{query.from_user.username})"
                        notify_msg += f"\nID: {user_id}"
                        notify_msg += f"\n\n‚ö†Ô∏è –ó–ê–ú–ï–ù–ê\n"
                        notify_msg += f"–ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {duty_info['admin_name']} (ID: {duty_info['admin_id']})\n\n"
                        notify_msg += "–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?"
                        
                        keyboard = [
                            [InlineKeyboardButton("‚úÖ –î–∞, –æ–±–Ω–æ–≤–∏—Ç—å", 
                                                callback_data=f"owner_schedule_yes_{shift_id}_{club}_{shift_type}_{user_id}")],
                            [InlineKeyboardButton("‚ùå –ù–µ—Ç, —Ä–∞–∑–æ–≤–∞—è –∑–∞–º–µ–Ω–∞", 
                                                callback_data=f"owner_schedule_no_{shift_id}")]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        
                        await context.bot.send_message(
                            chat_id=owner_id, 
                            text=notify_msg,
                            reply_markup=reply_markup
                        )
                    except:
                        pass
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    # ===== Close Shift Methods (Revenue Input) =====
    
    async def receive_fact_cash(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Receive cash revenue"""
        try:
            value = float(update.message.text.replace(' ', '').replace(',', '.'))
            context.user_data['shift_data']['fact_cash'] = value
            
            msg = f"‚úÖ –ù–∞–ª–∏—á–∫–∞ —Ñ–∞–∫—Ç: {value:,.0f} ‚ÇΩ\n\n"
            msg += "üí≥ –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ä—Ç—É —Ñ–∞–∫—Ç:\n\n–ü—Ä–∏–º–µ—Ä: 12345"
            
            await update.message.reply_text(msg)
            return ENTER_FACT_CARD
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return ENTER_FACT_CASH
    
    async def receive_fact_card(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Receive card revenue"""
        try:
            value = float(update.message.text.replace(' ', '').replace(',', '.'))
            context.user_data['shift_data']['fact_card'] = value
            
            msg = f"‚úÖ –ö–∞—Ä—Ç–∞ —Ñ–∞–∫—Ç: {value:,.0f} ‚ÇΩ\n\n"
            msg += "üì± –í–≤–µ–¥–∏—Ç–µ QR:\n\n–ü—Ä–∏–º–µ—Ä: 500 (–∏–ª–∏ 0 –µ—Å–ª–∏ –Ω–µ—Ç)"
            
            await update.message.reply_text(msg)
            return ENTER_QR
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return ENTER_FACT_CARD
    
    async def receive_qr(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Receive QR revenue"""
        try:
            value = float(update.message.text.replace(' ', '').replace(',', '.'))
            context.user_data['shift_data']['qr'] = value
            
            msg = f"‚úÖ QR: {value:,.0f} ‚ÇΩ\n\n"
            msg += "üì¶ –í–≤–µ–¥–∏—Ç–µ –ö–æ—Ä–æ–±–∫—É:\n\n–ü—Ä–∏–º–µ—Ä: 1000 (–∏–ª–∏ 0 –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)"
            
            await update.message.reply_text(msg)
            return ENTER_CARD2
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return ENTER_QR
    
    async def receive_card2(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Receive card2 (box) revenue"""
        try:
            value = float(update.message.text.replace(' ', '').replace(',', '.'))
            context.user_data['shift_data']['card2'] = value
            
            # Go directly to safe input
            return await self._continue_to_safe(update.message, context)
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return ENTER_CARD2
    
    # ===== Safe and Box Input =====
    
    async def _continue_to_safe(self, message_or_query, context: ContextTypes.DEFAULT_TYPE):
        """Continue to safe input"""
        prev_official = context.user_data.get('prev_official', 0)
        
        msg = f"‚úÖ –í—ã—Ä—É—á–∫–∞ –≤–≤–µ–¥–µ–Ω–∞\n\n"
        msg += "üîê –í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ –≤ —Å–µ–π—Ñ–µ (–æ—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Å—Å–∞):\n\n"
        msg += f"–ü—Ä–∏–º–µ—Ä: 5000\n"
        msg += f"–ü—Ä–æ—à–ª—ã–π —Ä–∞–∑ –±—ã–ª–æ: {prev_official:,.0f} ‚ÇΩ"
        
        keyboard = [
            [InlineKeyboardButton("üì¶ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π", callback_data="safe_no_change")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="shift_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if hasattr(message_or_query, 'reply_text'):
            await message_or_query.reply_text(msg, reply_markup=reply_markup)
        else:
            await message_or_query.edit_message_text(msg, reply_markup=reply_markup)
        
        return ENTER_SAFE
    
    async def handle_safe_no_change(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle 'no change' button for safe"""
        query = update.callback_query
        await query.answer()
        
        # Use previous balance
        prev_official = context.user_data.get('prev_official', 0)
        context.user_data['shift_data']['safe_cash_end'] = prev_official
        
        return await self._continue_to_box(query, context)
    
    async def receive_safe(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Receive safe balance"""
        try:
            value = float(update.message.text.replace(' ', '').replace(',', '.'))
            context.user_data['shift_data']['safe_cash_end'] = value
            
            return await self._continue_to_box(update.message, context)
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return ENTER_SAFE
    
    async def _continue_to_box(self, message_or_query, context: ContextTypes.DEFAULT_TYPE):
        """Continue to box input"""
        prev_box = context.user_data.get('prev_box', 0)
        safe_value = context.user_data['shift_data']['safe_cash_end']
        
        msg = f"‚úÖ –°–µ–π—Ñ: {safe_value:,.0f} ‚ÇΩ\n\n"
        msg += "üì¶ –í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ –≤ –∫–æ—Ä–æ–±–∫–µ:\n\n"
        msg += f"–ü—Ä–∏–º–µ—Ä: 2000\n"
        msg += f"–ü—Ä–æ—à–ª—ã–π —Ä–∞–∑ –±—ã–ª–æ: {prev_box:,.0f} ‚ÇΩ"
        
        keyboard = [
            [InlineKeyboardButton("üì¶ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π", callback_data="box_no_change")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="shift_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if hasattr(message_or_query, 'reply_text'):
            await message_or_query.reply_text(msg, reply_markup=reply_markup)
        else:
            await message_or_query.edit_message_text(msg, reply_markup=reply_markup)
        
        return ENTER_BOX
    
    async def handle_box_no_change(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle 'no change' button for box"""
        query = update.callback_query
        await query.answer()
        
        # Use previous balance
        prev_box = context.user_data.get('prev_box', 0)
        context.user_data['shift_data']['box_cash_end'] = prev_box
        
        # Move to summary
        return await self._show_summary(query, context)
    
    async def receive_box(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Receive box balance"""
        try:
            value = float(update.message.text.replace(' ', '').replace(',', '.'))
            context.user_data['shift_data']['box_cash_end'] = value
            
            # Move to summary
            return await self._show_summary(update.message, context)
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return ENTER_BOX
    
    async def _show_summary(self, message_or_query, context: ContextTypes.DEFAULT_TYPE):
        """Show summary with previous balances, deltas and expenses"""
        club = context.user_data['shift_club']
        shift_time = context.user_data['shift_time']
        shift_label = "‚òÄÔ∏è –£—Ç—Ä–æ (–¥–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞)" if shift_time == "morning" else "üåô –í–µ—á–µ—Ä (–Ω–æ—á–Ω–∞—è —Å–º–µ–Ω–∞)"
        data = context.user_data['shift_data']
        expenses = context.user_data.get('expenses', [])
        
        prev_official = context.user_data.get('prev_official', 0)
        prev_box = context.user_data.get('prev_box', 0)
        
        new_official = data['safe_cash_end']
        new_box = data['box_cash_end']
        
        delta_official = new_official - prev_official
        delta_box = new_box - prev_box
        
        # Calculate total expenses
        total_expenses = sum(exp['amount'] for exp in expenses)
        
        msg = "üìä –°–≤–æ–¥–∫–∞ —Å–º–µ–Ω—ã\n\n"
        msg += f"üè¢ –ö–ª—É–±: {club}\n"
        msg += f"‚è∞ –í—Ä–µ–º—è: {shift_label}\n\n"
        
        msg += "üí∞ –í—ã—Ä—É—á–∫–∞:\n"
        msg += f"  ‚Ä¢ –ù–∞–ª–∏—á–∫–∞ —Ñ–∞–∫—Ç: {data['fact_cash']:,.0f} ‚ÇΩ\n"
        msg += f"  ‚Ä¢ –ö–∞—Ä—Ç–∞ —Ñ–∞–∫—Ç: {data['fact_card']:,.0f} ‚ÇΩ\n"
        msg += f"  ‚Ä¢ QR: {data['qr']:,.0f} ‚ÇΩ\n"
        msg += f"  ‚Ä¢ –ö–æ—Ä–æ–±–∫–∞: {data['card2']:,.0f} ‚ÇΩ\n"
        
        if expenses:
            msg += f"\nüí∏ –†–∞—Å—Ö–æ–¥—ã (—Å–ø–∏—Å–∞–Ω–æ):\n"
            for exp in expenses:
                msg += f"  ‚Ä¢ {exp['amount']:,.0f} ‚ÇΩ - {exp['reason']}\n"
            msg += f"  –ò–¢–û–ì–û: {total_expenses:,.0f} ‚ÇΩ\n"
        
        msg += "\nüîê –û—Å—Ç–∞—Ç–∫–∏:\n"
        msg += f"  ‚Ä¢ –°–µ–π—Ñ (–æ—Ñ–∏—Ü): {new_official:,.0f} ‚ÇΩ\n"
        msg += f"  ‚Ä¢ –ö–æ—Ä–æ–±–∫–∞: {new_box:,.0f} ‚ÇΩ\n\n"
        
        msg += "üìà –ü—Ä–æ—à–ª—ã–π —Ä–∞–∑:\n"
        msg += f"  ‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è: {prev_official:,.0f} ‚ÇΩ\n"
        msg += f"  ‚Ä¢ –ö–æ—Ä–æ–±–∫–∞: {prev_box:,.0f} ‚ÇΩ\n\n"
        
        msg += "üìä –î–≤–∏–∂–µ–Ω–∏–µ:\n"
        msg += f"  ‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è: {delta_official:+,.0f} ‚ÇΩ\n"
        msg += f"  ‚Ä¢ –ö–æ—Ä–æ–±–∫–∞: {delta_box:+,.0f} ‚ÇΩ\n"
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="shift_confirm")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="shift_edit")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="shift_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if hasattr(message_or_query, 'reply_text'):
            await message_or_query.reply_text(msg, reply_markup=reply_markup)
        else:
            await message_or_query.edit_message_text(msg, reply_markup=reply_markup)
        
        return CONFIRM_SHIFT
    
    async def confirm_shift(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Confirm and save shift"""
        query = update.callback_query
        await query.answer()
        
        data = context.user_data.get('shift_data')
        club = context.user_data.get('shift_club')
        shift_time = context.user_data.get('shift_time')
        expenses = context.user_data.get('expenses', [])
        
        # Add club and expenses to data
        data['club'] = club
        data['expenses'] = expenses
        
        # Get shift date
        shift_window = context.user_data.get('shift_window')
        if shift_window:
            shift_date = shift_window['shift_date']
        else:
            shift_date = date.today()
        
        # Get duty name from schedule
        duty_name = ""
        if self.schedule:
            duty_name = self.schedule.get_duty_name(club, shift_date, shift_time) or ""
        
        admin_id = update.effective_user.id
        admin_username = update.effective_user.username or ""
        
        # Get identity confirmation data
        identity_confirmed = context.user_data.get('identity_confirmed', False)
        confirmation_timestamp = context.user_data.get('confirmation_timestamp', '')
        
        # Submit shift with expenses and confirmation
        success = self.finmon.submit_shift(
            data,
            admin_id,
            admin_username,
            shift_date,
            shift_time,
            duty_name,
            identity_confirmed=identity_confirmed,
            confirmation_timestamp=confirmation_timestamp
        )
        
        if success:
            # Close shift in database
            shift_id = context.user_data.get('active_shift_id')
            if shift_id and self.shift_manager:
                self.shift_manager.close_shift(shift_id)
            
            # Get updated balances
            balances = self.finmon.get_club_balances(club)
            
            # Get shift expenses from DB
            shift_expenses = []
            if shift_id and self.shift_manager:
                shift_expenses = self.shift_manager.get_shift_expenses(shift_id)
            
            total_expenses = sum(exp['amount'] for exp in shift_expenses)
            
            msg = "‚úÖ –°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–Ω–∞!\n\n"
            msg += f"üè¢ {club}\n"
            if shift_expenses:
                msg += f"üí∏ –°–ø–∏—Å–∞–Ω–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_expenses:,.0f} ‚ÇΩ\n"
            msg += f"üí∞ –û—Å—Ç–∞—Ç–∫–∏:\n"
            msg += f"  ‚Ä¢ –û—Ñ–∏—Ü (—Å–µ–π—Ñ): {balances['official']:,.0f} ‚ÇΩ\n"
            msg += f"  ‚Ä¢ –ö–æ—Ä–æ–±–∫–∞: {balances['box']:,.0f} ‚ÇΩ\n"
            
            await query.edit_message_text(msg)
            
            # Update reply keyboard to show open shift button
            from telegram import KeyboardButton, ReplyKeyboardMarkup
            keyboard = [
                [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")],
                [KeyboardButton("üîì –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await context.bot.send_message(
                chat_id=admin_id,
                text="üîÑ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–º–µ–Ω—ã")
        
        # Clear context
        context.user_data.clear()
        
        return ConversationHandler.END
    
    async def edit_shift(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Edit shift - restart from beginning"""
        query = update.callback_query
        await query.answer()
        
        club = context.user_data.get('shift_club')
        shift_time = context.user_data.get('shift_time')
        shift_label = "‚òÄÔ∏è –£—Ç—Ä–æ (–¥–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞)" if shift_time == "morning" else "üåô –í–µ—á–µ—Ä (–Ω–æ—á–Ω–∞—è —Å–º–µ–Ω–∞)"
        
        # Clear shift data but keep club and shift_time
        context.user_data['shift_data'] = {
            'fact_cash': 0.0,
            'fact_card': 0.0,
            'qr': 0.0,
            'card2': 0.0,
            'safe_cash_end': 0.0,
            'box_cash_end': 0.0,
            'tovarka': 0.0,
            'gamepads': 0,
            'repair': 0,
            'need_repair': 0,
            'games': 0
        }
        
        msg = f"üìã –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã\n\n"
        msg += f"üè¢ –ö–ª—É–±: {club}\n"
        msg += f"‚è∞ {shift_label}\n\n"
        msg += "üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–ª–∏—á–∫—É —Ñ–∞–∫—Ç:\n\n–ü—Ä–∏–º–µ—Ä: 3440"
        
        await query.edit_message_text(msg)
        return ENTER_FACT_CASH
    
    async def cancel_shift(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Cancel shift submission"""
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text("‚ùå –°–¥–∞—á–∞ —Å–º–µ–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
        # Clear context
        context.user_data.clear()
        
        return ConversationHandler.END
    
    async def cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Cancel via /cancel command"""
        await update.message.reply_text("‚ùå –°–¥–∞—á–∞ —Å–º–µ–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–∞")
        context.user_data.clear()
        return ConversationHandler.END
    
    # ===== Expense Tracking (During Active Shift) =====
    
    async def cmd_expense(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start expense tracking conversation"""
        user_id = update.effective_user.id
        
        # Check if shift manager is available
        if not self.shift_manager:
            await update.message.reply_text("‚ùå –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return ConversationHandler.END
        
        # Check for active shift
        active_shift = self.shift_manager.get_active_shift(user_id)
        
        if not active_shift:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–º–µ–Ω—ã\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–º–µ–Ω—É —á–µ—Ä–µ–∑:\n"
                "üîì –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É"
            )
            return ConversationHandler.END
        
        # Store shift ID for this conversation
        context.user_data['expense_shift_id'] = active_shift['id']
        context.user_data['expense_club'] = active_shift['club']
        
        # Ask to select cash source
        shift_label = "‚òÄÔ∏è –£—Ç—Ä–æ" if active_shift['shift_type'] == 'morning' else "üåô –í–µ—á–µ—Ä"
        
        msg = f"üí∏ –°–ø–∏—Å–∞–Ω–∏–µ —Å –∫–∞—Å—Å—ã\n\n"
        msg += f"üè¢ –ö–ª—É–±: {active_shift['club']}\n"
        msg += f"‚è∞ –°–º–µ–Ω–∞: {shift_label}\n\n"
        msg += "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∫—É–¥–∞ —Å–ø–∏—Å–∞—Ç—å –¥–µ–Ω—å–≥–∏:"
        
        keyboard = [
            [InlineKeyboardButton("üí∞ –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Å—Å–∞", callback_data="expense_main")],
            [InlineKeyboardButton("üì¶ –ö–æ—Ä–æ–±–∫–∞", callback_data="expense_box")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="expense_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(msg, reply_markup=reply_markup)
        return EXPENSE_SELECT_CASH_SOURCE
    
    async def expense_select_cash_source(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle cash source selection"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "expense_cancel":
            await query.edit_message_text("‚ùå –°–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            context.user_data.pop('expense_shift_id', None)
            context.user_data.pop('expense_club', None)
            return ConversationHandler.END
        
        if query.data == "expense_main":
            cash_source = "main"
            source_label = "üí∞ –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Å—Å–∞"
        elif query.data == "expense_box":
            cash_source = "box"
            source_label = "üì¶ –ö–æ—Ä–æ–±–∫–∞"
        else:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            return ConversationHandler.END
        
        context.user_data['expense_cash_source'] = cash_source
        context.user_data['expense_source_label'] = source_label
        
        msg = f"üí∏ –°–ø–∏—Å–∞–Ω–∏–µ —Å –∫–∞—Å—Å—ã\n\n"
        msg += f"–ö–∞—Å—Å–∞: {source_label}\n\n"
        msg += "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–ø–∏—Å–∞–Ω–∏—è:\n\n"
        msg += "–ü—Ä–∏–º–µ—Ä: 1500"
        
        await query.edit_message_text(msg)
        return EXPENSE_ENTER_AMOUNT
    
    async def expense_receive_amount(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Receive expense amount"""
        try:
            amount = float(update.message.text.replace(' ', '').replace(',', '.'))
            
            if amount <= 0:
                await update.message.reply_text(
                    "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ:"
                )
                return EXPENSE_ENTER_AMOUNT
            
            context.user_data['expense_amount'] = amount
            
            msg = f"‚úÖ –°—É–º–º–∞: {amount:,.0f} ‚ÇΩ\n\n"
            msg += "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Å–ø–∏—Å–∞–Ω–∏—è:\n\n"
            msg += "–ü—Ä–∏–º–µ—Ä—ã:\n"
            msg += "‚Ä¢ –í—ã–¥–∞–Ω–æ –∏–≥—Ä–æ–∫—É\n"
            msg += "‚Ä¢ –û–ø–ª–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É\n"
            msg += "‚Ä¢ –°–¥–∞—á–∞ –∫–ª–∏–µ–Ω—Ç—É\n"
            msg += "‚Ä¢ –†–∞—Å—Ö–æ–¥—ã –Ω–∞ –∑–∞–∫—É–ø–∫—É"
            
            await update.message.reply_text(msg)
            return EXPENSE_ENTER_REASON
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:"
            )
            return EXPENSE_ENTER_AMOUNT
    
    async def expense_receive_reason(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Receive expense reason"""
        reason = update.message.text.strip()
        
        if not reason or len(reason) > 200:
            await update.message.reply_text(
                "‚ùå –ü—Ä–∏—á–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return EXPENSE_ENTER_REASON
        
        context.user_data['expense_reason'] = reason
        
        # Show confirmation
        amount = context.user_data['expense_amount']
        source_label = context.user_data['expense_source_label']
        club = context.user_data['expense_club']
        
        msg = f"üí∏ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è\n\n"
        msg += f"üè¢ –ö–ª—É–±: {club}\n"
        msg += f"–ö–∞—Å—Å–∞: {source_label}\n"
        msg += f"üí∞ –°—É–º–º–∞: {amount:,.0f} ‚ÇΩ\n"
        msg += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
        msg += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–ø–∏—Å–∞–Ω–∏–µ:"
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="expense_confirm")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="expense_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(msg, reply_markup=reply_markup)
        return EXPENSE_CONFIRM
    
    async def expense_confirm(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Confirm and save expense"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "expense_cancel":
            await query.edit_message_text("‚ùå –°–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            # Clear expense data
            for key in list(context.user_data.keys()):
                if key.startswith('expense_'):
                    context.user_data.pop(key)
            return ConversationHandler.END
        
        # Get expense data
        shift_id = context.user_data.get('expense_shift_id')
        cash_source = context.user_data.get('expense_cash_source')
        amount = context.user_data.get('expense_amount')
        reason = context.user_data.get('expense_reason')
        source_label = context.user_data.get('expense_source_label')
        
        # Save to database
        success = self.shift_manager.add_expense(shift_id, cash_source, amount, reason)
        
        if success:
            await query.edit_message_text(
                f"‚úÖ –°–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
                f"–ö–∞—Å—Å–∞: {source_label}\n"
                f"üí∞ –°—É–º–º–∞: {amount:,.0f} ‚ÇΩ\n"
                f"üìù {reason}"
            )
            
            # Notify owner
            if self.owner_ids:
                for owner_id in self.owner_ids:
                    try:
                        club = context.user_data.get('expense_club')
                        user = query.from_user
                        notify_msg = f"üí∏ –°–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–º–µ–Ω–µ #{shift_id}\n\n"
                        notify_msg += f"üè¢ {club} | {source_label}\n"
                        notify_msg += f"üí∞ {amount:,.0f} ‚ÇΩ\n"
                        notify_msg += f"üìù {reason}\n\n"
                        notify_msg += f"üë§ {user.full_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
                        if user.username:
                            notify_msg += f" (@{user.username})"
                        
                        await context.bot.send_message(chat_id=owner_id, text=notify_msg)
                    except:
                        pass
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        # Clear expense data
        for key in list(context.user_data.keys()):
            if key.startswith('expense_'):
                context.user_data.pop(key)
        
        return ConversationHandler.END
    
    async def cmd_balances(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show current balances"""
        text = self.finmon.format_balances()
        await update.message.reply_text(text)
    
    async def cmd_movements(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show recent movements"""
        chat_id = update.effective_chat.id
        club = self.finmon.get_club_from_chat(chat_id)
        
        if not club:
            # Show all clubs
            text = ""
            for club_name in ["–†–∏–æ", "–°–µ–≤–µ—Ä"]:
                text += self.finmon.format_movements(club_name, limit=5)
                text += "\n"
        else:
            text = self.finmon.format_movements(club, limit=10)
        
        await update.message.reply_text(text)
    
    async def cmd_shift_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show shift menu in club chats"""
        chat_id = update.effective_chat.id
        club = self.finmon.get_club_from_chat(chat_id)
        
        if not club:
            await update.message.reply_text(
                "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö –∫–ª—É–±–æ–≤.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /shift –¥–ª—è —Å–¥–∞—á–∏ —Å–º–µ–Ω—ã."
            )
            return
        
        msg = f"üìã –ú–µ–Ω—é —Å–º–µ–Ω—ã - {club}\n\n"
        msg += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        msg += "‚Ä¢ /shift - –°–¥–∞—Ç—å —Å–º–µ–Ω—É\n"
        msg += "‚Ä¢ /balances - –¢–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏\n"
        msg += "‚Ä¢ /movements - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è\n"
        
        keyboard = [
            [InlineKeyboardButton("üìã –°–¥–∞—Ç—å —Å–º–µ–Ω—É", callback_data="menu_shift")],
            [InlineKeyboardButton("üí∞ –û—Å—Ç–∞—Ç–∫–∏", callback_data="menu_balances")],
            [InlineKeyboardButton("üìä –î–≤–∏–∂–µ–Ω–∏—è", callback_data="menu_movements")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(msg, reply_markup=reply_markup)
    
    async def handle_menu_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle menu button callbacks"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "menu_shift":
            # Start shift wizard
            await query.message.delete()
            # Create a fake update for cmd_shift
            fake_update = update
            fake_update.message = query.message
            return await self.cmd_shift(fake_update, context)
        elif query.data == "menu_balances":
            text = self.finmon.format_balances()
            await query.edit_message_text(text)
        elif query.data == "menu_movements":
            chat_id = query.message.chat.id
            club = self.finmon.get_club_from_chat(chat_id)
            if club:
                text = self.finmon.format_movements(club, limit=10)
            else:
                text = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª—É–±"
            await query.edit_message_text(text)
    
    # ===== Financial Monitoring Analytics =====
    
    async def cmd_finmon(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show financial monitoring menu"""
        # Owner only
        if not self.is_owner(update.effective_user.id):
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É")
            return
        
        if not ANALYTICS_AVAILABLE:
            await update.message.reply_text("‚ùå –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        text = """üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç:"""
        
        keyboard = [
            [InlineKeyboardButton("üìä –í—ã—Ä—É—á–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥", callback_data="finmon_revenue")],
            [InlineKeyboardButton("üè¢ –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –∫–ª—É–±–∞–º", callback_data="finmon_clubs")],
            [InlineKeyboardButton("üë• –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤", callback_data="finmon_admins")],
            [InlineKeyboardButton("‚ö†Ô∏è –í—ã—è–≤–ª–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π", callback_data="finmon_anomalies")],
            [InlineKeyboardButton("üìà –ò—Å—Ç–æ—Ä–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤", callback_data="finmon_history")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            await update.message.reply_text(text, reply_markup=reply_markup)
        else:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def handle_finmon_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle finmon analytics callbacks"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_owner(query.from_user.id):
            await query.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞", show_alert=True)
            return
        
        if not ANALYTICS_AVAILABLE:
            await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        analytics = FinMonAnalytics()
        
        # Revenue summary
        if query.data == "finmon_revenue":
            keyboard = [
                [
                    InlineKeyboardButton("–î–µ–Ω—å", callback_data="finmon_rev_day"),
                    InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data="finmon_rev_week"),
                    InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data="finmon_rev_month")
                ],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="finmon_menu")]
            ]
            await query.edit_message_text(
                "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        elif query.data.startswith("finmon_rev_"):
            period = query.data.split('_')[-1]  # day, week, month
            summary = analytics.get_revenue_summary(period)
            text = analytics.format_revenue_summary(summary)
            
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="finmon_revenue")]]
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        
        # Club breakdown
        elif query.data == "finmon_clubs":
            keyboard = [
                [
                    InlineKeyboardButton("–î–µ–Ω—å", callback_data="finmon_club_day"),
                    InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data="finmon_club_week"),
                    InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data="finmon_club_month")
                ],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="finmon_menu")]
            ]
            await query.edit_message_text(
                "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        elif query.data.startswith("finmon_club_"):
            period = query.data.split('_')[-1]
            breakdown = analytics.get_club_breakdown(period)
            text = analytics.format_club_breakdown(breakdown, period)
            
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="finmon_clubs")]]
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        
        # Admin comparison
        elif query.data == "finmon_admins":
            keyboard = [
                [InlineKeyboardButton("–í—Å–µ –∫–ª—É–±—ã", callback_data="finmon_adm_all")],
                [InlineKeyboardButton("üè¢ –†–∏–æ", callback_data="finmon_adm_rio")],
                [InlineKeyboardButton("üè¢ –°–µ–≤–µ—Ä", callback_data="finmon_adm_sever")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="finmon_menu")]
            ]
            await query.edit_message_text(
                "üë• –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        elif query.data.startswith("finmon_adm_"):
            club_code = query.data.split('_')[-1]
            club = None if club_code == 'all' else ('–†–∏–æ' if club_code == 'rio' else '–°–µ–≤–µ—Ä')
            
            admins = analytics.get_admin_comparison('month', club, weekday=4)  # Friday
            text = analytics.format_admin_comparison(admins, club, "–ü—è—Ç–Ω–∏—Ü—ã")
            
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="finmon_admins")]]
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        
        # Anomalies detection
        elif query.data == "finmon_anomalies":
            anomalies = analytics.detect_anomalies('month', threshold=0.15, min_shifts=3)
            text = analytics.format_anomalies(anomalies)
            
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="finmon_menu")]]
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        
        # Balance history
        elif query.data == "finmon_history":
            keyboard = [
                [InlineKeyboardButton("–í—Å–µ –∫–ª—É–±—ã", callback_data="finmon_hist_all")],
                [InlineKeyboardButton("üè¢ –†–∏–æ", callback_data="finmon_hist_rio")],
                [InlineKeyboardButton("üè¢ –°–µ–≤–µ—Ä", callback_data="finmon_hist_sever")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="finmon_menu")]
            ]
            await query.edit_message_text(
                "üìà –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        elif query.data.startswith("finmon_hist_"):
            club_code = query.data.split('_')[-1]
            club = None if club_code == 'all' else ('–†–∏–æ' if club_code == 'rio' else '–°–µ–≤–µ—Ä')
            
            history = analytics.get_balance_history(30, club)
            text = analytics.format_balance_history(history, club)
            
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="finmon_history")]]
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        
        # Back to main menu
        elif query.data == "finmon_menu":
            await self.cmd_finmon(update, context)
    
    # ===== Schedule Integration Handlers =====
    
    async def handle_duty_replacement_response(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle response from scheduled duty person about replacement"""
        query = update.callback_query
        await query.answer()
        
        # Parse callback data: duty_confirm/duty_reject_opener_id_club_shift_type
        parts = query.data.split('_')
        if len(parts) < 5:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        action = parts[1]  # confirm or reject
        opener_id = int(parts[2])
        club = parts[3]
        shift_type = parts[4]
        
        shift_label = "‚òÄÔ∏è –£—Ç—Ä–æ" if shift_type == "morning" else "üåô –í–µ—á–µ—Ä"
        
        if action == "confirm":
            # Duty person confirms the replacement is okay
            await query.edit_message_text(
                f"‚úÖ –ó–∞–º–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n\n"
                f"üè¢ {club} | {shift_label}\n"
                f"–°–º–µ–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∞"
            )
            
            # Notify the opener
            try:
                await context.bot.send_message(
                    chat_id=opener_id,
                    text=f"‚úÖ –î–µ–∂—É—Ä–Ω—ã–π –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–º–µ–Ω—É\n\n–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É"
                )
            except:
                pass
            
        elif action == "reject":
            # Duty person says it's an error
            await query.edit_message_text(
                f"‚ùå –ó–∞–º–µ–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\n"
                f"–í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ —ç—Ç–æ –∫–∞–∫ –æ—à–∏–±–∫—É"
            )
            
            # Notify the opener
            try:
                await context.bot.send_message(
                    chat_id=opener_id,
                    text=f"‚ö†Ô∏è –î–µ–∂—É—Ä–Ω—ã–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–º–µ–Ω—É\n\n"
                    f"–í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n"
                    f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
                )
            except:
                pass
            
            # Notify owner
            if self.owner_ids:
                for owner_id in self.owner_ids:
                    try:
                        await context.bot.send_message(
                            chat_id=owner_id,
                            text=f"‚ö†Ô∏è –û–¢–ö–õ–û–ù–ï–ù–ê –ó–ê–ú–ï–ù–ê\n\n"
                            f"üè¢ {club} | {shift_label}\n"
                            f"–î–µ–∂—É—Ä–Ω—ã–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –æ—Ç–∫–ª–æ–Ω–∏–ª –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {opener_id}\n\n"
                            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é!"
                        )
                    except:
                        pass
    
    async def handle_owner_schedule_update(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle owner's decision to update schedule after replacement"""
        query = update.callback_query
        await query.answer()
        
        # Parse callback data
        if query.data.startswith("owner_schedule_yes_"):
            # owner_schedule_yes_shift_id_club_shift_type_user_id
            parts = query.data.split('_')
            if len(parts) < 7:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            shift_id = int(parts[3])
            club = parts[4]
            shift_type = parts[5]
            new_admin_id = int(parts[6])
            
            # Get admin info
            admin_name = query.message.text.split("üë§ ")[1].split("\n")[0] if "üë§ " in query.message.text else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # Update schedule
            if self.shift_manager:
                success = self.shift_manager.update_duty_schedule(
                    duty_date=date.today(),
                    club=club,
                    shift_type=shift_type,
                    admin_id=new_admin_id,
                    admin_name=admin_name
                )
                
                if success:
                    await query.edit_message_text(
                        query.message.text + "\n\n‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"
                    )
                else:
                    await query.edit_message_text(
                        query.message.text + "\n\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
                    )
            else:
                await query.edit_message_text(
                    query.message.text + "\n\n‚ùå –ú–æ–¥—É–ª—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                )
        
        elif query.data.startswith("owner_schedule_no_"):
            # owner_schedule_no_shift_id
            await query.edit_message_text(
                query.message.text + "\n\n‚úÖ –†–∞–∑–æ–≤–∞—è –∑–∞–º–µ–Ω–∞ (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ)"
            )