"""
–ú–æ–¥—É–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏

–§—É–Ω–∫—Ü–∏–∏:
- –ü–æ–ª–Ω—ã–π –æ–±–∑–æ—Ä –¥–≤–∏–∂–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ (–∫–∞—Å—Å—ã, –≤—ã–ø–ª–∞—Ç—ã, —Ä–∞—Å—Ö–æ–¥—ã)
- –†–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç —Å —É—á–µ—Ç–æ–º –≤—ã–ø–ª–∞—Ç –∏–∑ –∫–∞—Å—Å—ã
- –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
- –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –≤—ã—Ä—É—á–∫–∏ –∏ —Å–º–µ–Ω
- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–≥—Ä–∞—Ñ–∏–∫–∏, —Ç–∞–±–ª–∏—Ü—ã)
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets (—Å—Ç–æ–ª–±—Ü—ã AL, AM, AN –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç)
"""

import sqlite3
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional
from collections import defaultdict
import json

logger = logging.getLogger(__name__)


class FinanceAnalytics:
    """–ú–æ–¥—É–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""

    def __init__(self, db_path: str = "club_assistant.db", sheets_parser=None):
        self.db_path = db_path
        self.sheets_parser = sheets_parser
        logger.info("‚úÖ FinanceAnalytics –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _get_db(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        return sqlite3.connect(self.db_path)

    # =====================================================
    # –û–°–ù–û–í–ù–´–ï –î–ê–ù–ù–´–ï
    # =====================================================

    def get_cash_movements(
        self,
        start_date: Optional[str] = None,
        end_date: Optional[str] = None,
        club: Optional[str] = None,
        admin_id: Optional[int] = None
    ) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–≤–∏–∂–µ–Ω–∏—è –¥–µ–Ω–µ–≥ –∑–∞ –ø–µ—Ä–∏–æ–¥

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - –í—ã—Ä—É—á–∫–∞ –ø–æ —Å–º–µ–Ω–∞–º
        - –†–∞—Å—Ö–æ–¥—ã –∏–∑ –∫–∞—Å—Å
        - –í—ã–ø–ª–∞—Ç—ã –∑–∞—Ä–ø–ª–∞—Ç
        - –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ –Ω–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü
        """
        conn = sqlite3.connect(self.db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()

        movements = []

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        where_clauses = []
        params = []

        if start_date:
            where_clauses.append("DATE(opened_at) >= ?")
            params.append(start_date)

        if end_date:
            where_clauses.append("DATE(opened_at) <= ?")
            params.append(end_date)

        if club:
            where_clauses.append("club = ?")
            params.append(club)

        if admin_id:
            where_clauses.append("admin_id = ?")
            params.append(admin_id)

        where_sql = " AND ".join(where_clauses) if where_clauses else "1=1"

        # 1. –ü–æ–ª—É—á–∏—Ç—å —Å–º–µ–Ω—ã –∏ –≤—ã—Ä—É—á–∫—É
        query = f"""
        SELECT
            id as shift_id,
            admin_id,
            club,
            shift_type,
            opened_at,
            closed_at,
            status
        FROM active_shifts
        WHERE {where_sql}
        ORDER BY opened_at DESC
        """

        cursor.execute(query, params)
        shifts = cursor.fetchall()

        for shift in shifts:
            # –î–ª—è –∫–∞–∂–¥–æ–π —Å–º–µ–Ω—ã –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            shift_data = dict(shift)

            # –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∏–∑ –∫–∞—Å—Å –∑–∞ —Å–º–µ–Ω—É
            cursor.execute("""
                SELECT
                    SUM(amount) as total_expenses,
                    cash_register
                FROM shift_expenses
                WHERE shift_id = ?
                GROUP BY cash_register
            """, (shift['shift_id'],))

            expenses = cursor.fetchall()
            shift_data['expenses'] = [dict(e) for e in expenses]

            # –ü–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—ã –∑–∞—Ä–ø–ª–∞—Ç –∑–∞ —Å–º–µ–Ω—É
            cursor.execute("""
                SELECT
                    SUM(amount) as total_withdrawals
                FROM shift_cash_withdrawals
                WHERE shift_id = ?
            """, (shift['shift_id'],))

            withdrawal = cursor.fetchone()
            shift_data['cash_withdrawals'] = withdrawal['total_withdrawals'] if withdrawal else 0

            movements.append(shift_data)

        conn.close()

        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(movements)} –¥–≤–∏–∂–µ–Ω–∏–π —Å—Ä–µ–¥—Å—Ç–≤")
        return movements

    def get_admin_salaries_from_sheets(self) -> Dict[int, Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ Google Sheets

        –ß–∏—Ç–∞–µ—Ç —Å—Ç–æ–ª–±—Ü—ã AL, AM, AN:
        - AL (–∫–æ–ª–æ–Ω–∫–∞ 38): –û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã
        - AM (–∫–æ–ª–æ–Ω–∫–∞ 39): –°—É–º–º–∞
        - AN (–∫–æ–ª–æ–Ω–∫–∞ 40): –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        {
            admin_id: {
                'name': '–ò–º—è',
                'salary_items': [
                    {'description': '...', 'amount': 1000, 'note': '...'},
                    ...
                ],
                'total': 5000
            }
        }
        """
        if not self.sheets_parser:
            logger.warning("‚ö†Ô∏è Google Sheets parser –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return {}

        try:
            logger.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç –∏–∑ Google Sheets...")

            # –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç Sheets
            client = self.sheets_parser._get_sheet_client()
            spreadsheet = self.sheets_parser._get_spreadsheet()

            # –û—Ç–∫—Ä—ã—Ç—å –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç (–æ–±—ã—á–Ω–æ —ç—Ç–æ –ª–∏—Å—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏)
            worksheet = spreadsheet.get_worksheet(0)

            # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç–æ–ª–±—Ü–æ–≤ AL:AN (38:40)
            # –§–æ—Ä–º–∞—Ç: AL1:AN100 (–±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 100 —Å—Ç—Ä–æ–∫)
            salary_data = worksheet.get('AL1:AN100')

            if not salary_data:
                logger.info("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ")
                return {}

            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
            salaries = {}

            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
            # –î–∞–ª–µ–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞: [–ò–º—è/–û–ø–∏—Å–∞–Ω–∏–µ, –°—É–º–º–∞, –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ]
            for row_idx, row in enumerate(salary_data[1:], start=2):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if len(row) < 2:  # –ú–∏–Ω–∏–º—É–º –Ω—É–∂–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å—É–º–º–∞
                    continue

                description = row[0].strip() if len(row) > 0 else ""
                amount_str = row[1].strip() if len(row) > 1 else "0"
                note = row[2].strip() if len(row) > 2 else ""

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if not description and not amount_str:
                    continue

                # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
                try:
                    # –£–±–∏—Ä–∞–µ–º –≤—Å—ë –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, —Ç–æ—á–∫–∏ –∏ –º–∏–Ω—É—Å–∞
                    amount_str = amount_str.replace(',', '.').replace(' ', '').replace('‚ÇΩ', '')
                    amount = float(amount_str) if amount_str else 0
                except (ValueError, AttributeError):
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—É–º–º—É: {amount_str} –≤ —Å—Ç—Ä–æ–∫–µ {row_idx}")
                    amount = 0

                # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á—å –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                # –§–æ—Ä–º–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å: "–ò–≤–∞–Ω–æ–≤ –ò.–ò. - —Å–º–µ–Ω—ã" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "–°–º–µ–Ω—ã"
                admin_name = self._extract_admin_name(description)

                if not admin_name:
                    logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –±–µ–∑ –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∞: {description}")
                    continue

                # –ü–æ–ª—É—á–∏—Ç—å admin_id –ø–æ –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å AdminDB)
                admin_id = self._get_admin_id_by_name(admin_name)

                if not admin_id:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∫–∞–∫ –∫–ª—é—á
                    admin_id = f"unknown_{admin_name}"

                # –î–æ–±–∞–≤–∏—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if admin_id not in salaries:
                    salaries[admin_id] = {
                        'name': admin_name,
                        'salary_items': [],
                        'total': 0
                    }

                salaries[admin_id]['salary_items'].append({
                    'description': description,
                    'amount': amount,
                    'note': note
                })
                salaries[admin_id]['total'] += amount

            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω—ã –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–ª—è {len(salaries)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return salaries

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Sheets: {e}")
            import traceback
            traceback.print_exc()
            return {}

    def _extract_admin_name(self, text: str) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ—á—å –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞

        –ü—Ä–∏–º–µ—Ä—ã:
        - "–ò–≤–∞–Ω–æ–≤ –ò.–ò. - —Å–º–µ–Ω—ã" -> "–ò–≤–∞–Ω–æ–≤ –ò.–ò."
        - "–ü–µ—Ç—Ä–æ–≤ –ü. (–∞–≤–∞–Ω—Å)" -> "–ü–µ—Ç—Ä–æ–≤ –ü."
        - "–°–º–∏—Ä–Ω–æ–≤–∞ –ê–Ω–Ω–∞ - –ø—Ä–µ–º–∏—è" -> "–°–º–∏—Ä–Ω–æ–≤–∞ –ê–Ω–Ω–∞"
        """
        if not text:
            return None

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω–∏
        # 1. –§–∞–º–∏–ª–∏—è –ò–Ω–∏—Ü–∏–∞–ª—ã (–ò–≤–∞–Ω–æ–≤ –ò.–ò.)
        import re
        pattern1 = r'^([–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å]\.[–ê-–Ø–Å]\.?)'
        match = re.match(pattern1, text)
        if match:
            return match.group(1).strip()

        # 2. –§–∞–º–∏–ª–∏—è –ò–º—è (–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω)
        pattern2 = r'^([–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+)'
        match = re.match(pattern2, text)
        if match:
            return match.group(1).strip()

        # 3. –ü—Ä–æ—Å—Ç–æ —Ñ–∞–º–∏–ª–∏—è
        pattern3 = r'^([–ê-–Ø–Å][–∞-—è—ë]+)'
        match = re.match(pattern3, text)
        if match:
            name = match.group(1).strip()
            # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–ª–æ–≤–æ
            if name.lower() not in ['–∏—Ç–æ–≥–æ', '–≤—Å–µ–≥–æ', '—Å—É–º–º–∞', '—Ä–∞—Å—Ö–æ–¥']:
                return name

        return None

    def _get_admin_id_by_name(self, name: str) -> Optional[int]:
        """
        –ü–æ–ª—É—á–∏—Ç—å ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏

        –ò—â–µ—Ç –≤ –ë–î –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ –ø–æ–ª–Ω–æ–º—É –∏–º–µ–Ω–∏ –∏–ª–∏ username
        """
        if not self.sheets_parser or not hasattr(self.sheets_parser, 'admin_db'):
            return None

        try:
            import sqlite3
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            # –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª–Ω–æ–º—É –∏–º–µ–Ω–∏ (full_name)
            cursor.execute("""
                SELECT user_id FROM admins
                WHERE full_name LIKE ?
                OR username LIKE ?
                LIMIT 1
            """, (f'%{name}%', f'%{name}%'))

            result = cursor.fetchone()
            conn.close()

            if result:
                return result[0]

            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∞ –ø–æ –∏–º–µ–Ω–∏: {e}")
            return None

    def calculate_net_salaries(self) -> Dict[int, Dict]:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —á–∏—Å—Ç—ã–µ –∑–∞—Ä–ø–ª–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –≤—ã–ø–ª–∞—Ç –∏–∑ –∫–∞—Å—Å—ã

        –§–æ—Ä–º—É–ª–∞:
        –ß–∏—Å—Ç–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ = –ù–∞—á–∏—Å–ª–µ–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ (–∏–∑ Sheets) - –í—ã–ø–ª–∞—Ç—ã –∏–∑ –∫–∞—Å—Å—ã

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        {
            admin_id: {
                'name': '–ò–º—è',
                'gross_salary': 10000,  # –ù–∞—á–∏—Å–ª–µ–Ω–Ω–∞—è (–∏–∑ Sheets)
                'cash_withdrawals': 3000,  # –í–∑—è—Ç–∞—è –∏–∑ –∫–∞—Å—Å—ã
                'net_salary': 7000,  # –ö –≤—ã–ø–ª–∞—Ç–µ
                'salary_items': [...]  # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ Sheets
            }
        }
        """
        # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –∏–∑ Sheets
        salaries = self.get_admin_salaries_from_sheets()

        # –ü–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—ã –∏–∑ –∫–∞—Å—Å (–∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü)
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        now = datetime.now()
        start_of_month = now.replace(day=1).strftime("%Y-%m-%d")

        cursor.execute("""
            SELECT
                admin_id,
                SUM(amount) as total_withdrawals
            FROM shift_cash_withdrawals
            WHERE DATE(created_at) >= ?
            GROUP BY admin_id
        """, (start_of_month,))

        withdrawals = {row[0]: row[1] for row in cursor.fetchall()}

        conn.close()

        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —á–∏—Å—Ç—ã–µ –∑–∞—Ä–ø–ª–∞—Ç—ã
        net_salaries = {}

        for admin_id, salary_data in salaries.items():
            gross = salary_data.get('total', 0)
            withdrawn = withdrawals.get(admin_id, 0)
            net = gross - withdrawn

            net_salaries[admin_id] = {
                'name': salary_data.get('name', f'Admin {admin_id}'),
                'gross_salary': gross,
                'cash_withdrawals': withdrawn,
                'net_salary': net,
                'salary_items': salary_data.get('salary_items', [])
            }

        logger.info(f"üí∞ –†–∞—Å—Å—á–∏—Ç–∞–Ω—ã –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–ª—è {len(net_salaries)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return net_salaries

    # =====================================================
    # –ê–ù–ê–õ–ò–ó –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò
    # =====================================================

    def analyze_admin_performance_by_weekday(
        self,
        start_date: Optional[str] = None,
        end_date: Optional[str] = None,
        club: Optional[str] = None
    ) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏

        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
        - –í –∫–∞–∫–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –∫–∞–∂–¥—ã–π –∞–¥–º–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ
        - –°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        - –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        {
            admin_id: {
                'name': '–ò–º—è',
                'by_weekday': {
                    'Monday': {'shifts': 5, 'avg_revenue': 50000},
                    'Tuesday': {'shifts': 3, 'avg_revenue': 45000},
                    ...
                },
                'best_day': 'Friday',
                'worst_day': 'Monday'
            }
        }
        """
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        where_clauses = ["status = 'closed'"]
        params = []

        if start_date:
            where_clauses.append("DATE(opened_at) >= ?")
            params.append(start_date)

        if end_date:
            where_clauses.append("DATE(opened_at) <= ?")
            params.append(end_date)

        if club:
            where_clauses.append("club = ?")
            params.append(club)

        where_sql = " AND ".join(where_clauses)

        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–º–µ–Ω—ã —Å –¥–∞—Ç–∞–º–∏
        query = f"""
        SELECT
            id as shift_id,
            admin_id,
            club,
            opened_at,
            closed_at
        FROM active_shifts
        WHERE {where_sql}
        """

        cursor.execute(query, params)
        shifts = cursor.fetchall()

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        admin_performance = defaultdict(lambda: defaultdict(list))

        weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

        for shift in shifts:
            shift_id, admin_id, club_name, opened_at, closed_at = shift

            # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0 = Monday, 6 = Sunday)
            opened_dt = datetime.fromisoformat(opened_at)
            weekday = weekdays[opened_dt.weekday()]

            # TODO: –ü–æ–ª—É—á–∏—Ç—å –≤—ã—Ä—É—á–∫—É —Å–º–µ–Ω—ã (–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)
            # –°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            revenue = 0

            admin_performance[admin_id][weekday].append(revenue)

        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        result = {}

        for admin_id, weekday_data in admin_performance.items():
            by_weekday = {}

            for weekday in weekdays:
                revenues = weekday_data.get(weekday, [])
                if revenues:
                    by_weekday[weekday] = {
                        'shifts': len(revenues),
                        'total_revenue': sum(revenues),
                        'avg_revenue': sum(revenues) / len(revenues)
                    }
                else:
                    by_weekday[weekday] = {
                        'shifts': 0,
                        'total_revenue': 0,
                        'avg_revenue': 0
                    }

            # –ù–∞–π—Ç–∏ –ª—É—á—à–∏–π –∏ —Ö—É–¥—à–∏–π –¥–µ–Ω—å
            avg_revenues = {day: data['avg_revenue'] for day, data in by_weekday.items() if data['shifts'] > 0}

            best_day = max(avg_revenues, key=avg_revenues.get) if avg_revenues else None
            worst_day = min(avg_revenues, key=avg_revenues.get) if avg_revenues else None

            result[admin_id] = {
                'by_weekday': by_weekday,
                'best_day': best_day,
                'worst_day': worst_day
            }

        conn.close()

        logger.info(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {len(result)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return result

    # =====================================================
    # –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–ß–ï–¢–û–í
    # =====================================================

    def format_salary_report(self, admin_id: Optional[int] = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º

        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
        - –ö–æ–º—É –∏ —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å
        - –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        - –í—ã–ø–ª–∞—Ç—ã –∏–∑ –∫–∞—Å—Å—ã
        - –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ
        """
        salaries = self.calculate_net_salaries()

        if not salaries:
            return "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö"

        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–¥–º–∏–Ω—É
        if admin_id:
            salaries = {admin_id: salaries.get(admin_id)} if admin_id in salaries else {}

        if not salaries:
            return f"üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Ä–ø–ª–∞—Ç–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = "üí∞ –û—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º\n"
        report += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"

        total_to_pay = 0

        for admin_id, data in sorted(salaries.items(), key=lambda x: x[1]['net_salary'], reverse=True):
            report += f"üë§ {data['name']} (ID: {admin_id})\n"
            report += f"‚îú‚îÄ –ù–∞—á–∏—Å–ª–µ–Ω–æ: {data['gross_salary']:,.0f} ‚ÇΩ\n"
            report += f"‚îú‚îÄ –í–∑—è—Ç–æ –∏–∑ –∫–∞—Å—Å—ã: {data['cash_withdrawals']:,.0f} ‚ÇΩ\n"
            report += f"‚îî‚îÄ –ö –≤—ã–ø–ª–∞—Ç–µ: {data['net_salary']:,.0f} ‚ÇΩ\n"

            # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
            if data['salary_items']:
                report += "\n   –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:\n"
                for item in data['salary_items']:
                    report += f"   ‚Ä¢ {item['description']}: {item['amount']:,.0f} ‚ÇΩ\n"
                    if item.get('note'):
                        report += f"     ({item['note']})\n"

            report += "\n"
            total_to_pay += data['net_salary']

        report += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        report += f"üíµ –ò—Ç–æ–≥–æ –∫ –≤—ã–ø–ª–∞—Ç–µ: {total_to_pay:,.0f} ‚ÇΩ\n"

        return report

    def format_movements_report(
        self,
        start_date: Optional[str] = None,
        end_date: Optional[str] = None,
        club: Optional[str] = None
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –¥–≤–∏–∂–µ–Ω–∏—è–º —Å—Ä–µ–¥—Å—Ç–≤
        """
        movements = self.get_cash_movements(start_date, end_date, club)

        if not movements:
            return "üìä –ù–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–π —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"

        report = "üí∏ –î–≤–∏–∂–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤\n"
        report += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∫–ª—É–±–∞–º
        by_club = defaultdict(list)
        for m in movements:
            by_club[m['club']].append(m)

        for club_name, club_movements in by_club.items():
            report += f"üè¢ {club_name}\n"
            report += f"{'‚îÄ'*30}\n\n"

            total_expenses = 0
            total_withdrawals = 0

            for m in club_movements:
                opened = datetime.fromisoformat(m['opened_at']).strftime('%d.%m.%Y %H:%M')

                report += f"üìÖ {opened} | {m['shift_type']}\n"

                # –†–∞—Å—Ö–æ–¥—ã
                if m['expenses']:
                    report += "  –†–∞—Å—Ö–æ–¥—ã:\n"
                    for exp in m['expenses']:
                        report += f"    ‚Ä¢ {exp['cash_register']}: {exp['total_expenses']:,.0f} ‚ÇΩ\n"
                        total_expenses += exp['total_expenses'] or 0

                # –í—ã–ø–ª–∞—Ç—ã
                if m['cash_withdrawals']:
                    report += f"  –í—ã–ø–ª–∞—Ç—ã: {m['cash_withdrawals']:,.0f} ‚ÇΩ\n"
                    total_withdrawals += m['cash_withdrawals']

                report += "\n"

            report += f"–ò—Ç–æ–≥–æ –ø–æ {club_name}:\n"
            report += f"  –†–∞—Å—Ö–æ–¥—ã: {total_expenses:,.0f} ‚ÇΩ\n"
            report += f"  –í—ã–ø–ª–∞—Ç—ã: {total_withdrawals:,.0f} ‚ÇΩ\n\n"

        return report

    def format_performance_report(
        self,
        start_date: Optional[str] = None,
        end_date: Optional[str] = None,
        club: Optional[str] = None
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        """
        performance = self.analyze_admin_performance_by_weekday(start_date, end_date, club)

        if not performance:
            return "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"

        report = "üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏\n"
        report += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"

        for admin_id, data in performance.items():
            report += f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id}\n"

            if data['best_day']:
                report += f"‚úÖ –õ—É—á—à–∏–π –¥–µ–Ω—å: {data['best_day']}\n"

            if data['worst_day']:
                report += f"‚ùå –•—É–¥—à–∏–π –¥–µ–Ω—å: {data['worst_day']}\n"

            report += "\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º:\n"

            for weekday, stats in data['by_weekday'].items():
                if stats['shifts'] > 0:
                    report += f"  {weekday}: {stats['shifts']} —Å–º–µ–Ω, "
                    report += f"—Å—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞ {stats['avg_revenue']:,.0f} ‚ÇΩ\n"

            report += "\n"

        return report


# =====================================================
# TELEGRAM –ö–û–ú–ê–ù–î–´
# =====================================================

def register_analytics_commands(application, analytics: FinanceAnalytics, admin_manager):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ –±–æ—Ç–µ

    –ö–æ–º–∞–Ω–¥—ã:
    - /salaries - –û—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º
    - /movements - –û—Ç—á–µ—Ç –ø–æ –¥–≤–∏–∂–µ–Ω–∏—è–º —Å—Ä–µ–¥—Å—Ç–≤
    - /performance - –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    from telegram import Update
    from telegram.ext import CommandHandler, ContextTypes

    async def cmd_salaries(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º"""
        user_id = update.effective_user.id

        # –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if not admin_manager.is_owner(user_id):
            await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É")
            return

        report = analytics.format_salary_report()
        await update.message.reply_text(report)

    async def cmd_movements(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –¥–≤–∏–∂–µ–Ω–∏—è–º —Å—Ä–µ–¥—Å—Ç–≤"""
        user_id = update.effective_user.id

        # –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        if not admin_manager.is_admin(user_id):
            await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –ø–µ—Ä–∏–æ–¥ (–Ω–µ–¥–µ–ª—è/–º–µ—Å—è—Ü), –∫–ª—É–±
        period = context.args[0] if context.args else "week"

        if period == "week":
            start_date = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")
        elif period == "month":
            start_date = datetime.now().replace(day=1).strftime("%Y-%m-%d")
        else:
            start_date = None

        report = analytics.format_movements_report(start_date=start_date)
        await update.message.reply_text(report)

    async def cmd_performance(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        user_id = update.effective_user.id

        # –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if not admin_manager.is_owner(user_id):
            await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É")
            return

        # –ü–µ—Ä–∏–æ–¥ - –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
        start_date = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d")

        report = analytics.format_performance_report(start_date=start_date)
        await update.message.reply_text(report)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("salaries", cmd_salaries))
    application.add_handler(CommandHandler("movements", cmd_movements))
    application.add_handler(CommandHandler("performance", cmd_performance))

    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    logger.info("   /salaries - –û—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º")
    logger.info("   /movements - –î–≤–∏–∂–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤")
    logger.info("   /performance - –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
