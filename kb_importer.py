#!/usr/bin/env python3
"""
Knowledge Base Importer v4.0
–ò–º–ø–æ—Ä—Ç –æ—á–∏—â–µ–Ω–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º—É v4.0
"""

import json
import sqlite3
import sys
import os
from embeddings import EmbeddingService
from vector_store import VectorStore
from draft_queue import DraftQueue

DB_PATH = 'knowledge.db'
CONFIG_PATH = 'config.json'


def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    with open(CONFIG_PATH, 'r') as f:
        return json.load(f)


def load_jsonl(filepath: str):
    """–ó–∞–≥—Ä—É–∑–∫–∞ JSONL —Ñ–∞–π–ª–∞"""
    records = []
    with open(filepath, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line:
                records.append(json.loads(line))
    return records


def check_duplicate(cursor, question: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –ø–æ –≤–æ–ø—Ä–æ—Å—É"""
    cursor.execute('''
        SELECT COUNT(*) FROM knowledge
        WHERE LOWER(TRIM(question)) = LOWER(TRIM(?))
        AND is_current = 1
    ''', (question,))
    
    count = cursor.fetchone()[0]
    return count > 0


def import_to_kb(records, conn, embedding_service, vector_store):
    """–ò–º–ø–æ—Ä—Ç –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π —Å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    cursor = conn.cursor()
    
    imported = 0
    skipped_duplicates = 0
    errors = 0
    
    print(f"\nüì• –ò–º–ø–æ—Ä—Ç {len(records)} –∑–∞–ø–∏—Å–µ–π...")
    
    for i, record in enumerate(records, 1):
        try:
            question = record['question']
            answer = record['answer']
            category = record.get('category', 'general')
            tags = record.get('tags', '')
            source = record.get('source', 'import')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
            if check_duplicate(cursor, question):
                skipped_duplicates += 1
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
            cursor.execute('''
                INSERT INTO knowledge
                (question, answer, category, tags, source, added_by, is_current)
                VALUES (?, ?, ?, ?, ?, ?, 1)
            ''', (question, answer, category, tags, source, 0))
            
            kb_id = cursor.lastrowid
            
            # –°–æ–∑–¥–∞—ë–º —ç–º–±–µ–¥–¥–∏–Ω–≥
            combined_text = embedding_service.combine_qa(question, answer)
            vector = embedding_service.embed(combined_text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å
            vector_store.upsert(kb_id, vector, {
                'category': category,
                'tags': tags,
                'question': question[:100]
            })
            
            imported += 1
            
            if i % 10 == 0:
                print(f"  –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(records)} ({imported} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ)")
                conn.commit()
                vector_store.save()
        
        except Exception as e:
            errors += 1
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å—å #{i}: {e}")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç
    conn.commit()
    vector_store.save()
    
    return imported, skipped_duplicates, errors


def import_to_drafts(records, draft_queue):
    """–ò–º–ø–æ—Ä—Ç –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Ä–µ–≤—å—é (–±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ)"""
    imported = 0
    errors = 0
    
    print(f"\nüìù –ò–º–ø–æ—Ä—Ç {len(records)} –∑–∞–ø–∏—Å–µ–π –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Ä–µ–≤—å—é...")
    
    for i, record in enumerate(records, 1):
        try:
            question = record['question']
            answer = record['answer']
            category = record.get('category', 'general')
            tags = record.get('tags', '')
            source = record.get('source', 'import')
            confidence = record.get('confidence', 0.75)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ drafts
            draft_queue.add_draft(
                question=question,
                answer=answer,
                category=category,
                tags=tags,
                source=source,
                confidence=confidence,
                added_by=0  # system
            )
            
            imported += 1
            
            if i % 10 == 0:
                print(f"  –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(records)}")
        
        except Exception as e:
            errors += 1
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å—å #{i}: {e}")
    
    return imported, errors


def main():
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 kb_importer.py <cleaned.jsonl> [--drafts]")
        print()
        print("–û–ø—Ü–∏–∏:")
        print("  --drafts    –ò–º–ø–æ—Ä—Ç –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Ä–µ–≤—å—é (–±–µ–∑–æ–ø–∞—Å–Ω–µ–µ)")
        print("  (–±–µ–∑ —Ñ–ª–∞–≥–∞) –ò–º–ø–æ—Ä—Ç –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
        sys.exit(1)
    
    input_file = sys.argv[1]
    use_drafts = '--drafts' in sys.argv
    
    if not os.path.exists(input_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
        sys.exit(1)
    
    if not os.path.exists(CONFIG_PATH):
        print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {CONFIG_PATH}")
        sys.exit(1)
    
    print("=" * 60)
    print("  Knowledge Base Importer v4.0")
    print("=" * 60)
    print()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    print("‚öôÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    config = load_config()
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å–∏
    print(f"\nüìñ –ó–∞–≥—Ä—É–∑–∫–∞: {input_file}")
    records = load_jsonl(input_file)
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(records)} –∑–∞–ø–∏—Å–µ–π")
    
    if len(records) == 0:
        print("‚ö†Ô∏è  –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
        sys.exit(0)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    print("\nüöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    if use_drafts:
        # –ò–º–ø–æ—Ä—Ç –≤ drafts
        print("üìù –†–µ–∂–∏–º: –∏–º–ø–æ—Ä—Ç –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Ä–µ–≤—å—é (drafts)")
        draft_queue = DraftQueue(DB_PATH)
        
        imported, errors = import_to_drafts(records, draft_queue)
        
        print("\n" + "=" * 60)
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞:")
        print("=" * 60)
        print(f"  –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ drafts: {imported}")
        print(f"  –û—à–∏–±–æ–∫: {errors}")
        print()
        print("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:")
        print("  1. –í –±–æ—Ç–µ: /review")
        print("  2. –û–¥–æ–±—Ä–∏—Ç—å –∑–∞–ø–∏—Å–∏")
        print("  3. –ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ–Ω–∏ –ø–æ–ø–∞–¥—É—Ç –≤ –±–∞–∑—É + –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
    
    else:
        # –ò–º–ø–æ—Ä—Ç –Ω–∞–ø—Ä—è–º—É—é
        print("‚ö° –†–µ–∂–∏–º: –∏–º–ø–æ—Ä—Ç –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–æ–±–∞–≤–∏—Ç –∑–∞–ø–∏—Å–∏ –ë–ï–ó —Ä–µ–≤—å—é!")
        print()
        confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ")
        if confirm.lower() != 'y':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            sys.exit(0)
        
        embedding_service = EmbeddingService(config['openai_api_key'])
        vector_store = VectorStore()
        vector_store.load()
        
        conn = sqlite3.connect(DB_PATH)
        
        imported, skipped, errors = import_to_kb(
            records, conn, embedding_service, vector_store
        )
        
        conn.close()
        
        print("\n" + "=" * 60)
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞:")
        print("=" * 60)
        print(f"  –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {imported}")
        print(f"  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã): {skipped}")
        print(f"  –û—à–∏–±–æ–∫: {errors}")
        print()
        print("‚úÖ –ó–∞–ø–∏—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤:")
        print("  - –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (knowledge)")
        print("  - –í–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å (vector_index.faiss)")
        print()
        print("–ì–æ—Ç–æ–≤–æ! –ú–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫.")
    
    print("\n" + "=" * 60)
    print("üéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
    print("=" * 60)


if __name__ == '__main__':
    main()
