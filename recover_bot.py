#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Bot Recovery Script - –°–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
"""

import os
import sys
import shutil
from datetime import datetime

def create_backup():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_name = f"bot_backup_{timestamp}"
    
    if os.path.exists("bot.py"):
        shutil.copy2("bot.py", f"{backup_name}.py")
        print(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_name}.py")
        return True
    return False

def fix_bot_imports():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ bot.py"""
    try:
        with open("bot.py", "r", encoding="utf-8") as f:
            content = f.read()
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏
        replacements = [
            ("from vector_store import VectorStore", "# from vector_store import VectorStore  # –û—Ç–∫–ª—é—á–µ–Ω–æ"),
            ("from embeddings import EmbeddingService", "# from embeddings import EmbeddingService  # –û—Ç–∫–ª—é—á–µ–Ω–æ"),
            ("from draft_queue import DraftQueue", "# from draft_queue import DraftQueue  # –û—Ç–∫–ª—é—á–µ–Ω–æ"),
        ]
        
        for old, new in replacements:
            content = content.replace(old, new)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        stub_code = '''
# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
class VectorStore:
    def __init__(self, *args, **kwargs):
        pass
    def add(self, *args, **kwargs):
        pass
    def search(self, *args, **kwargs):
        return []
    def stats(self):
        return {'total_vectors': 0}

class EmbeddingService:
    def __init__(self, *args, **kwargs):
        pass
    def embed_text(self, text):
        return [0.0] * 384

class DraftQueue:
    def __init__(self, *args, **kwargs):
        pass
    def add(self, *args, **kwargs):
        pass
    def get(self, *args, **kwargs):
        return None
'''
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
        import_end = content.find("CONFIG_PATH = 'config.json'")
        if import_end != -1:
            content = content[:import_end] + stub_code + "\n" + content[import_end:]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open("bot.py", "w", encoding="utf-8") as f:
            f.write(content)
        
        print("–ò–º–ø–æ—Ä—Ç—ã –≤ bot.py –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è bot.py: {e}")
        return False

def test_bot():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞"""
    try:
        import bot
        print("bot.py –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ bot.py: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    print("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Club Assistant Bot")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    if create_backup():
        print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    else:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    if fix_bot_imports():
        print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
    if test_bot():
        print("‚úÖ bot.py –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        print("\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å: python bot.py")
        return True
    else:
        print("‚ùå bot.py –≤—Å–µ –µ—â–µ –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã")
        return False

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüéâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é: python simple_bot.py")
