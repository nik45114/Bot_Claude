#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Product Commands - –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
–î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –∞–¥–º–∏–Ω–æ–≤
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
import logging

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è conversation handler
PRODUCT_ENTER_NAME, PRODUCT_ENTER_PRICE, PRODUCT_SELECT, PRODUCT_ENTER_QUANTITY = range(4)
PRODUCT_EDIT_PRICE = 5


class ProductCommands:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏"""
    
    def __init__(self, product_manager, admin_manager, owner_id: int):
        self.product_manager = product_manager
        self.admin_manager = admin_manager
        self.owner_id = owner_id
    
    def is_owner(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≤–ª–∞–¥–µ–ª–µ—Ü"""
        return user_id == self.owner_id
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω"""
        return self.admin_manager.is_admin(user_id)
    
    async def show_product_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤"""
        query = update.callback_query
        
        if query:
            user_id = query.from_user.id
            await query.answer()
        else:
            user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            text = "‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º"
            if query:
                await query.edit_message_text(text)
            else:
                await update.message.reply_text(text)
            return
        
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        keyboard.append([InlineKeyboardButton("üì¶ –ó–∞–ø–∏—Å–∞—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ —Å–µ–±—è", callback_data="product_take")])
        keyboard.append([InlineKeyboardButton("üí≥ –ú–æ–π –¥–æ–ª–≥", callback_data="product_my_debt")])
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if self.is_owner(user_id):
            keyboard.append([InlineKeyboardButton("üìä –û—Ç—á—ë—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º", callback_data="product_report")])
            keyboard.append([InlineKeyboardButton("üí∞ –î–æ–ª–≥–∏ –∞–¥–º–∏–Ω–æ–≤", callback_data="product_all_debts")])
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="product_add")])
            keyboard.append([InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="product_edit_price")])
            keyboard.append([InlineKeyboardButton("üóëÔ∏è –û–±–Ω—É–ª–∏—Ç—å –¥–æ–ª–≥", callback_data="product_clear_debt")])
            keyboard.append([InlineKeyboardButton("üßπ –û–±–Ω—É–ª–∏—Ç—å —Å–ø–∏—Å–∞–Ω–Ω–æ–µ", callback_data="product_clear_settled")])
        
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "üì¶ –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò\n\n"
        text += "–°–∏—Å—Ç–µ–º–∞ —É—á—ë—Ç–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏"
        
        if query:
            await query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
    
    async def show_my_debt(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ª–≥ –∞–¥–º–∏–Ω–∞"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        if not self.is_admin(user_id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º")
            return
        
        text = self.product_manager.format_admin_debt_report(user_id)
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="product_my_debt")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="product_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_all_debts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ª–≥–∏ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_owner(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–∑ callback_data
        sort_by = 'debt'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if query.data == 'product_all_debts_by_name':
            sort_by = 'name'
        
        text = self.product_manager.format_all_debts_report(sort_by=sort_by)
        
        keyboard = [
            [
                InlineKeyboardButton("üìä –ü–æ –¥–æ–ª–≥—É", callback_data="product_all_debts"),
                InlineKeyboardButton("üë§ –ü–æ –∏–º–µ–Ω–∏", callback_data="product_all_debts_by_name")
            ],
            [InlineKeyboardButton("üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç", callback_data="product_detailed_debts")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="product_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def start_take_product(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        if not self.is_admin(user_id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º")
            return ConversationHandler.END
        
        products = self.product_manager.list_products()
        
        if not products:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="product_menu")
                ]])
            )
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        keyboard = []
        for prod in products:
            keyboard.append([InlineKeyboardButton(
                f"{prod['name']} - {prod['cost_price']:,.0f} ‚ÇΩ",
                callback_data=f"product_select_{prod['id']}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="product_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            reply_markup=reply_markup
        )
        
        return PRODUCT_SELECT
    
    async def select_product(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞"""
        query = update.callback_query
        await query.answer()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
        product_id = int(query.data.split('_')[-1])
        context.user_data['product_id'] = product_id
        
        product = self.product_manager.get_product(product_id)
        
        if not product:
            await query.edit_message_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        await query.edit_message_text(
            f"–¢–æ–≤–∞—Ä: {product['name']}\n"
            f"–¶–µ–Ω–∞: {product['cost_price']:,.0f} ‚ÇΩ\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
        )
        
        return PRODUCT_ENTER_QUANTITY
    
    async def enter_quantity(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        try:
            quantity = int(update.message.text)
            
            if quantity <= 0:
                await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return PRODUCT_ENTER_QUANTITY
            
            product_id = context.user_data['product_id']
            user_id = update.effective_user.id
            user_name = update.effective_user.full_name or update.effective_user.username or str(user_id)
            
            success = self.product_manager.record_admin_product(
                admin_id=user_id,
                admin_name=user_name,
                product_id=product_id,
                quantity=quantity
            )
            
            if success:
                product = self.product_manager.get_product(product_id)
                total = product['cost_price'] * quantity
                new_debt = self.product_manager.get_admin_debt(user_id)
                
                text = f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ\n\n"
                text += f"üì¶ {product['name']}\n"
                text += f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç\n"
                text += f"üí∞ –°—É–º–º–∞: {total:,.0f} ‚ÇΩ\n\n"
                text += f"üí≥ –í–∞—à –æ–±—â–∏–π –¥–æ–ª–≥: {new_debt:,.0f} ‚ÇΩ"
            else:
                text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏"
            
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –í –º–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤", callback_data="product_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(text, reply_markup=reply_markup)
            
            context.user_data.clear()
            return ConversationHandler.END
            
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
            return PRODUCT_ENTER_QUANTITY
    
    async def start_add_product(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_owner(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É")
            return ConversationHandler.END
        
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        
        return PRODUCT_ENTER_NAME
    
    async def enter_product_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        name = update.message.text
        context.user_data['product_name'] = name
        
        await update.message.reply_text(
            f"–¢–æ–≤–∞—Ä: {name}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (–≤ —Ä—É–±–ª—è—Ö):"
        )
        
        return PRODUCT_ENTER_PRICE
    
    async def enter_product_price(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–≤–æ–¥ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
        try:
            price = float(update.message.text.replace(',', '.').replace(' ', ''))
            
            if price <= 0:
                await update.message.reply_text("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return PRODUCT_ENTER_PRICE
            
            name = context.user_data['product_name']
            
            success = self.product_manager.add_product(name, price)
            
            if success:
                text = f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω\n\n"
                text += f"üì¶ {name}\n"
                text += f"üí∞ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {price:,.0f} ‚ÇΩ"
            else:
                text = "‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –í –º–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤", callback_data="product_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(text, reply_markup=reply_markup)
            
            context.user_data.clear()
            return ConversationHandler.END
            
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
            return PRODUCT_ENTER_PRICE
    
    async def show_products_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_owner(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–∑ callback_data
        sort_by = 'admin'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if query.data == 'product_report_by_product':
            sort_by = 'product'
        
        text = self.product_manager.format_products_report(sort_by=sort_by)
        
        keyboard = [
            [
                InlineKeyboardButton("üë§ –ü–æ –∞–¥–º–∏–Ω–∞–º", callback_data="product_report"),
                InlineKeyboardButton("üì¶ –ü–æ —Ç–æ–≤–∞—Ä–∞–º", callback_data="product_report_by_product")
            ],
            [InlineKeyboardButton("üìä –°–≤–æ–¥–∫–∞", callback_data="product_summary")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="product_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_products_summary(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Ç–æ–≤–∞—Ä–∞–º (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_owner(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É")
            return
        
        text = self.product_manager.format_products_summary_report()
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="product_summary")],
            [InlineKeyboardButton("‚óÄÔ∏è –ö –æ—Ç—á—ë—Ç–∞–º", callback_data="product_report")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_detailed_debts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –¥–æ–ª–≥–∞–º (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_owner(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É")
            return
        
        text = self.product_manager.format_detailed_debts_report()
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="product_detailed_debts")],
            [InlineKeyboardButton("‚óÄÔ∏è –ö –¥–æ–ª–≥–∞–º", callback_data="product_all_debts")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def clear_settled_products(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±–Ω—É–ª–∏—Ç—å —Å–ø–∏—Å–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_owner(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É")
            return
        
        deleted = self.product_manager.clear_settled_products()
        
        text = f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted} –∑–∞–ø–∏—Å–µ–π –æ —Å–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="product_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def start_clear_debt(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –æ–±–Ω—É–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞ –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_owner(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É")
            return
        
        debts = self.product_manager.get_all_debts()
        
        if not debts:
            await query.edit_message_text(
                "‚úÖ –ù–µ—Ç –¥–æ–ª–≥–æ–≤",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="product_menu")
                ]])
            )
            return
        
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –í–°–ï–• –¥–æ–ª–≥–æ–≤
        keyboard.append([InlineKeyboardButton(
            "üîÑ –û–ë–ù–£–õ–ò–¢–¨ –í–°–ï –î–û–õ–ì–ò",
            callback_data="product_clear_all_confirm"
        )])
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∞
        for admin_id, data in debts.items():
            keyboard.append([InlineKeyboardButton(
                f"{data['name']} - {data['total']:,.0f} ‚ÇΩ",
                callback_data=f"product_clear_{admin_id}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="product_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞ –∏–ª–∏ –æ–±–Ω—É–ª–∏—Ç–µ –≤—Å–µ:",
            reply_markup=reply_markup
        )
    
    async def clear_all_debts_confirm(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω—É–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ–ª–≥–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_owner(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É")
            return
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, –æ–±–Ω—É–ª–∏—Ç—å –í–°–ï –¥–æ–ª–≥–∏", callback_data="product_clear_all_execute")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="product_clear_debt")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n\n"
            "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ–±–Ω—É–ª–∏—Ç—å –¥–æ–ª–≥–∏ –í–°–ï–• –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=reply_markup
        )
    
    async def clear_all_debts_execute(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–Ω—É–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ–ª–≥–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_owner(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É")
            return
        
        success = self.product_manager.clear_all_debts()
        
        if success:
            text = "‚úÖ –í—Å–µ –¥–æ–ª–≥–∏ –æ–±–Ω—É–ª–µ–Ω—ã!"
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏ –¥–æ–ª–≥–æ–≤"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="product_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞:",
            reply_markup=reply_markup
        )
    
    async def clear_admin_debt(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±–Ω—É–ª–∏—Ç—å –¥–æ–ª–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_owner(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∞–¥–º–∏–Ω–∞ –∏–∑ callback_data
        admin_id = int(query.data.split('_')[-1])
        
        success = self.product_manager.clear_admin_debt(admin_id)
        
        if success:
            text = "‚úÖ –î–æ–ª–≥ –æ–±–Ω—É–ª—ë–Ω"
        else:
            text = "‚ùå –û—à–∏–±–∫–∞"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="product_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def start_edit_price(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_owner(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É")
            return ConversationHandler.END
        
        products = self.product_manager.list_products()
        
        if not products:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="product_menu")
                ]])
            )
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        keyboard = []
        for prod in products:
            keyboard.append([InlineKeyboardButton(
                f"{prod['name']} - {prod['cost_price']:,.0f} ‚ÇΩ",
                callback_data=f"product_price_{prod['id']}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="product_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:",
            reply_markup=reply_markup
        )
        
        return PRODUCT_EDIT_PRICE
    
    async def select_product_for_price_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã"""
        query = update.callback_query
        await query.answer()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
        product_id = int(query.data.split('_')[-1])
        context.user_data['edit_price_product_id'] = product_id
        
        product = self.product_manager.get_product(product_id)
        
        if not product:
            await query.edit_message_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        await query.edit_message_text(
            f"–¢–æ–≤–∞—Ä: {product['name']}\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {product['cost_price']:,.0f} ‚ÇΩ\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:"
        )
        
        return PRODUCT_ENTER_PRICE
    
    async def enter_new_product_price(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–≤–æ–¥ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
        try:
            price = float(update.message.text.replace(',', '.').replace(' ', ''))
            
            if price <= 0:
                await update.message.reply_text("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return PRODUCT_ENTER_PRICE
            
            product_id = context.user_data['edit_price_product_id']
            product = self.product_manager.get_product(product_id)
            
            success = self.product_manager.update_product_price(product_id, price)
            
            if success:
                text = f"‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n\n"
                text += f"üì¶ {product['name']}\n"
                text += f"–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {product['cost_price']:,.0f} ‚ÇΩ\n"
                text += f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {price:,.0f} ‚ÇΩ"
            else:
                text = "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã"
            
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –í –º–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤", callback_data="product_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(text, reply_markup=reply_markup)
            
            context.user_data.clear()
            return ConversationHandler.END
            
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
            return PRODUCT_ENTER_PRICE
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        context.user_data.clear()
        await self.show_product_menu(update, context)
        return ConversationHandler.END

