#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Cash Commands - –ö–æ–º–∞–Ω–¥—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
–¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è conversation handler
CASH_SELECT_CLUB, CASH_SELECT_TYPE, CASH_SELECT_OPERATION = range(3)
CASH_ENTER_AMOUNT, CASH_ENTER_DESCRIPTION, CASH_ENTER_CATEGORY = range(3, 6)


class CashCommands:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    def __init__(self, cash_manager, owner_id: int):
        self.cash_manager = cash_manager
        self.owner_id = owner_id
    
    def is_owner(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≤–ª–∞–¥–µ–ª–µ—Ü"""
        return user_id == self.owner_id
    
    async def show_cash_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤"""
        query = update.callback_query
        
        if query:
            user_id = query.from_user.id
            await query.answer()
        else:
            user_id = update.effective_user.id
        
        if not self.is_owner(user_id):
            text = "‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É"
            if query:
                await query.edit_message_text(text)
            else:
                await update.message.reply_text(text)
            return
        
        keyboard = [
            [InlineKeyboardButton("üí∞ –¢–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã", callback_data="cash_balances")],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—Ö–æ–¥", callback_data="cash_add_income")],
            [InlineKeyboardButton("‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", callback_data="cash_add_expense")],
            [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏–π", callback_data="cash_movements")],
            [InlineKeyboardButton("üìà –ò—Ç–æ–≥–∏ –∑–∞ –º–µ—Å—è—Ü", callback_data="cash_monthly")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "üí∞ –§–ò–ù–ê–ù–°–û–í–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì\n\n"
        text += "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 4 –∫–∞—Å—Å–∞–º–∏:\n"
        text += "‚Ä¢ –†–∏–æ (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è)\n"
        text += "‚Ä¢ –†–∏–æ (–∫–æ—Ä–æ–±–∫–∞)\n"
        text += "‚Ä¢ –ú–∏—á—É—Ä–∏–Ω—Å–∫–∞—è (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è)\n"
        text += "‚Ä¢ –ú–∏—á—É—Ä–∏–Ω—Å–∫–∞—è (–∫–æ—Ä–æ–±–∫–∞)"
        
        if query:
            await query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
    
    async def show_balances(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_owner(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É")
            return
        
        text = self.cash_manager.format_balance_report()
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="cash_balances")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cash_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_movements(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–≤–∏–∂–µ–Ω–∏–π"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_owner(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É")
            return
        
        movements = self.cash_manager.get_movements(limit=20)
        text = self.cash_manager.format_movements_report(movements)
        
        keyboard = [
            [InlineKeyboardButton("üè¢ –†–∏–æ", callback_data="cash_movements_rio"),
             InlineKeyboardButton("üè¢ –ú–∏—á—É—Ä–∏–Ω—Å–∫–∞—è", callback_data="cash_movements_mich")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cash_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_movements_club(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª—É–±—É"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_owner(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—É–± –∏–∑ callback_data
        club = 'rio' if 'rio' in query.data else 'michurinskaya'
        
        movements = self.cash_manager.get_movements(club=club, limit=20)
        text = self.cash_manager.format_movements_report(movements)
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cash_movements")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def start_add_movement(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –¥–µ–Ω–µ–≥"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_owner(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É")
            return ConversationHandler.END
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
        operation = 'income' if 'income' in query.data else 'expense'
        context.user_data['cash_operation'] = operation
        
        operation_text = "–ü–†–ò–•–û–î" if operation == 'income' else "–†–ê–°–•–û–î"
        
        keyboard = [
            [InlineKeyboardButton("üè¢ –†–∏–æ", callback_data="cash_club_rio")],
            [InlineKeyboardButton("üè¢ –ú–∏—á—É—Ä–∏–Ω—Å–∫–∞—è/–°–µ–≤–µ—Ä", callback_data="cash_club_mich")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cash_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚ûï {operation_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±:",
            reply_markup=reply_markup
        )
        
        return CASH_SELECT_CLUB
    
    async def select_club(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä –∫–ª—É–±–∞"""
        query = update.callback_query
        await query.answer()
        
        club = 'rio' if 'rio' in query.data else 'michurinskaya'
        context.user_data['cash_club'] = club
        
        club_name = "–†–∏–æ" if club == 'rio' else "–ú–∏—á—É—Ä–∏–Ω—Å–∫–∞—è/–°–µ–≤–µ—Ä"
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –∫–∞—Å—Å–∞", callback_data="cash_type_official")],
            [InlineKeyboardButton("üì¶ –ö–æ—Ä–æ–±–∫–∞", callback_data="cash_type_box")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cash_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"–ö–ª—É–±: {club_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Å—Å—É:",
            reply_markup=reply_markup
        )
        
        return CASH_SELECT_TYPE
    
    async def select_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–∞—Å—Å—ã"""
        query = update.callback_query
        await query.answer()
        
        cash_type = 'official' if 'official' in query.data else 'box'
        context.user_data['cash_type'] = cash_type
        
        operation = context.user_data['cash_operation']
        operation_text = "–ø—Ä–∏—Ö–æ–¥" if operation == 'income' else "—Ä–∞—Å—Ö–æ–¥"
        
        await query.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É ({operation_text}):\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 5000 –∏–ª–∏ 1500.50"
        )
        
        return CASH_ENTER_AMOUNT
    
    async def enter_amount(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–≤–æ–¥ —Å—É–º–º—ã"""
        try:
            amount = float(update.message.text.replace(',', '.').replace(' ', ''))
            context.user_data['cash_amount'] = amount
            
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—è, –∑–∞—Ä–ø–ª–∞—Ç–∞, –∑–∞–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞"
            )
            
            return CASH_ENTER_DESCRIPTION
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5000"
            )
            return CASH_ENTER_AMOUNT
    
    async def enter_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è"""
        description = update.message.text
        context.user_data['cash_description'] = description
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
        operation = context.user_data['cash_operation']
        
        if operation == 'expense':
            keyboard = [
                [InlineKeyboardButton("üë§ –ó–∞—Ä–ø–ª–∞—Ç–∞", callback_data="cash_cat_salary")],
                [InlineKeyboardButton("üõí –ó–∞–∫—É–ø–∫–∞", callback_data="cash_cat_purchase")],
                [InlineKeyboardButton("üè¶ –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è", callback_data="cash_cat_collection")],
                [InlineKeyboardButton("üí∞ –î—Ä—É–≥–æ–µ", callback_data="cash_cat_other")],
                [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="cash_cat_skip")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:",
                reply_markup=reply_markup
            )
            
            return CASH_ENTER_CATEGORY
        else:
            # –î–ª—è –ø—Ä–∏—Ö–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
            return await self.save_movement(update, context, category="")
    
    async def select_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        query = update.callback_query
        await query.answer()
        
        category_map = {
            'salary': '–ó–∞—Ä–ø–ª–∞—Ç–∞',
            'purchase': '–ó–∞–∫—É–ø–∫–∞',
            'collection': '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è',
            'other': '–î—Ä—É–≥–æ–µ',
            'skip': ''
        }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data
        for key in category_map:
            if key in query.data:
                category = category_map[key]
                break
        else:
            category = ''
        
        return await self.save_movement(update, context, category)
    
    async def save_movement(self, update: Update, context: ContextTypes.DEFAULT_TYPE, category: str = ""):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –¥–µ–Ω–µ–≥"""
        club = context.user_data['cash_club']
        cash_type = context.user_data['cash_type']
        operation = context.user_data['cash_operation']
        amount = context.user_data['cash_amount']
        description = context.user_data['cash_description']
        
        user_id = update.effective_user.id
        
        success = self.cash_manager.add_movement(
            club=club,
            cash_type=cash_type,
            amount=amount,
            operation=operation,
            description=description,
            category=category,
            created_by=user_id
        )
        
        if success:
            operation_text = "‚ûï –ü—Ä–∏—Ö–æ–¥" if operation == 'income' else "‚ûñ –†–∞—Å—Ö–æ–¥"
            club_names = {'rio': '–†–∏–æ', 'michurinskaya': '–ú–∏—á—É—Ä–∏–Ω—Å–∫–∞—è'}
            type_names = {'official': '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è', 'box': '–ö–æ—Ä–æ–±–∫–∞'}
            
            new_balance = self.cash_manager.get_balance(club, cash_type)
            
            text = f"‚úÖ {operation_text} –¥–æ–±–∞–≤–ª–µ–Ω\n\n"
            text += f"üè¢ {club_names[club]}\n"
            text += f"üíº {type_names[cash_type]}\n"
            text += f"üí∞ –°—É–º–º–∞: {amount:,.0f} ‚ÇΩ\n"
            if description:
                text += f"üìù {description}\n"
            if category:
                text += f"üè∑ {category}\n"
            text += f"\nüíµ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:,.0f} ‚ÇΩ"
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –í –º–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤", callback_data="cash_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()
        
        return ConversationHandler.END
    
    async def show_monthly_summary(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–∏ –∑–∞ –º–µ—Å—è—Ü"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_owner(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É")
            return
        
        keyboard = [
            [InlineKeyboardButton("üè¢ –†–∏–æ", callback_data="cash_month_rio")],
            [InlineKeyboardButton("üè¢ –ú–∏—á—É—Ä–∏–Ω—Å–∫–∞—è", callback_data="cash_month_mich")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cash_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–± –¥–ª—è –∏—Ç–æ–≥–æ–≤ –∑–∞ –º–µ—Å—è—Ü:",
            reply_markup=reply_markup
        )
    
    async def show_monthly_club(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–∏ –ø–æ –∫–ª—É–±—É"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_owner(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É")
            return
        
        club = 'rio' if 'rio' in query.data else 'michurinskaya'
        
        # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        now = datetime.now()
        year = now.year
        month = now.month
        
        text = self.cash_manager.format_monthly_summary(club, year, month)
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cash_monthly")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        context.user_data.clear()
        await self.show_cash_menu(update, context)
        return ConversationHandler.END
