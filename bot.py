#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Club Assistant Bot v2.1
Telegram –±–æ—Ç —Å AI –∏ –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏–µ–º
"""

import os
import sys
import sqlite3
import json
import logging
from datetime import datetime
from difflib import SequenceMatcher

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)
import openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
CONFIG_PATH = 'config.json'
DB_PATH = 'knowledge.db'

logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class KnowledgeBase:
    """–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π SQLite"""
    
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.init_db()
    
    def init_db(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS knowledge (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                question TEXT NOT NULL,
                answer TEXT NOT NULL,
                category TEXT DEFAULT 'general',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_question ON knowledge(question)')
        conn.commit()
        conn.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
    
    def add(self, question: str, answer: str, category: str = 'general') -> bool:
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('SELECT id FROM knowledge WHERE question = ?', (question,))
            if cursor.fetchone():
                cursor.execute(
                    'UPDATE knowledge SET answer=?, category=?, updated_at=CURRENT_TIMESTAMP WHERE question=?',
                    (answer, category, question)
                )
            else:
                cursor.execute(
                    'INSERT INTO knowledge (question, answer, category) VALUES (?, ?, ?)',
                    (question, answer, category)
                )
            
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ add: {e}")
            return False
    
    def find(self, question: str, threshold: float = 0.6) -> str:
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT question, answer FROM knowledge')
            records = cursor.fetchall()
            conn.close()
            
            if not records:
                return None
            
            q_lower = question.lower().strip()
            best_answer = None
            best_ratio = 0
            
            for db_q, db_a in records:
                if db_q.lower() == q_lower:
                    return db_a
                
                ratio = SequenceMatcher(None, q_lower, db_q.lower()).ratio()
                if ratio > best_ratio:
                    best_ratio = ratio
                    best_answer = db_a
            
            return best_answer if best_ratio >= threshold else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ find: {e}")
            return None
    
    def stats(self) -> dict:
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM knowledge')
            total = cursor.fetchone()[0]
            cursor.execute('SELECT category, COUNT(*) FROM knowledge GROUP BY category')
            by_cat = dict(cursor.fetchall())
            conn.close()
            return {'total': total, 'by_category': by_cat}
        except:
            return {'total': 0, 'by_category': {}}
    
    def delete_by_keyword(self, keyword: str) -> int:
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute(
                'DELETE FROM knowledge WHERE question LIKE ? OR answer LIKE ?',
                (f'%{keyword}%', f'%{keyword}%')
            )
            count = cursor.rowcount
            conn.commit()
            conn.close()
            return count
        except:
            return 0


class GPTClient:
    """OpenAI GPT –∫–ª–∏–µ–Ω—Ç"""
    
    def __init__(self, api_key: str):
        openai.api_key = api_key
    
    async def ask(self, question: str, context: str = None) -> str:
        try:
            messages = [
                {"role": "system", "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–ª—É–±–∞. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."}
            ]
            
            if context:
                messages.append({"role": "system", "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}"})
            
            messages.append({"role": "user", "content": question})
            
            response = openai.ChatCompletion.create(
                model="gpt-4o-mini",
                messages=messages,
                max_tokens=500,
                temperature=0.7
            )
            
            return response.choices[0].message.content.strip()
        except Exception as e:
            logger.error(f"GPT –æ—à–∏–±–∫–∞: {e}")
            return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—à–∏–±–∫–∞ GPT: {str(e)}"
    
    async def smart_learn(self, text: str) -> dict:
        """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            prompt = f"""–ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç.
–í–µ—Ä–Ω–∏ JSON: {{"question": "...", "answer": "...", "category": "..."}}

–¢–µ–∫—Å—Ç: {text}

–ü—Ä–∏–º–µ—Ä—ã:
"–ö–ª—É–± –Ω–∞ —É–ª. –õ–µ–Ω–∏–Ω–∞ 123" ‚Üí {{"question": "–ì–¥–µ –∫–ª—É–±?", "answer": "—É–ª. –õ–µ–Ω–∏–Ω–∞, 123", "category": "location"}}
"–†–∞–±–æ—Ç–∞–µ–º —Å 9 –¥–æ 21" ‚Üí {{"question": "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã?", "answer": "9:00-21:00", "category": "schedule"}}
"""
            
            response = openai.ChatCompletion.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=200,
                temperature=0.3
            )
            
            result = response.choices[0].message.content.strip()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON
            import re
            match = re.search(r'\{[^}]+\}', result)
            if match:
                return json.loads(match.group())
            
            return None
        except Exception as e:
            logger.error(f"smart_learn –æ—à–∏–±–∫–∞: {e}")
            return None


class Bot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –±–æ—Ç–∞"""
    
    def __init__(self):
        self.config = self.load_config()
        self.kb = KnowledgeBase(DB_PATH)
        self.gpt = GPTClient(self.config['openai_api_key'])
        self.admin_ids = self.config['admin_ids']
    
    def load_config(self) -> dict:
        if not os.path.exists(CONFIG_PATH):
            logger.error("‚ùå config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            sys.exit(1)
        
        with open(CONFIG_PATH, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return config
    
    def is_admin(self, user_id: int) -> bool:
        return user_id in self.admin_ids
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.info(f"üì® /start –æ—Ç {update.effective_user.id}")
        
        text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Club Assistant.\n\n"
            "–ó–∞–¥–∞–≤–∞–π –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–ª—É–±–µ!\n\n"
            "üìö –ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - —Å–ø—Ä–∞–≤–∫–∞\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        )
        
        if self.is_admin(update.effective_user.id):
            text += (
                "\nüîß –ê–¥–º–∏–Ω:\n"
                "/learn —Ç–µ–∫—Å—Ç - —É–º–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ\n"
                "/forget —Å–ª–æ–≤–æ - —É–¥–∞–ª–∏—Ç—å\n"
                "/update - –æ–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n"
            )
        
        await update.message.reply_text(text)
    
    async def cmd_learn(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return
        
        text = update.message.text.replace('/learn', '').strip()
        
        if not text:
            await update.message.reply_text(
                "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /learn —Ç–µ–∫—Å—Ç\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /learn –ö–ª—É–± –Ω–∞ —É–ª. –õ–µ–Ω–∏–Ω–∞ 123\n"
                "‚Ä¢ /learn –†–∞–±–æ—Ç–∞–µ–º –ø–Ω-–ø—Ç 9-21\n"
                "‚Ä¢ /learn –ü–∞—Ä–∫–æ–≤–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è"
            )
            return
        
        logger.info(f"üìù /learn: {text[:50]}")
        await update.message.reply_text("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
        
        result = await self.gpt.smart_learn(text)
        
        if result and 'question' in result and 'answer' in result:
            self.kb.add(
                result['question'],
                result['answer'],
                result.get('category', 'general')
            )
            
            await update.message.reply_text(
                f"‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª!\n\n"
                f"‚ùì {result['question']}\n"
                f"üí¨ {result['answer']}\n"
                f"üìÅ {result.get('category', 'general')}"
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å –∑–Ω–∞–Ω–∏–µ")
    
    async def cmd_forget(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return
        
        keyword = update.message.text.replace('/forget', '').strip()
        
        if not keyword:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /forget –∫–ª—é—á–µ–≤–æ–µ_—Å–ª–æ–≤–æ")
            return
        
        count = self.kb.delete_by_keyword(keyword)
        await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {count}")
    
    async def cmd_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        stats = self.kb.stats()
        
        text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\nüìö –í—Å–µ–≥–æ: {stats['total']}\n\n"
        
        if stats['by_category']:
            text += "üìÅ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
            for cat, count in stats['by_category'].items():
                text += f"  ‚Ä¢ {cat}: {count}\n"
        
        await update.message.reply_text(text)
    
    async def cmd_update(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return
        
        github_repo = self.config.get('github_repo', '')
        
        if not github_repo:
            await update.message.reply_text(
                "‚ö†Ô∏è GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n"
                "–î–æ–±–∞–≤—å—Ç–µ 'github_repo' –≤ config.json"
            )
            return
        
        await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª—è—é —Å GitHub...")
        
        try:
            import subprocess
            
            # Git pull
            result = subprocess.run(
                ['git', 'pull', 'origin', 'main'],
                capture_output=True,
                text=True,
                cwd=os.path.dirname(os.path.abspath(__file__))
            )
            
            if result.returncode == 0:
                await update.message.reply_text(
                    "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\n"
                    "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:\n"
                    "systemctl restart club_assistant"
                )
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
        
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        question = update.message.text.strip()
        user_id = update.effective_user.id
        
        logger.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {question[:50]}")
        
        # –ò—â–µ–º –≤ –±–∞–∑–µ
        answer = self.kb.find(question)
        
        if answer:
            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ")
            await update.message.reply_text(f"üí° {answer}")
            return
        
        # GPT
        await update.message.reply_text("ü§î –î—É–º–∞—é...")
        
        gpt_answer = await self.gpt.ask(question)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        self.kb.add(question, gpt_answer, 'auto')
        
        logger.info("ü§ñ –û—Ç–≤–µ—Ç GPT")
        await update.message.reply_text(f"ü§ñ {gpt_answer}\n\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Club Assistant Bot v2.1...")
        
        app = Application.builder().token(self.config['telegram_token']).build()
        
        # –ö–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", self.cmd_start))
        app.add_handler(CommandHandler("learn", self.cmd_learn))
        app.add_handler(CommandHandler("forget", self.cmd_forget))
        app.add_handler(CommandHandler("stats", self.cmd_stats))
        app.add_handler(CommandHandler("update", self.cmd_update))
        
        # –¢–µ–∫—Å—Ç
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    try:
        bot = Bot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
