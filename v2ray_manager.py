#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
V2Ray Manager —Å REALITY –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ V2Ray/Xray —Å–µ—Ä–≤–µ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ SSH
"""

import sqlite3
import json
import paramiko
import uuid
import base64
import subprocess
import logging
from typing import List, Dict, Optional

logger = logging.getLogger(__name__)


class V2RayServer:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å V2Ray —Å–µ—Ä–≤–µ—Ä–æ–º"""
    
    def __init__(self, host: str, username: str, password: str, port: int = 22):
        self.host = host
        self.username = username
        self.password = password
        self.port = port
        self.ssh_client = None
    
    def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ SSH"""
        try:
            self.ssh_client = paramiko.SSHClient()
            self.ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            self.ssh_client.connect(
                hostname=self.host,
                port=self.port,
                username=self.username,
                password=self.password,
                timeout=10
            )
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ {self.host}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {self.host}: {e}")
            return False
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.ssh_client:
            self.ssh_client.close()
            logger.info(f"üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç {self.host}")
    
    def _exec_command(self, command: str, timeout: int = 30) -> tuple:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        try:
            stdin, stdout, stderr = self.ssh_client.exec_command(command, timeout=timeout)
            exit_code = stdout.channel.recv_exit_status()
            out = stdout.read().decode('utf-8')
            err = stderr.read().decode('utf-8')
            return exit_code, out, err
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            return 1, "", str(e)
    
    def install_v2ray(self, force: bool = False) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Xray –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            if not force:
                logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é —É—Å—Ç–∞–Ω–æ–≤–∫—É Xray...")
                exit_code, out, err = self._exec_command('xray version', timeout=5)
                if exit_code == 0:
                    version_info = out.strip().split('\n')[0] if out else "Unknown"
                    logger.info(f"‚úÖ Xray —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {version_info}")
                    logger.info("   –ü—Ä–æ–ø—É—Å–∫–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ force=True –¥–ª—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏")
                    return True
                logger.info("üì• Xray –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É...")
            
            logger.info("üì• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Xray...")
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Xray
            install_script = '''
#!/bin/bash
set -e

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
apt-get update

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
apt-get install -y curl unzip

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Xray
bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
if command -v xray &> /dev/null; then
    echo "Xray —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
    xray version
else
    echo "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Xray"
    exit 1
fi
'''
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            sftp = self.ssh_client.open_sftp()
            with sftp.file('/tmp/install_xray.sh', 'w') as f:
                f.write(install_script)
            sftp.close()
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
            self._exec_command('chmod +x /tmp/install_xray.sh')
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
            exit_code, out, err = self._exec_command('bash /tmp/install_xray.sh', timeout=180)
            
            if exit_code == 0:
                logger.info("‚úÖ Xray —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {err}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Xray: {e}")
            return False
    
    def generate_reality_keys(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –¥–ª—è REALITY"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏ –ª–æ–∫–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—è xray
            result = subprocess.run(
                ['xray', 'x25519'],
                capture_output=True,
                text=True,
                timeout=5
            )
            
            if result.returncode == 0:
                lines = result.stdout.strip().split('\n')
                private_key = lines[0].split(':')[1].strip()
                public_key = lines[1].split(':')[1].strip()
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º short ID (8 –±–∞–π—Ç –≤ hex = 16 —Å–∏–º–≤–æ–ª–æ–≤)
                short_id = uuid.uuid4().hex[:16]
                
                return {
                    'private_key': private_key,
                    'public_key': public_key,
                    'short_id': short_id
                }
            else:
                # –ï—Å–ª–∏ xray –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                return self._generate_keys_on_server()
                
        except FileNotFoundError:
            # xray –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ
            return self._generate_keys_on_server()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: {e}")
            return None
    
    def _generate_keys_on_server(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        try:
            exit_code, out, err = self._exec_command('xray x25519')
            
            if exit_code == 0:
                lines = out.strip().split('\n')
                private_key = lines[0].split(':')[1].strip()
                public_key = lines[1].split(':')[1].strip()
                short_id = uuid.uuid4().hex[:16]
                
                return {
                    'private_key': private_key,
                    'public_key': public_key,
                    'short_id': short_id
                }
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {err}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {e}")
            return None
    
    def create_reality_config(self, port: int = 443, sni: str = "rutube.ru") -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Xray —Å REALITY"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏
            keys = self.generate_reality_keys()
            if not keys:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏")
                return None
            
            config = {
                "log": {
                    "loglevel": "warning"
                },
                "inbounds": [
                    {
                        "port": port,
                        "protocol": "vless",
                        "settings": {
                            "clients": [],
                            "decryption": "none"
                        },
                        "streamSettings": {
                            "network": "tcp",
                            "security": "reality",
                            "realitySettings": {
                                "dest": f"{sni}:443",
                                "serverNames": [sni],
                                "privateKey": keys['private_key'],
                                "shortIds": [keys['short_id'], ""],
                                "spiderX": ""
                            },
                            "tcpSettings": {
                                "header": {
                                    "type": "none"
                                }
                            }
                        }
                    }
                ],
                "outbounds": [
                    {
                        "protocol": "freedom",
                        "tag": "direct"
                    },
                    {
                        "protocol": "blackhole",
                        "tag": "block"
                    }
                ]
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–æ–Ω–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫)
            config['_client_keys'] = {
                'public_key': keys['public_key'],
                'short_id': keys['short_id']
            }
            
            return config
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return None
    
    def deploy_config(self, config: Dict) -> bool:
        """–†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        try:
            # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–ª—é—á–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            config_to_save = config.copy()
            if '_client_keys' in config_to_save:
                del config_to_save['_client_keys']
            
            config_json = json.dumps(config_to_save, indent=2)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            sftp = self.ssh_client.open_sftp()
            with sftp.file('/usr/local/etc/xray/config.json', 'w') as f:
                f.write(config_json)
            sftp.close()
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Xray
            exit_code, out, err = self._exec_command('systemctl restart xray')
            
            if exit_code == 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                exit_code, out, err = self._exec_command('systemctl is-active xray')
                if 'active' in out:
                    logger.info("‚úÖ Xray –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    return True
                else:
                    logger.error(f"‚ùå Xray –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è: {err}")
                    return False
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Xray: {err}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def add_user_reality(self, user_id: str, email: str = "", sni: str = "rutube.ru") -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è VLESS —Å—Å—ã–ª–∫–∏"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_uuid = str(uuid.uuid4())
            
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            sftp = self.ssh_client.open_sftp()
            with sftp.file('/usr/local/etc/xray/config.json', 'r') as f:
                config = json.load(f)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_client = {
                "id": user_uuid,
                "email": email or user_id,
                "flow": "xtls-rprx-vision"
            }
            
            config['inbounds'][0]['settings']['clients'].append(new_client)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            with sftp.file('/usr/local/etc/xray/config.json', 'w') as f:
                json.dump(config, f, indent=2)
            
            sftp.close()
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Xray
            self._exec_command('systemctl restart xray')
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            reality_settings = config['inbounds'][0]['streamSettings']['realitySettings']
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
            # –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å xray x25519 –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            exit_code, out, err = self._exec_command('xray x25519')
            
            # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
            # –ù–æ –ø—Ä–æ—â–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            # –ü–æ—ç—Ç–æ–º—É –±—É–¥–µ–º —Ç—Ä–µ–±–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –≤ –ë–î
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º VLESS —Å—Å—ã–ª–∫—É
            # –§–æ—Ä–º–∞—Ç: vless://uuid@host:port?param=value#name
            
            params = [
                "encryption=none",
                "flow=xtls-rprx-vision",
                "security=reality",
                f"sni={sni}",
                "fp=chrome",
                # –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∏ short_id –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î
                # –û–Ω–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø—Ä–∏ setup —Å–µ—Ä–≤–µ—Ä–∞
                "type=tcp"
            ]
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –±–µ–∑ pbk –∏ sid (–æ–Ω–∏ –¥–æ–±–∞–≤—è—Ç—Å—è –ø–æ–∑–∂–µ –∏–∑ –ë–î)
            vless_link = f"vless://{user_uuid}@{self.host}:443?{'&'.join(params)}#{email or user_id}"
            
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω")
            return vless_link
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    def remove_user(self, user_uuid: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            sftp = self.ssh_client.open_sftp()
            with sftp.file('/usr/local/etc/xray/config.json', 'r') as f:
                config = json.load(f)
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            clients = config['inbounds'][0]['settings']['clients']
            config['inbounds'][0]['settings']['clients'] = [
                c for c in clients if c['id'] != user_uuid
            ]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            with sftp.file('/usr/local/etc/xray/config.json', 'w') as f:
                json.dump(config, f, indent=2)
            
            sftp.close()
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Xray
            self._exec_command('systemctl restart xray')
            
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_uuid} —É–¥–∞–ª—ë–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    def change_sni(self, new_sni: str) -> bool:
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ SNI (–º–∞—Å–∫–∏—Ä–æ–≤–∫–∏)"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            sftp = self.ssh_client.open_sftp()
            with sftp.file('/usr/local/etc/xray/config.json', 'r') as f:
                config = json.load(f)
            
            # –ò–∑–º–µ–Ω—è–µ–º SNI
            reality_settings = config['inbounds'][0]['streamSettings']['realitySettings']
            reality_settings['dest'] = f"{new_sni}:443"
            reality_settings['serverNames'] = [new_sni]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            with sftp.file('/usr/local/etc/xray/config.json', 'w') as f:
                json.dump(config, f, indent=2)
            
            sftp.close()
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Xray
            self._exec_command('systemctl restart xray')
            
            logger.info(f"‚úÖ SNI –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_sni}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è SNI: {e}")
            return False
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Xray
            exit_code, out, err = self._exec_command('systemctl is-active xray')
            is_running = 'active' in out
            
            # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            sftp = self.ssh_client.open_sftp()
            with sftp.file('/usr/local/etc/xray/config.json', 'r') as f:
                config = json.load(f)
            sftp.close()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            clients = config['inbounds'][0]['settings']['clients']
            users_count = len(clients)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            inbound = config['inbounds'][0]
            port = inbound.get('port', 443)
            protocol = inbound.get('protocol', 'vless')
            
            reality_settings = inbound['streamSettings']['realitySettings']
            sni = reality_settings['serverNames'][0] if reality_settings['serverNames'] else 'unknown'
            
            return {
                'running': is_running,
                'host': self.host,
                'port': port,
                'protocol': protocol,
                'sni': sni,
                'users': users_count
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                'running': False,
                'host': self.host,
                'port': 443,
                'protocol': 'vless',
                'sni': 'unknown',
                'users': 0
            }


class V2RayManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä V2Ray —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    
    def __init__(self, db_path: str = 'knowledge.db'):
        self.db_path = db_path
        self._init_db()
    
    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS v2ray_servers (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE NOT NULL,
                host TEXT NOT NULL,
                port INTEGER DEFAULT 22,
                username TEXT NOT NULL,
                password TEXT NOT NULL,
                sni TEXT DEFAULT 'rutube.ru',
                public_key TEXT,
                short_id TEXT,
                is_active BOOLEAN DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS v2ray_users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                server_name TEXT NOT NULL,
                user_id TEXT NOT NULL,
                uuid TEXT NOT NULL UNIQUE,
                comment TEXT DEFAULT '',
                sni TEXT DEFAULT 'rutube.ru',
                is_active BOOLEAN DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (server_name) REFERENCES v2ray_servers(name)
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def add_server(self, name: str, host: str, username: str, password: str, 
                   port: int = 22, sni: str = "rutube.ru") -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            logger.info(f"üîç add_server called with:")
            logger.info(f"  ‚Ä¢ name: {name}")
            logger.info(f"  ‚Ä¢ host: {host}")
            logger.info(f"  ‚Ä¢ port: {port}")
            logger.info(f"  ‚Ä¢ username: {username}")
            logger.info(f"  ‚Ä¢ sni: {sni}")
            
            logger.info(f"üìÇ Opening database: {self.db_path}")
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            logger.info(f"üìù Executing INSERT query...")
            cursor.execute('''
                INSERT INTO v2ray_servers (name, host, port, username, password, sni)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (name, host, port, username, password, sni))
            
            logger.info(f"üíæ Committing transaction...")
            conn.commit()
            
            logger.info(f"üîí Closing connection...")
            conn.close()
            
            logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä {name} –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except sqlite3.IntegrityError as e:
            logger.error(f"‚ùå Database integrity error: {e}")
            logger.error(f"   Possible duplicate server name: {name}")
            return False
        except sqlite3.OperationalError as e:
            logger.error(f"‚ùå Database operational error: {e}")
            logger.error(f"   Check if database file exists: {self.db_path}")
            return False
        except Exception as e:
            logger.error(f"‚ùå Unexpected error in add_server: {e}", exc_info=True)
            return False
    
    def get_server(self, name: str) -> Optional[V2RayServer]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                SELECT host, port, username, password
                FROM v2ray_servers
                WHERE name = ? AND is_active = 1
            ''', (name,))
            
            row = cursor.fetchone()
            conn.close()
            
            if row:
                return V2RayServer(row[0], row[2], row[3], row[1])
            else:
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return None
    
    def list_servers(self) -> List[Dict]:
        """–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                SELECT name, host, port, sni, username
                FROM v2ray_servers
                WHERE is_active = 1
            ''')
            
            servers = []
            for row in cursor.fetchall():
                servers.append({
                    'name': row[0],
                    'host': row[1],
                    'port': row[2],
                    'sni': row[3],
                    'username': row[4]
                })
            
            conn.close()
            return servers
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
            return []
    
    def save_server_keys(self, server_name: str, public_key: str, short_id: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–π —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE v2ray_servers
                SET public_key = ?, short_id = ?
                WHERE name = ?
            ''', (public_key, short_id, server_name))
            conn.commit()
            conn.close()
            logger.info(f"‚úÖ –ö–ª—é—á–∏ —Å–µ—Ä–≤–µ—Ä–∞ {server_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π: {e}")
            return False
    
    def get_server_keys(self, server_name: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                SELECT public_key, short_id, sni
                FROM v2ray_servers
                WHERE name = ?
            ''', (server_name,))
            
            row = cursor.fetchone()
            conn.close()
            
            if row:
                return {
                    'public_key': row[0],
                    'short_id': row[1],
                    'sni': row[2] or 'rutube.ru'
                }
            else:
                return {}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π: {e}")
            return {}
    
    def save_user(self, server_name: str, user_id: str, user_uuid: str, 
                 vless_link: str, email: str = "") -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–µ—Ä–≤–µ—Ä–∞
            cursor.execute('SELECT id FROM v2ray_servers WHERE name = ?', (server_name,))
            server_id = cursor.fetchone()[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
            keys = self.get_server_keys(server_name)
            
            # –î–æ–ø–æ–ª–Ω—è–µ–º —Å—Å—ã–ª–∫—É pbk –∏ sid
            if keys.get('public_key') and keys.get('short_id'):
                vless_link += f"&pbk={keys['public_key']}&sid={keys['short_id']}"
            
            cursor.execute('''
                INSERT INTO v2ray_users (server_id, user_id, uuid, email, vless_link)
                VALUES (?, ?, ?, ?, ?)
            ''', (server_id, user_id, user_uuid, email, vless_link))
            
            conn.commit()
            conn.close()
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    def add_user(self, server_name: str, user_id: str, comment: str = "") -> dict:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        try:
            logger.info(f"üîç add_user called:")
            logger.info(f"  ‚Ä¢ server_name: {server_name}")
            logger.info(f"  ‚Ä¢ user_id: {user_id}")
            logger.info(f"  ‚Ä¢ comment: {comment}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
            logger.info(f"üìÇ Getting server info...")
            server_info = self.get_server_info(server_name)
            
            if not server_info:
                logger.error(f"‚ùå Server {server_name} not found")
                return None
            
            logger.info(f"‚úÖ Server found: {server_info['host']}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID
            user_uuid = str(uuid.uuid4())
            logger.info(f"üîë Generated UUID: {user_uuid}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ñ–∏–≥ Xray —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
            logger.info(f"üìù Adding user to Xray config...")
            server = V2RayServer(
                server_info['host'],
                server_info['username'],
                server_info['password'],
                server_info['port']
            )
            
            if not server.connect():
                logger.error(f"‚ùå Failed to connect to server")
                return None
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ add_user_reality
            sni = server_info.get('sni', 'rutube.ru')
            vless_link_partial = server.add_user_reality(user_id, comment or user_id, sni)
            
            server.disconnect()
            
            if not vless_link_partial:
                logger.error(f"‚ùå Failed to add user to Xray")
                return None
            
            logger.info(f"‚úÖ User added to Xray config")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            logger.info(f"üíæ Saving to database...")
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO v2ray_users (server_name, user_id, uuid, comment, sni)
                VALUES (?, ?, ?, ?, ?)
            ''', (server_name, user_id, user_uuid, comment, sni))
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ User saved to database")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º VLESS —Å—Å—ã–ª–∫—É
            # REALITY protocol always uses port 443 to mimic HTTPS traffic
            # This is hardcoded throughout the system (see create_reality_config)
            vless_link = self._generate_vless_link(
                server_info['host'],
                443,
                user_uuid,
                sni,
                comment
            )
            
            # –î–æ–ø–æ–ª–Ω—è–µ–º –∫–ª—é—á–∞–º–∏
            keys = self.get_server_keys(server_name)
            if keys.get('public_key') and keys.get('short_id'):
                vless_link += f"&pbk={keys['public_key']}&sid={keys['short_id']}"
            
            logger.info(f"‚úÖ User added successfully")
            
            return {
                'uuid': user_uuid,
                'vless': vless_link,
                'sni': sni,
                'comment': comment
            }
            
        except Exception as e:
            logger.error(f"‚ùå add_user error: {e}", exc_info=True)
            return None
    
    def _generate_vless_link(self, host: str, port: int, uuid: str, sni: str, comment: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è VLESS —Å—Å—ã–ª–∫–∏"""
        import urllib.parse
        
        params = {
            'security': 'reality',
            'sni': sni,
            'fp': 'chrome',
            'type': 'tcp',
            'flow': 'xtls-rprx-vision'
        }
        
        params_str = '&'.join([f"{k}={v}" for k, v in params.items()])
        comment_encoded = urllib.parse.quote(comment)
        
        vless = f"vless://{uuid}@{host}:{port}?{params_str}#{comment_encoded}"
        
        return vless
    
    def get_server_info(self, server_name: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                SELECT name, host, port, username, password, sni
                FROM v2ray_servers
                WHERE name = ? AND is_active = 1
            ''', (server_name,))
            
            row = cursor.fetchone()
            conn.close()
            
            if row:
                return {
                    'name': row[0],
                    'host': row[1],
                    'port': row[2],
                    'username': row[3],
                    'password': row[4],
                    'sni': row[5] or 'rutube.ru'
                }
            else:
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ: {e}")
            return None
    
    def get_server_users(self, server_name: str) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT * FROM v2ray_users
                WHERE server_name = ? AND is_active = 1
                ORDER BY created_at DESC
            ''', (server_name,))
            
            rows = cursor.fetchall()
            conn.close()
            
            return [dict(row) for row in rows]
        except Exception as e:
            logger.error(f"‚ùå get_server_users error: {e}")
            return []
    
    def delete_user(self, server_name: str, uuid: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.info(f"üóëÔ∏è Deleting user {uuid} from {server_name}")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('DELETE FROM v2ray_users WHERE server_name = ? AND uuid = ?', (server_name, uuid))
            conn.commit()
            conn.close()
            
            # TODO: –£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ Xray —á–µ—Ä–µ–∑ SSH
            
            logger.info(f"‚úÖ User deleted")
            return True
        except Exception as e:
            logger.error(f"‚ùå delete_user error: {e}")
            return False
