#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Content Generation Commands
Handlers for content generation features
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)


class ContentCommands:
    """Handles content generation commands"""
    
    def __init__(self, content_generator, admin_manager):
        self.content_generator = content_generator
        self.admin_manager = admin_manager
    

    
    async def show_content_menu(self, query):
        """Show content generation menu"""
        keyboard = [
            [InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="content_image")],
            [InlineKeyboardButton("üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ", callback_data="content_video")],
            [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", callback_data="content_history")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        text = """üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üé® /image <–æ–ø–∏—Å–∞–Ω–∏–µ> - —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   –ü—Ä–∏–º–µ—Ä: /image –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å

üé¨ /video <–æ–ø–∏—Å–∞–Ω–∏–µ> - —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ
   –ü—Ä–∏–º–µ—Ä: /video –¥—Ä–∞–∫–æ–Ω –ª–µ—Ç–∏—Ç –Ω–∞–¥ –≥–æ—Ä–∞–º–∏

üìú –ò—Å—Ç–æ—Ä–∏—è - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"""
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def show_model_settings(self, query):
        """Show GPT model settings for admins"""
        user_id = query.from_user.id
        
        if not self.admin_manager.is_admin(user_id):
            await query.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", show_alert=True)
            return
        
        current_model = self.content_generator.get_active_model()
        
        keyboard = [
            [InlineKeyboardButton(
                f"{'‚úÖ ' if current_model == 'gpt-4o-mini' else ''}GPT-4o Mini (–±—ã—Å—Ç—Ä–∞—è)", 
                callback_data="model_gpt-4o-mini"
            )],
            [InlineKeyboardButton(
                f"{'‚úÖ ' if current_model == 'gpt-4o' else ''}GPT-4o (–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è)", 
                callback_data="model_gpt-4o"
            )],
            [InlineKeyboardButton(
                f"{'‚úÖ ' if current_model == 'gpt-4-turbo' else ''}GPT-4 Turbo", 
                callback_data="model_gpt-4-turbo"
            )],
            [InlineKeyboardButton(
                f"{'‚úÖ ' if current_model == 'gpt-4' else ''}GPT-4 (–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)", 
                callback_data="model_gpt-4"
            )],
            [InlineKeyboardButton(
                f"{'‚úÖ ' if current_model == 'gpt-3.5-turbo' else ''}GPT-3.5 Turbo (–±—é–¥–∂–µ—Ç–Ω–∞—è)", 
                callback_data="model_gpt-3.5-turbo"
            )],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")]
        ]
        
        text = f"""‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ GPT –º–æ–¥–µ–ª–∏

–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {current_model}

üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π:

GPT-4o Mini ‚ö°
‚Ä¢ –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è
‚Ä¢ –î–µ—à–µ–≤–∞—è
‚Ä¢ –•–æ—Ä–æ—à–æ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á

GPT-4o üéØ
‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è
‚Ä¢ –ë–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞

GPT-4 Turbo ‚ö°
‚Ä¢ –ë—ã—Å—Ç—Ä–µ–µ GPT-4
‚Ä¢ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ

GPT-4 üåü
‚Ä¢ –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω–µ–µ
‚Ä¢ –î–æ—Ä–æ–∂–µ

GPT-3.5 Turbo üí∞
‚Ä¢ –°–∞–º–∞—è –¥–µ—à–µ–≤–∞—è
‚Ä¢ –ë–∞–∑–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è"""
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def handle_model_change(self, query, model: str):
        """Handle model change request"""
        user_id = query.from_user.id
        
        if not self.admin_manager.is_admin(user_id):
            await query.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", show_alert=True)
            return
        
        success = self.content_generator.set_active_model(model, user_id)
        
        if success:
            await query.answer(f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {model}", show_alert=True)
            # Refresh the settings menu
            await self.show_model_settings(query)
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏", show_alert=True)
    
    async def show_generation_history(self, query):
        """Show content generation history"""
        user_id = query.from_user.id
        
        history = self.content_generator.get_generation_history(user_id, limit=10)
        
        if not history:
            text = "üìú –ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞"
        else:
            text = "üìú –ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):\n\n"
            
            for i, row in enumerate(history, 1):
                gen_id, request, content_type, status, model, created = row
                
                status_emoji = {
                    'completed': '‚úÖ',
                    'processing': '‚è≥',
                    'failed': '‚ùå',
                    'pending': '‚è∏'
                }.get(status, '‚ùì')
                
                type_emoji = {
                    'text': '‚úçÔ∏è',
                    'image': 'üé®',
                    'video': 'üé¨'
                }.get(content_type, 'üìÑ')
                
                request_short = request[:30] + '...' if len(request) > 30 else request
                text += f"{i}. {type_emoji} {status_emoji} {request_short}\n"
                text += f"   ID: {gen_id} | {created[:16]}\n\n"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="content_menu")]]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def show_content_type_info(self, query, content_type: str):
        """Show information about specific content type"""
        if content_type == 'image':
            text = """üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

–ú–æ–¥–µ–ª—å: DALL-E 3
–†–∞–∑–º–µ—Ä: 1024x1024px
–ö–∞—á–µ—Å—Ç–≤–æ: Standard

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
/image <–æ–ø–∏—Å–∞–Ω–∏–µ>

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ /image —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥ –Ω–∞ –∑–∞–∫–∞—Ç–µ
‚Ä¢ /image –ª–æ–≥–æ—Ç–∏–ø –∫–æ—Ñ–µ–π–Ω–∏ –≤ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–º —Å—Ç–∏–ª–µ
‚Ä¢ /image –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ –æ–±–ª–∞–∫–∞—Ö
‚Ä¢ /image –∑–∞–∫–∞—Ç –Ω–∞ –æ–∫–µ–∞–Ω–µ –≤ —Å—Ç–∏–ª–µ –∏–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º–∞

üí° –°–æ–≤–µ—Ç: –ß–µ–º –¥–µ—Ç–∞–ª—å–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

‚è± –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç ~30 —Å–µ–∫—É–Ω–¥"""
        
        elif content_type == 'video':
            text = """üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ

–ú–æ–¥–µ–ª—å: Yes Ai (Sora)
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5-10 —Å–µ–∫—É–Ω–¥
–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: –î–æ 1080p

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
/video <–æ–ø–∏—Å–∞–Ω–∏–µ>

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ /video –∫–æ—Ç –∏–≥—Ä–∞–µ—Ç —Å –∫—Ä–∞—Å–Ω—ã–º –º—è—á–∏–∫–æ–º
‚Ä¢ /video –¥—Ä–∞–∫–æ–Ω –ª–µ—Ç–∏—Ç –Ω–∞–¥ –≥–æ—Ä–∞–º–∏
‚Ä¢ /video –≤–æ–ª–Ω—ã –æ–∫–µ–∞–Ω–∞ –Ω–∞ –∑–∞–∫–∞—Ç–µ
‚Ä¢ /video —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥ –±—É–¥—É—â–µ–≥–æ

üí° –°–æ–≤–µ—Ç: –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏–π

‚è± –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç 30-90 —Å–µ–∫—É–Ω–¥

‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
‚Ä¢ –ë–µ–∑ 18+ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –ë–µ–∑ deepfakes —Ä–µ–∞–ª—å–Ω—ã—Ö –ª—é–¥–µ–π
‚Ä¢ –ë–µ–∑ –Ω–∞—Å–∏–ª–∏—è –∏ –ø—Ä–æ—Ç–∏–≤–æ–ø—Ä–∞–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        else:
            text = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="content_menu")]]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
