#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –∫–æ–º–∞–Ω–¥—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
"""

def test_initialization_logic():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("\nüß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
    print("\n  ‚ùå –°–¢–ê–†–´–ô (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π) –ø–æ—Ä—è–¥–æ–∫:")
    print("     1. cash_commands = None  (–≤ __init__)")
    print("     2. Application.builder().build()  (–≤ run())")
    print("     3. add_handler(cash_commands.start_add_movement)  <- AttributeError!")
    print("     4. post_init: cash_commands = CashCommands(...)  (—Å–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ)")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫  
    print("\n  ‚úÖ –ù–û–í–´–ô (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π) –ø–æ—Ä—è–¥–æ–∫:")
    print("     1. cash_commands = CashCommands(...)  <- –†–∞–Ω–Ω—è—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
    print("     2. product_commands = ProductCommands(...)  <- –†–∞–Ω–Ω—è—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
    print("     3. Application.builder().build()")
    print("     4. add_handler(cash_commands.start_add_movement)  <- –†–∞–±–æ—Ç–∞–µ—Ç!")
    print("     5. post_init: issue_commands = IssueCommands(...)  <- –¢—Ä–µ–±—É–µ—Ç bot_app")
    
    print("\n‚úÖ –õ–æ–≥–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    
    return True

def verify_bot_py_changes():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã –≤ bot.py"""
    print("\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ bot.py...")
    
    with open('/home/runner/work/Bot_Claude/Bot_Claude/bot.py', 'r') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ run() –µ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –ø–µ—Ä–µ–¥ Application
    lines = content.split('\n')
    
    run_line = None
    init_cash_line = None
    init_product_line = None
    app_builder_line = None
    add_handler_line = None
    
    for i, line in enumerate(lines):
        if 'def run(self):' in line:
            run_line = i
        if 'self.cash_commands = CashCommands' in line and run_line and i > run_line:
            init_cash_line = i
        if 'self.product_commands = ProductCommands' in line and run_line and i > run_line:
            init_product_line = i
        if 'Application.builder().token' in line and run_line and i > run_line and not app_builder_line:
            app_builder_line = i
        if 'self.cash_commands.start_add_movement' in line and run_line and i > run_line:
            add_handler_line = i
            break  # –ù–∞—à–ª–∏ –ø–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    
    print(f"  run() –º–µ—Ç–æ–¥: —Å—Ç—Ä–æ–∫–∞ {run_line}")
    print(f"  CashCommands –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: —Å—Ç—Ä–æ–∫–∞ {init_cash_line}")
    print(f"  ProductCommands –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: —Å—Ç—Ä–æ–∫–∞ {init_product_line}")
    print(f"  Application.builder(): —Å—Ç—Ä–æ–∫–∞ {app_builder_line}")
    print(f"  –ü–µ—Ä–≤—ã–π handler —Å cash_commands: —Å—Ç—Ä–æ–∫–∞ {add_handler_line}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    assert init_cash_line is not None, "CashCommands –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ run()"
    assert init_product_line is not None, "ProductCommands –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ run()"
    assert app_builder_line is not None, "Application.builder() –Ω–µ –Ω–∞–π–¥–µ–Ω"
    assert add_handler_line is not None, "Handler —Å cash_commands –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    assert init_cash_line < app_builder_line, "CashCommands –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ü–ï–†–ï–î Application.builder()"
    assert init_product_line < app_builder_line, "ProductCommands –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ü–ï–†–ï–î Application.builder()"
    assert init_cash_line < add_handler_line, "CashCommands –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ü–ï–†–ï–î add_handler"
    assert init_product_line < add_handler_line, "ProductCommands –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ü–ï–†–ï–î add_handler"
    assert app_builder_line < add_handler_line, "Application.builder() –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–ï–†–ï–î add_handler"
    
    print("\n  ‚úÖ –ü–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π:")
    print("     1. CashCommands –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
    print("     2. ProductCommands –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
    print("     3. Application.builder()")
    print("     4. add_handler()")
    
    return True

def main():
    print("=" * 60)
    print("   –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–†–Ø–î–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò")
    print("=" * 60)
    
    try:
        if not verify_bot_py_changes():
            return 1
        
        if not test_initialization_logic():
            return 1
        
        print("\n" + "=" * 60)
        print("‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        
        return 0
        
    except AssertionError as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return 1
    except Exception as e:
        print(f"\n‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == '__main__':
    import sys
    sys.exit(main())
