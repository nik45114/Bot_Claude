#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Issue Manager - –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –∫–ª—É–±–∞
–ó–∞–ø–∏—Å—å –ø—Ä–æ–±–ª–µ–º, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
"""

import sqlite3
from datetime import datetime
from typing import List, Dict, Optional
import logging

logger = logging.getLogger(__name__)


class IssueManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –∫–ª—É–±–∞"""
    
    def __init__(self, db_path: str = 'knowledge.db'):
        self.db_path = db_path
        self._init_db()
    
    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–±–ª–µ–º –∫–ª—É–±–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS club_issues (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                club TEXT NOT NULL,
                description TEXT NOT NULL,
                status TEXT DEFAULT 'active',
                created_by INTEGER NOT NULL,
                created_by_name TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                resolved_at TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("‚úÖ Issue Manager database initialized")
    
    def create_issue(self, club: str, description: str, 
                    created_by: int, created_by_name: str) -> int:
        """
        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–±–ª–µ–º—É
        
        Args:
            club: 'rio' –∏–ª–∏ 'michurinskaya'
            description: –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
            created_by: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            created_by_name: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ 0 –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO club_issues (club, description, created_by, created_by_name)
                VALUES (?, ?, ?, ?)
            ''', (club, description, created_by, created_by_name))
            
            issue_id = cursor.lastrowid
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ Issue created: #{issue_id} in {club} by {created_by_name}")
            return issue_id
            
        except Exception as e:
            logger.error(f"‚ùå Error creating issue: {e}")
            return 0
    
    def get_issue(self, issue_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –ø–æ ID"""
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            cursor.execute('SELECT * FROM club_issues WHERE id = ?', (issue_id,))
            
            row = cursor.fetchone()
            conn.close()
            
            return dict(row) if row else None
            
        except Exception as e:
            logger.error(f"‚ùå Error getting issue: {e}")
            return None
    
    def list_issues(self, club: str = None, status: str = 'active') -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
        
        Args:
            club: —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–ª—É–±—É (None = –≤—Å–µ –∫–ª—É–±—ã)
            status: —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É ('active', 'resolved', None = –≤—Å–µ)
        """
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            query = 'SELECT * FROM club_issues WHERE 1=1'
            params = []
            
            if club:
                query += ' AND club = ?'
                params.append(club)
            
            if status:
                query += ' AND status = ?'
                params.append(status)
            
            query += ' ORDER BY created_at DESC'
            
            cursor.execute(query, params)
            
            issues = [dict(row) for row in cursor.fetchall()]
            conn.close()
            
            return issues
            
        except Exception as e:
            logger.error(f"‚ùå Error listing issues: {e}")
            return []
    
    def update_issue(self, issue_id: int, description: str) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE club_issues 
                SET description = ?, updated_at = CURRENT_TIMESTAMP
                WHERE id = ?
            ''', (description, issue_id))
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ Issue #{issue_id} updated")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error updating issue: {e}")
            return False
    
    def resolve_issue(self, issue_id: int) -> bool:
        """–ü–æ–º–µ—Ç–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω—É—é"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE club_issues 
                SET status = 'resolved', 
                    resolved_at = CURRENT_TIMESTAMP,
                    updated_at = CURRENT_TIMESTAMP
                WHERE id = ?
            ''', (issue_id,))
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ Issue #{issue_id} resolved")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error resolving issue: {e}")
            return False
    
    def delete_issue(self, issue_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('DELETE FROM club_issues WHERE id = ?', (issue_id,))
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ Issue #{issue_id} deleted")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error deleting issue: {e}")
            return False
    
    def get_active_count(self, club: str = None) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            if club:
                cursor.execute('''
                    SELECT COUNT(*) FROM club_issues 
                    WHERE status = 'active' AND club = ?
                ''', (club,))
            else:
                cursor.execute('''
                    SELECT COUNT(*) FROM club_issues 
                    WHERE status = 'active'
                ''')
            
            count = cursor.fetchone()[0]
            conn.close()
            
            return count
            
        except Exception as e:
            logger.error(f"‚ùå Error getting active count: {e}")
            return 0
    
    def format_issue(self, issue: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã"""
        club_names = {
            'rio': 'üè¢ –†–∏–æ',
            'michurinskaya': 'üè¢ –ú–∏—á—É—Ä–∏–Ω—Å–∫–∞—è/–°–µ–≤–µ—Ä'
        }
        
        status_emoji = {
            'active': 'üî¥',
            'resolved': '‚úÖ'
        }
        
        club = club_names.get(issue['club'], issue['club'])
        status = status_emoji.get(issue['status'], '‚ùì')
        
        text = f"{status} –ü—Ä–æ–±–ª–µ–º–∞ #{issue['id']}\n"
        text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        text += f"{club}\n\n"
        text += f"üìù {issue['description']}\n\n"
        text += f"üë§ –ê–≤—Ç–æ—Ä: {issue['created_by_name']}\n"
        text += f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {issue['created_at'][:16]}\n"
        
        if issue['status'] == 'resolved' and issue.get('resolved_at'):
            text += f"‚úÖ –†–µ—à–µ–Ω–∞: {issue['resolved_at'][:16]}\n"
        
        return text
    
    def format_issues_list(self, issues: List[Dict], title: str = "–ü–†–û–ë–õ–ï–ú–´") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º"""
        if not issues:
            return "‚úÖ –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º"
        
        text = f"üìã {title}\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        club_names = {
            'rio': '–†–∏–æ',
            'michurinskaya': '–ú–∏—á—É—Ä.'
        }
        
        for issue in issues:
            status = "üî¥" if issue['status'] == 'active' else "‚úÖ"
            club = club_names.get(issue['club'], issue['club'])
            
            text += f"{status} #{issue['id']} | {club}\n"
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            description = issue['description']
            if len(description) > 100:
                description = description[:97] + "..."
            
            text += f"{description}\n"
            text += f"üë§ {issue['created_by_name']} | {issue['created_at'][:10]}\n\n"
        
        return text
    
    def format_notification(self, issue_id: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –ø—Ä–æ–±–ª–µ–º–µ"""
        issue = self.get_issue(issue_id)
        
        if not issue:
            return "‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        club_names = {
            'rio': '–†–∏–æ',
            'michurinskaya': '–ú–∏—á—É—Ä–∏–Ω—Å–∫–∞—è/–°–µ–≤–µ—Ä'
        }
        
        text = f"üî¥ –ù–û–í–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –í –ö–õ–£–ë–ï {club_names.get(issue['club'], issue['club']).upper()}\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        text += f"üìù {issue['description']}\n\n"
        text += f"üë§ –°–æ–æ–±—â–∏–ª: {issue['created_by_name']}\n"
        text += f"üìÖ –í—Ä–µ–º—è: {issue['created_at'][:16]}\n"
        text += f"üÜî –ü—Ä–æ–±–ª–µ–º–∞ #{issue['id']}"
        
        return text
    
    def search_similar(self, description: str, club: str = None) -> List[Dict]:
        """
        –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –ø—Ä–æ–±–ª–µ–º (–ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º)
        –î–ª—è –±–æ–ª–µ–µ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î —á–µ—Ä–µ–∑ KnowledgeBase
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            keywords = [word.lower() for word in description.split() 
                       if len(word) > 3]
            
            if not keywords:
                return []
            
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
            query = 'SELECT * FROM club_issues WHERE '
            conditions = []
            params = []
            
            for keyword in keywords[:5]:  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 5 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                conditions.append('LOWER(description) LIKE ?')
                params.append(f'%{keyword}%')
            
            query += '(' + ' OR '.join(conditions) + ')'
            
            if club:
                query += ' AND club = ?'
                params.append(club)
            
            query += ' ORDER BY created_at DESC LIMIT 10'
            
            cursor.execute(query, params)
            
            issues = [dict(row) for row in cursor.fetchall()]
            conn.close()
            
            return issues
            
        except Exception as e:
            logger.error(f"‚ùå Error searching similar issues: {e}")
            return []
