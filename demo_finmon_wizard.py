#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Demo: FinMon Button-Based Shift Wizard
Demonstrates the new button-based wizard flow
"""

import os
import sys
import tempfile
from datetime import date

# Add parent directory to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from modules.finmon_simple import FinMonSimple


def demo_button_wizard():
    """Demonstrate the button-based wizard flow"""
    print("\n" + "=" * 70)
    print("FinMon Button-Based Shift Wizard Demo")
    print("=" * 70 + "\n")
    
    with tempfile.TemporaryDirectory() as tmpdir:
        balances_file = os.path.join(tmpdir, "demo_balances.json")
        log_file = os.path.join(tmpdir, "demo_log.csv")
        
        finmon = FinMonSimple(balances_file, log_file)
        
        print("üìã Wizard Flow:")
        print("-" * 70)
        
        # Step 1: Club selection
        print("\n1Ô∏è‚É£ STEP 1: Club Selection")
        print("   User opens /shift in chat")
        print("   - If chat ID is 5329834944 ‚Üí Auto-detected: –†–∏–æ ‚úì")
        print("   - If chat ID is 5992731922 ‚Üí Auto-detected: –°–µ–≤–µ—Ä ‚úì")
        print("   - Otherwise ‚Üí Shows buttons: [üè¢ –†–∏–æ] [üè¢ –°–µ–≤–µ—Ä]")
        
        club = "–†–∏–æ"
        print(f"\n   ‚úÖ Selected club: {club}")
        
        # Step 2: Shift time selection
        print("\n2Ô∏è‚É£ STEP 2: Shift Time Selection")
        print("   Shows buttons:")
        print("   - [‚òÄÔ∏è –£—Ç—Ä–æ] (–Ω–æ—á–Ω–∞—è —Å–º–µ–Ω–∞)")
        print("   - [üåô –í–µ—á–µ—Ä] (–¥–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞)")
        
        shift_time = "evening"
        print(f"\n   ‚úÖ Selected: üåô –í–µ—á–µ—Ä (–¥–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞)")
        
        # Step 3: Show previous balances
        print("\n3Ô∏è‚É£ STEP 3: Previous Balances Display")
        prev_balances = finmon.get_club_balances(club)
        prev_official = prev_balances.get('official', 0) if prev_balances else 0
        prev_box = prev_balances.get('box', 0) if prev_balances else 0
        
        print(f"   üìä –ü—Ä–æ—à–ª—ã–π —Ä–∞–∑:")
        print(f"      ‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è: {prev_official:,.0f} ‚ÇΩ")
        print(f"      ‚Ä¢ –ö–æ—Ä–æ–±–∫–∞: {prev_box:,.0f} ‚ÇΩ")
        
        # Step 4: Data entry
        print("\n4Ô∏è‚É£ STEP 4: Data Entry (Button-Prompted)")
        print("   Each field prompts:")
        print("   - [–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é] button")
        print("   - User types number")
        print("   - Moves to next field automatically")
        
        data = {
            'club': club,
            'fact_cash': 3440.0,
            'fact_card': 12345.0,
            'qr': 500.0,
            'card2': 0.0,
            'safe_cash_end': 5500.0,
            'box_cash_end': 2300.0
        }
        
        print("\n   Entered values:")
        print(f"   üí∞ –í—ã—Ä—É—á–∫–∞:")
        print(f"      ‚Ä¢ –ù–∞–ª–∏—á–∫–∞ —Ñ–∞–∫—Ç: {data['fact_cash']:,.0f} ‚ÇΩ")
        print(f"      ‚Ä¢ –ö–∞—Ä—Ç–∞ —Ñ–∞–∫—Ç: {data['fact_card']:,.0f} ‚ÇΩ")
        print(f"      ‚Ä¢ QR: {data['qr']:,.0f} ‚ÇΩ")
        print(f"      ‚Ä¢ –ù–æ–≤–∞—è –∫–∞—Å—Å–∞: {data['card2']:,.0f} ‚ÇΩ")
        print(f"   üîê –û—Å—Ç–∞—Ç–∫–∏:")
        print(f"      ‚Ä¢ –°–µ–π—Ñ (–æ—Ñ–∏—Ü): {data['safe_cash_end']:,.0f} ‚ÇΩ")
        print(f"      ‚Ä¢ –ö–æ—Ä–æ–±–∫–∞: {data['box_cash_end']:,.0f} ‚ÇΩ")
        
        # Step 5: Summary with deltas
        print("\n5Ô∏è‚É£ STEP 5: Summary with Deltas")
        
        new_official = data['safe_cash_end']
        new_box = data['box_cash_end']
        delta_official = new_official - prev_official
        delta_box = new_box - prev_box
        
        print("   üìä –°–≤–æ–¥–∫–∞ —Å–º–µ–Ω—ã:")
        print(f"   üè¢ –ö–ª—É–±: {club}")
        print(f"   ‚è∞ –í—Ä–µ–º—è: üåô –í–µ—á–µ—Ä (–¥–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞)")
        print()
        print("   üí∞ –í—ã—Ä—É—á–∫–∞:")
        print(f"      ‚Ä¢ –ù–∞–ª–∏—á–∫–∞ —Ñ–∞–∫—Ç: {data['fact_cash']:,.0f} ‚ÇΩ")
        print(f"      ‚Ä¢ –ö–∞—Ä—Ç–∞ —Ñ–∞–∫—Ç: {data['fact_card']:,.0f} ‚ÇΩ")
        print(f"      ‚Ä¢ QR: {data['qr']:,.0f} ‚ÇΩ")
        print(f"      ‚Ä¢ –ù–æ–≤–∞—è –∫–∞—Å—Å–∞: {data['card2']:,.0f} ‚ÇΩ")
        print()
        print("   üîê –û—Å—Ç–∞—Ç–∫–∏:")
        print(f"      ‚Ä¢ –°–µ–π—Ñ (–æ—Ñ–∏—Ü): {new_official:,.0f} ‚ÇΩ")
        print(f"      ‚Ä¢ –ö–æ—Ä–æ–±–∫–∞: {new_box:,.0f} ‚ÇΩ")
        print()
        print("   üìà –ü—Ä–æ—à–ª—ã–π —Ä–∞–∑:")
        print(f"      ‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è: {prev_official:,.0f} ‚ÇΩ")
        print(f"      ‚Ä¢ –ö–æ—Ä–æ–±–∫–∞: {prev_box:,.0f} ‚ÇΩ")
        print()
        print("   üìä –î–≤–∏–∂–µ–Ω–∏–µ:")
        print(f"      ‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è: {delta_official:+,.0f} ‚ÇΩ")
        print(f"      ‚Ä¢ –ö–æ—Ä–æ–±–∫–∞: {delta_box:+,.0f} ‚ÇΩ")
        print()
        print("   Buttons: [‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å] [‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å] [‚ùå –û—Ç–º–µ–Ω–∏—Ç—å]")
        
        # Step 6: Confirmation
        print("\n6Ô∏è‚É£ STEP 6: Confirmation")
        print("   User clicks [‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å]")
        
        # Submit shift
        success = finmon.submit_shift(
            data,
            admin_tg_id=123456789,
            admin_username="demo_user",
            shift_date=date.today(),
            shift_time=shift_time,
            duty_name="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
        )
        
        if success:
            print("\n   ‚úÖ –°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–Ω–∞!")
            
            # Show updated balances
            balances = finmon.get_club_balances(club)
            print(f"\n   üí∞ –ù–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏:")
            print(f"      ‚Ä¢ –û—Ñ–∏—Ü (—Å–µ–π—Ñ): {balances['official']:,.0f} ‚ÇΩ")
            print(f"      ‚Ä¢ –ö–æ—Ä–æ–±–∫–∞: {balances['box']:,.0f} ‚ÇΩ")
            
            # Show CSV log entry
            movements = finmon.get_recent_movements(club, limit=1)
            if movements:
                mov = movements[0]
                print(f"\n   üìù –ó–∞–ø–∏—Å—å –≤ CSV:")
                print(f"      ‚Ä¢ –ö–ª—É–±: {mov['club']}")
                print(f"      ‚Ä¢ –î–∞—Ç–∞ —Å–º–µ–Ω—ã: {mov['shift_date']}")
                print(f"      ‚Ä¢ –í—Ä–µ–º—è: {mov['shift_time']}")
                print(f"      ‚Ä¢ –î–µ–∂—É—Ä–Ω—ã–π: {mov['duty_name']}")
                print(f"      ‚Ä¢ Œî –û—Ñ–∏—Ü: {float(mov['delta_official']):+,.0f} ‚ÇΩ")
                print(f"      ‚Ä¢ Œî –ö–æ—Ä–æ–±–∫–∞: {float(mov['delta_box']):+,.0f} ‚ÇΩ")
        else:
            print("\n   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
        
        print("\n" + "=" * 70)
        print("‚úÖ Demo completed successfully!")
        print("=" * 70 + "\n")


def show_key_features():
    """Show key features of the new wizard"""
    print("\n" + "=" * 70)
    print("Key Features of Button-Based Wizard")
    print("=" * 70 + "\n")
    
    features = [
        "‚úÖ No text parsing required - all input via buttons and prompts",
        "‚úÖ Step-by-step guided flow prevents errors",
        "‚úÖ Previous balances shown before data entry",
        "‚úÖ Automatic delta calculation (new - previous)",
        "‚úÖ Club auto-detection from chat ID",
        "‚úÖ Clear summary with all data before confirmation",
        "‚úÖ Edit option to restart if needed",
        "‚úÖ CSV logging includes deltas automatically",
        "‚úÖ Works in club chats (–†–∏–æ: 5329834944, –°–µ–≤–µ—Ä: 5992731922)",
        "‚úÖ Clean UX with emoji and Russian text"
    ]
    
    for feature in features:
        print(f"  {feature}")
    
    print("\n" + "=" * 70 + "\n")


def show_commands():
    """Show available commands"""
    print("\n" + "=" * 70)
    print("Available Commands")
    print("=" * 70 + "\n")
    
    commands = [
        ("/shift", "–°–¥–∞—Ç—å —Å–º–µ–Ω—É (–∫–Ω–æ–ø–æ—á–Ω—ã–π –º–∞—Å—Ç–µ—Ä)"),
        ("/balances", "–¢–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ –≤—Å–µ–º –∫–ª—É–±–∞–º"),
        ("/movements", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è"),
        ("/cancel", "–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–¥–∞—á—É —Å–º–µ–Ω—ã")
    ]
    
    for cmd, desc in commands:
        print(f"  {cmd:15} - {desc}")
    
    print("\n" + "=" * 70 + "\n")


if __name__ == '__main__':
    show_key_features()
    show_commands()
    demo_button_wizard()
