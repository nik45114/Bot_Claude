#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
"""

import sys
import sqlite3
import os
import tempfile

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –ë–î –¥–ª—è —Ç–µ—Å—Ç–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º tempfile –¥–ª—è –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç–∏
TEST_DB = os.path.join(tempfile.gettempdir(), 'test_bot.db')

def test_cash_manager():
    """–¢–µ—Å—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CashManager...")
    
    if os.path.exists(TEST_DB):
        os.remove(TEST_DB)
    
    from cash_manager import CashManager
    
    cm = CashManager(TEST_DB)
    
    # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    balances = cm.get_all_balances()
    assert 'rio' in balances, "–ö–ª—É–± 'rio' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
    assert 'michurinskaya' in balances, "–ö–ª—É–± 'michurinskaya' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
    print("  ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Å—Å")
    
    # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞
    success = cm.add_movement('rio', 'official', 5000, 'income', '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏—Ö–æ–¥', 'test', 123)
    assert success, "–î–≤–∏–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ"
    balance = cm.get_balance('rio', 'official')
    assert balance == 5000, f"–ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 5000, –ø–æ–ª—É—á–µ–Ω {balance}"
    print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∞")
    
    # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
    success = cm.add_movement('rio', 'official', 2000, 'expense', '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥', 'salary', 123)
    assert success, "–î–≤–∏–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ"
    balance = cm.get_balance('rio', 'official')
    assert balance == 3000, f"–ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 3000, –ø–æ–ª—É—á–µ–Ω {balance}"
    print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    movements = cm.get_movements('rio', 'official', limit=10)
    assert len(movements) == 2, f"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –¥–≤–∏–∂–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–æ {len(movements)}"
    print("  ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏")
    
    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    report = cm.format_balance_report()
    assert '–†–∏–æ' in report, "–í –æ—Ç—á—ë—Ç–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–ª—É–± –†–∏–æ"
    assert '3,000' in report or '3000' in report, "–í –æ—Ç—á—ë—Ç–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–∞–ª–∞–Ω—Å 3000"
    print("  ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤")
    
    print("‚úÖ CashManager - –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")

def test_product_manager():
    """–¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ProductManager...")
    
    if os.path.exists(TEST_DB):
        os.remove(TEST_DB)
    
    from product_manager import ProductManager
    
    pm = ProductManager(TEST_DB)
    
    # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    success = pm.add_product('Monster Energy', 50.0)
    assert success, "–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω"
    print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    products = pm.list_products()
    assert len(products) == 1, f"–î–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 —Ç–æ–≤–∞—Ä, –ø–æ–ª—É—á–µ–Ω–æ {len(products)}"
    assert products[0]['name'] == 'Monster Energy', "–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
    print("  ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
    product_id = products[0]['id']
    success = pm.record_admin_product(123, 'Test Admin', product_id, 5)
    assert success, "–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –∞–¥–º–∏–Ω–∞"
    print("  ‚úÖ –ó–∞–ø–∏—Å—å —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ª–≥–∞
    debt = pm.get_admin_debt(123)
    assert debt == 250.0, f"–î–æ–ª–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 250.0, –ø–æ–ª—É—á–µ–Ω–æ {debt}"
    print("  ‚úÖ –†–∞—Å—á—ë—Ç –¥–æ–ª–≥–∞")
    
    # –¢–µ—Å—Ç –æ–±–Ω—É–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞
    success = pm.clear_admin_debt(123)
    assert success, "–î–æ–ª–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±–Ω—É–ª—ë–Ω"
    debt = pm.get_admin_debt(123)
    assert debt == 0.0, f"–î–æ–ª–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0.0, –ø–æ–ª—É—á–µ–Ω–æ {debt}"
    print("  ‚úÖ –û–±–Ω—É–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞")
    
    print("‚úÖ ProductManager - –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")

def test_issue_manager():
    """–¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–±–ª–µ–º"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IssueManager...")
    
    if os.path.exists(TEST_DB):
        os.remove(TEST_DB)
    
    from issue_manager import IssueManager
    
    im = IssueManager(TEST_DB)
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
    issue_id = im.create_issue('rio', '–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞', 123, 'Test User')
    assert issue_id > 0, "–ü—Ä–æ–±–ª–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞"
    print("  ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
    issue = im.get_issue(issue_id)
    assert issue is not None, "–ü—Ä–æ–±–ª–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
    assert issue['description'] == '–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞', "–ù–µ–≤–µ—Ä–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
    assert issue['status'] == 'active', "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'active'"
    print("  ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
    
    # –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º
    issues = im.list_issues(club='rio', status='active')
    assert len(issues) == 1, f"–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1 –ø—Ä–æ–±–ª–µ–º–∞, –ø–æ–ª—É—á–µ–Ω–æ {len(issues)}"
    print("  ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º")
    
    # –¢–µ—Å—Ç —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
    success = im.resolve_issue(issue_id)
    assert success, "–ü—Ä–æ–±–ª–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ—à–µ–Ω–∞"
    issue = im.get_issue(issue_id)
    assert issue['status'] == 'resolved', "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'resolved'"
    print("  ‚úÖ –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
    
    # –¢–µ—Å—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    count = im.get_active_count()
    assert count == 0, f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0, –ø–æ–ª—É—á–µ–Ω–æ {count}"
    print("  ‚úÖ –ü–æ–¥—Å—á—ë—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º")
    
    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    text = im.format_issue(issue)
    assert '–ü—Ä–æ–±–ª–µ–º–∞ #' in text, "–í —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ID –ø—Ä–æ–±–ª–µ–º—ã"
    print("  ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º")
    
    print("‚úÖ IssueManager - –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")

def test_database_schema():
    """–¢–µ—Å—Ç —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã –ë–î...")
    
    if os.path.exists(TEST_DB):
        os.remove(TEST_DB)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
    from cash_manager import CashManager
    from product_manager import ProductManager
    from issue_manager import IssueManager
    
    CashManager(TEST_DB)
    ProductManager(TEST_DB)
    IssueManager(TEST_DB)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    conn = sqlite3.connect(TEST_DB)
    cursor = conn.cursor()
    
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
    tables = [row[0] for row in cursor.fetchall()]
    
    required_tables = [
        'cash_movements',
        'cash_balances',
        'products',
        'admin_products',
        'club_issues'
    ]
    
    for table in required_tables:
        assert table in tables, f"–¢–∞–±–ª–∏—Ü–∞ {table} –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
        print(f"  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} —Å–æ–∑–¥–∞–Ω–∞")
    
    conn.close()
    
    print("‚úÖ –°—Ö–µ–º–∞ –ë–î - –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")

def main():
    print("=" * 60)
    print("   –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–´–• –ú–û–î–£–õ–ï–ô")
    print("=" * 60)
    
    try:
        test_database_schema()
        test_cash_manager()
        test_product_manager()
        test_issue_manager()
        
        print("\n" + "=" * 60)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        
        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists(TEST_DB):
            os.remove(TEST_DB)
        
        return 0
        
    except AssertionError as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {e}")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == '__main__':
    sys.exit(main())
