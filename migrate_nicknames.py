#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –∞–¥–º–∏–Ω–æ–≤ –∏ –∏–Ω–¥–µ–∫—Å–æ–≤
–î–æ–±–∞–≤–ª—è–µ—Ç admin_nickname –∫–æ–ª–æ–Ω–∫—É –∏ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import sqlite3
import sys
import logging

DB_PATH = 'knowledge.db'

logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger(__name__)

def migrate():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    logger.info(f"üìÅ –§–∞–π–ª: {DB_PATH}\n")
    
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # 1. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É admin_nickname –≤ —Ç–∞–±–ª–∏—Ü—É admins
        logger.info("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ admin_nickname...")
        try:
            cursor.execute('ALTER TABLE admins ADD COLUMN admin_nickname TEXT')
            logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ admin_nickname –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        except sqlite3.OperationalError as e:
            if "duplicate column" in str(e).lower():
                logger.info("‚ö†Ô∏è  –ö–æ–ª–æ–Ω–∫–∞ admin_nickname —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ admin_nickname: {e}")
        
        # 2. –°–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        logger.info("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
        
        indexes = [
            # –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            ("idx_admins_active", "CREATE INDEX IF NOT EXISTS idx_admins_active ON admins(is_active)"),
            
            # –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∞–¥–º–∏–Ω–∞
            ("idx_admin_products_admin", "CREATE INDEX IF NOT EXISTS idx_admin_products_admin ON admin_products(admin_id, settled)"),
            
            # –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
            ("idx_admin_products_product", "CREATE INDEX IF NOT EXISTS idx_admin_products_product ON admin_products(product_id, settled)"),
            
            # –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –¥–∞—Ç–µ –≤–∑—è—Ç–∏—è
            ("idx_admin_products_date", "CREATE INDEX IF NOT EXISTS idx_admin_products_date ON admin_products(taken_at)"),
            
            # –ò–Ω–¥–µ–∫—Å –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ –∞–¥–º–∏–Ω—É –∏ —Ç–æ–≤–∞—Ä—É
            ("idx_admin_products_group", "CREATE INDEX IF NOT EXISTS idx_admin_products_group ON admin_products(admin_id, product_name, settled)"),
        ]
        
        for idx_name, sql in indexes:
            try:
                cursor.execute(sql)
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å: {idx_name}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞ {idx_name}: {e}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
        logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...")
        cursor.execute("SELECT name FROM sqlite_master WHERE type='index' AND name LIKE 'idx_%'")
        indexes_created = cursor.fetchall()
        
        if indexes_created:
            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤:")
            for idx in indexes_created:
                logger.info(f"   ‚Ä¢ {idx[0]}")
        
        conn.commit()
        conn.close()
        
        logger.info("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("\nüìã –ß—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:")
        logger.info("   ‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ admin_nickname –≤ —Ç–∞–±–ª–∏—Ü–µ admins")
        logger.info("   ‚Ä¢ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∏ –∞–¥–º–∏–Ω–∞–º")
        
        return 0
        
    except Exception as e:
        logger.error(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return 1

if __name__ == '__main__':
    sys.exit(migrate())
