#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Project Cleanup Script - –°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
"""

import sys
import os

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
if sys.platform == "win32":
    import codecs
    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
    sys.stderr = codecs.getwriter("utf-8")(sys.stderr.detach())

import os
import shutil
from pathlib import Path

def cleanup_project():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π"""
    
    print("üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –ø—Ä–æ–µ–∫—Ç–∞...")
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    files_to_remove = [
        # –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–æ–≤
        "bot_v4.2.py",
        "bot_v4.7.py", 
        "bot_v4.8.py",
        "bot_v4.9.py",
        "bot_v4.10.py",
        
        # –°—Ç–∞—Ä—ã–µ –ø–∞—Ç—á–∏
        "bot_py_PATCH_v4.13.py",
        "integration_patch.py",
        
        # –°—Ç–∞—Ä—ã–µ —Å–∫—Ä–∏–ø—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        "install_admin_shift.sh",
        "auto_update.sh",
        "update.sh",
        
        # –°—Ç–∞—Ä—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        "migrate_nicknames.py",
        "migrate_to_v4.py",
        "migrate.py",
        
        # –°—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏
        "config_example_v4.2.json",
        "config_example_v4_10.json",
        
        # –°—Ç–∞—Ä—ã–µ requirements
        "requirements_v4.10.txt",
        
        # –°—Ç–∞—Ä—ã–µ README
        "README_V4.13.md",
        
        # –î–µ–º–æ —Ñ–∞–π–ª—ã
        "demo_finmon_wizard.py",
        "demo_finmon.py",
        "demo_product_sorting.py",
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        "test_admin_management.py",
        "test_admin_monitoring.py",
        "test_browser_headers.py",
        "test_content_generation.py",
        "test_debtor_improvements.py",
        "test_finmon_admins_fix.py",
        "test_finmon_button_wizard.py",
        "test_finmon_integration_simple.py",
        "test_finmon_integration.py",
        "test_finmon_simple.py",
        "test_finmon_time_detection.py",
        "test_finmon.py",
        "test_init_fix.py",
        "test_issue_commands_init.py",
        "test_json_error_handling.py",
        "test_new_modules.py",
        "test_owner_restrictions.py",
        "test_product_fixes.py",
        "test_product_sorting.py",
        "test_time_detection_standalone.py",
        "test_v2ray_improvements.py",
        "test_video_curl_errors.py",
        "test_video_openai_mock.py",
        
        # –°—Ç–∞—Ä—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        "ADMIN_MANAGEMENT_IMPLEMENTATION.md",
        "ADMIN_MONITORING_SUMMARY.md",
        "BEFORE_AFTER_COMPARISON.md",
        "COMPLETION_SUMMARY.txt",
        "COMPLETION_SUMMARY_ADMIN_SHIFT.md",
        "DEBTOR_IMPROVEMENTS.md",
        "FINAL_IMPLEMENTATION_SUMMARY.md",
        "FINAL_SUMMARY_V4.11.md",
        "FINAL_SUMMARY.md",
        "FINAL_V4.13.md",
        "FINMON_ADMINS_FIX_SUMMARY.md",
        "FINMON_ARCHITECTURE.md",
        "FINMON_AUTO_SHIFT_DETECTION.md",
        "FINMON_BUTTON_WIZARD_SUMMARY.md",
        "FINMON_EXAMPLES.md",
        "FINMON_IMPLEMENTATION_SUMMARY.md",
        "FINMON_QUICKSTART.md",
        "FINMON_SIMPLE_SETUP.md",
        "FINMON_SIMPLE_SUMMARY.md",
        "FIX_SUMMARY.md",
        "FORMAT_GUIDE.md",
        "FULL_DOCUMENTATION_v2.3.md",
        "GITHUB_DEPLOY.md",
        "HOTFIX_DEPLOYMENT.md",
        "HOTFIX_SUMMARY.md",
        "IMPLEMENTATION_SUMMARY.md",
        "MIGRATION_V3_TO_V4.2.md",
        "NEW_FEATURES_GUIDE.md",
        "OPENAI_SORA_MIGRATION.md",
        "PR_ADMIN_SHIFT_MANAGEMENT.md",
        "PR_SUMMARY.md",
        "PRODUCT_FIX_SUMMARY.md",
        "QUICK_REFERENCE.md",
        "QUICKSTART.txt",
        "SECURITY_SUMMARY.md",
        "SORTING_FEATURES.md",
        "TELEGRAM_THEMES_RESEARCH.md",
        "UPDATE_TO_V4.11.md",
        "UPDATE_TO_V4.13.md",
        "V4.0_COMPLETE.md",
        "V4.0_RAG_ARCHITECTURE.md",
        "V2RAY_GUIDE.md",
        "V2RAY_IMPROVEMENTS_SUMMARY.md",
        "V2RAY_QUICK_REFERENCE.md",
        "V2RAY_WORKFLOW_DIAGRAM.md",
        "YESAI_SETUP.md",
        
        # –°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
        "knowledge_cleaned_v2.jsonl",
        
        # –°—Ç–∞—Ä—ã–µ —É—Ç–∏–ª–∏—Ç—ã
        "analyze_db.py",
        "check_db.py",
        "fix_database.py",
        "kb_cleaner.py",
        "kb_importer.py",
        "manual_test_product.py",
        "run_migrations.py",
        "INTEGRATION_EXAMPLE.py",
    ]
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
    removed_count = 0
    for file_path in files_to_remove:
        if os.path.exists(file_path):
            try:
                os.remove(file_path)
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω: {file_path}")
                removed_count += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file_path}: {e}")
        else:
            print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    # –û—á–∏—â–∞–µ–º –º–æ–¥—É–ª–∏ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    modules_to_remove = [
        "modules/admin_management.py",  # –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è
        "modules/admin_shift_integration.py",  # –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è
        "modules/shift_control.py",  # –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è
        "modules/manual_update.py",  # –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è
        "modules/ocr_processor.py",  # –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è
        "modules/finmon_shift_wizard_old.py",  # –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è
        "modules/finmon_simple.py",  # –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è
        "modules/runtime_migrator.py",  # –ù–µ –Ω—É–∂–µ–Ω
    ]
    
    for module_path in modules_to_remove:
        if os.path.exists(module_path):
            try:
                os.remove(module_path)
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω –º–æ–¥—É–ª—å: {module_path}")
                removed_count += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è {module_path}: {e}")
    
    print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {removed_count}")
    
    # –°–æ–∑–¥–∞–µ–º —á–∏—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    create_clean_structure()
    
    return removed_count

def create_clean_structure():
    """–°–æ–∑–¥–∞–Ω–∏–µ —á–∏—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    
    print("\nüìÅ –°–æ–∑–¥–∞—é —á–∏—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    directories = [
        "modules",
        "migrations", 
        "photos",
        "backups"
    ]
    
    for directory in directories:
        if not os.path.exists(directory):
            os.makedirs(directory)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
    
    # –°–æ–∑–¥–∞–µ–º .gitignore –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    gitignore_content = """# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual environments
venv/
env/
ENV/

# IDE
.vscode/
.idea/
*.swp
*.swo

# Logs
*.log

# Database
*.db
*.sqlite
*.sqlite3

# Photos and backups
photos/
backups/

# Config files with sensitive data
config.json
.env

# Old versions
bot_v*.py
*_old.py
*_backup.py
"""
    
    if not os.path.exists(".gitignore"):
        with open(".gitignore", "w", encoding="utf-8") as f:
            f.write(gitignore_content)
        print("‚úÖ –°–æ–∑–¥–∞–Ω .gitignore")

def fix_bot_py():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ bot.py"""
    
    print("\nüîß –ò—Å–ø—Ä–∞–≤–ª—è—é bot.py...")
    
    try:
        with open("bot.py", "r", encoding="utf-8") as f:
            content = f.read()
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        content = remove_duplicate_imports(content)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        content = remove_duplicate_functions(content)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
        content = content.replace('VERSION = "4.10"', 'VERSION = "4.15"')
        content = content.replace('VERSION = "4.13"', 'VERSION = "4.15"')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open("bot.py", "w", encoding="utf-8") as f:
            f.write(content)
        
        print("‚úÖ bot.py –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è bot.py: {e}")

def remove_duplicate_imports(content):
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
    
    lines = content.split('\n')
    seen_imports = set()
    cleaned_lines = []
    
    for line in lines:
        if line.strip().startswith('import ') or line.strip().startswith('from '):
            if line.strip() not in seen_imports:
                seen_imports.add(line.strip())
                cleaned_lines.append(line)
            else:
                print(f"‚ö†Ô∏è –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç: {line.strip()}")
        else:
            cleaned_lines.append(line)
    
    return '\n'.join(cleaned_lines)

def remove_duplicate_functions(content):
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    
    # –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω—ã
    duplicate_functions = [
        'cmd_admin',
        'cmd_admins', 
        'cmd_help',
        'cmd_update',
        'handle_photo',
        'handle_message'
    ]
    
    lines = content.split('\n')
    cleaned_lines = []
    in_function = False
    current_function = None
    function_count = {}
    
    i = 0
    while i < len(lines):
        line = lines[i]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
        if 'async def ' in line or 'def ' in line:
            for func_name in duplicate_functions:
                if f'def {func_name}' in line:
                    if func_name in function_count:
                        function_count[func_name] += 1
                        if function_count[func_name] > 1:
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                            print(f"‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {func_name}")
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ –∫–ª–∞—Å—Å–∞
                            while i < len(lines) and not (lines[i].strip().startswith('def ') or lines[i].strip().startswith('class ') or lines[i].strip().startswith('async def ')):
                                i += 1
                            i -= 1  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–æ–∫—É —Å —Ñ—É–Ω–∫—Ü–∏–µ–π
                            break
                    else:
                        function_count[func_name] = 1
                    break
        
        cleaned_lines.append(line)
        i += 1
    
    return '\n'.join(cleaned_lines)

def create_clean_requirements():
    """–°–æ–∑–¥–∞–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ requirements.txt"""
    
    print("\nüì¶ –°–æ–∑–¥–∞—é —á–∏—Å—Ç—ã–π requirements.txt...")
    
    requirements_content = """# Core dependencies
python-telegram-bot==20.7
openai==0.28.1
numpy==1.24.3
scikit-learn==1.3.0
paramiko==3.4.0
requests==2.31.0

# Data handling
pydantic>=2.0.0
gspread>=5.0.0
oauth2client>=4.1.3
python-dotenv>=1.0.0
pytz>=2024.1

# OCR and image processing
opencv-python>=4.8.0
pytesseract>=0.3.10
Pillow>=10.0.0

# Database
sqlite3

# Additional utilities
json
datetime
os
shutil
subprocess
logging
re
base64
"""
    
    with open("requirements.txt", "w", encoding="utf-8") as f:
        f.write(requirements_content)
    
    print("‚úÖ requirements.txt –æ–±–Ω–æ–≤–ª–µ–Ω")

def create_clean_readme():
    """–°–æ–∑–¥–∞–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ README.md"""
    
    print("\nüìñ –°–æ–∑–¥–∞—é —á–∏—Å—Ç—ã–π README.md...")
    
    readme_content = """# Club Assistant Bot v4.15

## –û–ø–∏—Å–∞–Ω–∏–µ

–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–º–µ–Ω —Å –∫–Ω–æ–ø–æ—á–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.

## –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- üéÆ **–ö–Ω–æ–ø–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å** - —É–¥–æ–±–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é
- üîí **–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã** - –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç—á–µ—Ç–∞
- üìã **–°–∏—Å—Ç–µ–º–∞ —Å–º–µ–Ω** - —Å–¥–∞—á–∞ —Å–º–µ–Ω —Å —Ñ–æ—Ç–æ –∏ OCR
- üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏** - –ø–æ–ª–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
- üîÑ **–†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ** - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã –≤ –±–æ—Ç–µ

## –ö–æ–º–∞–Ω–¥—ã

### –û—Å–Ω–æ–≤–Ω—ã–µ:
- `/adminpanel` - –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–æ—á–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
- `/shift` - —Å–¥–∞—á–∞ —Å–º–µ–Ω—ã —Å —Ñ–æ—Ç–æ –∏ OCR
- `/systemstatus` - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

### –û–±–Ω–æ–≤–ª–µ–Ω–∏—è:
- `/manualupdate` - —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
- `/updatelog` - –ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

## –£—Å—Ç–∞–Ω–æ–≤–∫–∞

### –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è:
```bash
python3 enhanced_integration_patch.py bot.py
./setup_enhanced_admin_shift.sh
python3 migrate_enhanced_admin_shift.py
systemctl restart club_assistant
```

### –†—É—á–Ω–∞—è:
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: `pip install -r requirements.txt`
2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ config.json
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é: `python3 migrate_enhanced_admin_shift.py`
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: `python3 bot.py`

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

```
‚îú‚îÄ‚îÄ bot.py                          # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞
‚îú‚îÄ‚îÄ modules/                        # –ú–æ–¥—É–ª–∏ —Å–∏—Å—Ç–µ–º—ã
‚îÇ   ‚îú‚îÄ‚îÄ enhanced_admin_shift.py     # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–¥–º–∏–Ω–æ–≤
‚îÇ   ‚îú‚îÄ‚îÄ enhanced_shift_submission.py # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–º–µ–Ω
‚îÇ   ‚îî‚îÄ‚îÄ enhanced_admin_shift_integration.py # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
‚îú‚îÄ‚îÄ migrations/                     # –ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
‚îú‚îÄ‚îÄ photos/                         # –•—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ —Å–º–µ–Ω
‚îú‚îÄ‚îÄ backups/                        # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
‚îî‚îÄ‚îÄ requirements.txt                # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
```

## –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

- `ENHANCED_ADMIN_SHIFT_GUIDE.md` - –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
- `ENHANCED_COMPLETION_SUMMARY.md` - –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π

## –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: `journalctl -u club_assistant -n 50`
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: `/systemstatus`
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: `/adminpanel`

## –õ–∏—Ü–µ–Ω–∑–∏—è

MIT License
"""
    
    with open("README.md", "w", encoding="utf-8") as f:
        f.write(readme_content)
    
    print("‚úÖ README.md –æ–±–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    print("üßπ –°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ Club Assistant Bot")
    print("=" * 50)
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    removed_count = cleanup_project()
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º bot.py
    fix_bot_py()
    
    # –°–æ–∑–¥–∞–µ–º —á–∏—Å—Ç—ã–µ —Ñ–∞–π–ª—ã
    create_clean_requirements()
    create_clean_readme()
    
    print("\n" + "=" * 50)
    print("üéâ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {removed_count}")
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ bot.py –Ω–∞ –æ—à–∏–±–∫–∏")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é: python3 migrate_enhanced_admin_shift.py")
    print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: systemctl restart club_assistant")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É: /adminpanel")
