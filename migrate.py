#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Club Assistant Bot
–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ë–î
"""

import sqlite3
import sys

DB_PATH = 'knowledge.db'

def migrate():
    print("üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    print(f"üìÅ –§–∞–π–ª: {DB_PATH}\n")
    
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ knowledge
        migrations = [
            ("tags", "ALTER TABLE knowledge ADD COLUMN tags TEXT DEFAULT ''"),
            ("source", "ALTER TABLE knowledge ADD COLUMN source TEXT DEFAULT ''"),
            ("added_by", "ALTER TABLE knowledge ADD COLUMN added_by INTEGER"),
            ("version", "ALTER TABLE knowledge ADD COLUMN version INTEGER DEFAULT 1"),
            ("is_current", "ALTER TABLE knowledge ADD COLUMN is_current BOOLEAN DEFAULT 1"),
        ]
        
        for col_name, sql in migrations:
            try:
                cursor.execute(sql)
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: {col_name}")
            except sqlite3.OperationalError as e:
                if "duplicate column" in str(e).lower():
                    print(f"‚ö†Ô∏è  –ö–æ–ª–æ–Ω–∫–∞ {col_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {col_name}: {e}")
        
        # –°–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å
        try:
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_current ON knowledge(is_current)')
            print("‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å: idx_current")
        except Exception as e:
            print(f"‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å idx_current: {e}")
        
        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É admins
        try:
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS admins (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    full_name TEXT,
                    added_by INTEGER,
                    can_teach BOOLEAN DEFAULT 1,
                    can_import BOOLEAN DEFAULT 0,
                    can_manage_admins BOOLEAN DEFAULT 0,
                    is_active BOOLEAN DEFAULT 1,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: admins")
        except Exception as e:
            print(f"‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ admins: {e}")
        
        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É admin_credentials
        try:
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS admin_credentials (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    service TEXT NOT NULL,
                    login TEXT,
                    password TEXT,
                    notes TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES admins(user_id)
                )
            ''')
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: admin_credentials")
        except Exception as e:
            print(f"‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ admin_credentials: {e}")
        
        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É health_checks
        try:
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS health_checks (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    check_type TEXT,
                    status TEXT,
                    details TEXT,
                    checked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: health_checks")
        except Exception as e:
            print(f"‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ health_checks: {e}")
        
        conn.commit()
        conn.close()
        
        print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞:")
        print("  systemctl start club_assistant")
        return 0
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == '__main__':
    sys.exit(migrate())
