#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Issue Commands - –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∫–ª—É–±–∞
–î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –∞–¥–º–∏–Ω–æ–≤
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
import logging

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è conversation handler
ISSUE_SELECT_CLUB, ISSUE_ENTER_DESCRIPTION, ISSUE_EDIT_DESCRIPTION = range(3)


class IssueCommands:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–∞–º–∏"""
    
    def __init__(self, issue_manager, knowledge_base, admin_manager, owner_id: int, bot_app):
        self.issue_manager = issue_manager
        self.kb = knowledge_base
        self.admin_manager = admin_manager
        self.owner_id = owner_id
        self.bot_app = bot_app
    
    def is_owner(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≤–ª–∞–¥–µ–ª–µ—Ü"""
        return user_id == self.owner_id
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω"""
        return self.admin_manager.is_admin(user_id)
    
    async def show_issue_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–±–ª–µ–º"""
        query = update.callback_query
        
        if query:
            user_id = query.from_user.id
            await query.answer()
        else:
            user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            text = "‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º"
            if query:
                await query.edit_message_text(text)
            else:
                await update.message.reply_text(text)
            return
        
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
        keyboard.append([InlineKeyboardButton("üî¥ –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ", callback_data="issue_report")])
        keyboard.append([InlineKeyboardButton("üìã –ü—Ä–æ–±–ª–µ–º—ã –∫–ª—É–±–∞", callback_data="issue_list")])
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if self.is_owner(user_id):
            active_count = self.issue_manager.get_active_count()
            keyboard.append([InlineKeyboardButton(
                f"‚ö†Ô∏è –¢–µ–∫—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã ({active_count})", 
                callback_data="issue_current"
            )])
        
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´ –ö–õ–£–ë–ê\n\n"
        text += "–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º"
        
        if query:
            await query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
    
    async def start_report_issue(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_admin(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º")
            return ConversationHandler.END
        
        keyboard = [
            [InlineKeyboardButton("üè¢ –†–∏–æ", callback_data="issue_club_rio")],
            [InlineKeyboardButton("üè¢ –ú–∏—á—É—Ä–∏–Ω—Å–∫–∞—è/–°–µ–≤–µ—Ä", callback_data="issue_club_mich")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="issue_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üî¥ –°–û–û–ë–©–ò–¢–¨ –û –ü–†–û–ë–õ–ï–ú–ï\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±:",
            reply_markup=reply_markup
        )
        
        return ISSUE_SELECT_CLUB
    
    async def select_club_for_issue(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä –∫–ª—É–±–∞ –¥–ª—è –ø—Ä–æ–±–ª–µ–º—ã"""
        query = update.callback_query
        await query.answer()
        
        club = 'rio' if 'rio' in query.data else 'michurinskaya'
        context.user_data['issue_club'] = club
        
        club_name = "–†–∏–æ" if club == 'rio' else "–ú–∏—á—É—Ä–∏–Ω—Å–∫–∞—è/–°–µ–≤–µ—Ä"
        
        await query.edit_message_text(
            f"–ö–ª—É–±: {club_name}\n\n"
            "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:"
        )
        
        return ISSUE_ENTER_DESCRIPTION
    
    async def enter_issue_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
        description = update.message.text
        club = context.user_data['issue_club']
        user_id = update.effective_user.id
        user_name = update.effective_user.full_name or update.effective_user.username or str(user_id)
        
        # 1. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î –ø—Ä–æ–±–ª–µ–º
        issue_id = self.issue_manager.create_issue(
            club=club,
            description=description,
            created_by=user_id,
            created_by_name=user_name
        )
        
        if not issue_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã")
            context.user_data.clear()
            return ConversationHandler.END
        
        # 2. –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        notification_text = self.issue_manager.format_notification(issue_id)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
            await self.bot_app.bot.send_message(
                chat_id=self.owner_id,
                text=notification_text
            )
            logger.info(f"‚úÖ Owner notified about issue #{issue_id}")
        except Exception as e:
            logger.error(f"‚ùå Failed to notify owner: {e}")
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        try:
            club_names = {'rio': '–†–∏–æ', 'michurinskaya': '–ú–∏—á—É—Ä–∏–Ω—Å–∫–∞—è/–°–µ–≤–µ—Ä'}
            question = f"–ü—Ä–æ–±–ª–µ–º–∞ –≤ –∫–ª—É–±–µ {club_names[club]}"
            answer = f"–ü—Ä–æ–±–ª–µ–º–∞ #{issue_id}: {description}\n–°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–Ω–∞—è\n–°–æ–æ–±—â–∏–ª: {user_name}"
            
            self.kb.add(
                question=question,
                answer=answer,
                category='club_issue',
                tags=f'issue,{club}',
                source='issue_tracker',
                added_by=user_id
            )
            logger.info(f"‚úÖ Issue #{issue_id} added to knowledge base")
        except Exception as e:
            logger.error(f"‚ùå Failed to add issue to KB: {e}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        text = f"‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ #{issue_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞\n\n"
        text += "‚Ä¢ –ó–∞–ø–∏—Å–∞–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n"
        text += "‚Ä¢ –í–ª–∞–¥–µ–ª–µ—Ü —É–≤–µ–¥–æ–º–ª—ë–Ω\n"
        text += "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –±–æ—Ç–∞"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –í –º–µ–Ω—é –ø—Ä–æ–±–ª–µ–º", callback_data="issue_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(text, reply_markup=reply_markup)
        
        context.user_data.clear()
        return ConversationHandler.END
    
    async def show_issues_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_admin(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º")
            return
        
        keyboard = [
            [InlineKeyboardButton("üè¢ –†–∏–æ", callback_data="issue_filter_rio"),
             InlineKeyboardButton("üè¢ –ú–∏—á—É—Ä–∏–Ω—Å–∫–∞—è", callback_data="issue_filter_mich")],
            [InlineKeyboardButton("üî¥ –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data="issue_filter_active"),
             InlineKeyboardButton("‚úÖ –†–µ—à—ë–Ω–Ω—ã–µ", callback_data="issue_filter_resolved")],
            [InlineKeyboardButton("üìã –í—Å–µ", callback_data="issue_filter_all")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="issue_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–±–ª–µ–º:",
            reply_markup=reply_markup
        )
    
    async def show_filtered_issues(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"""
        query = update.callback_query
        await query.answer()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –∏–∑ callback_data
        data = query.data
        
        club = None
        status = None
        title = "–í–°–ï –ü–†–û–ë–õ–ï–ú–´"
        
        if 'rio' in data:
            club = 'rio'
            title = "–ü–†–û–ë–õ–ï–ú–´ - –†–ò–û"
        elif 'mich' in data:
            club = 'michurinskaya'
            title = "–ü–†–û–ë–õ–ï–ú–´ - –ú–ò–ß–£–†–ò–ù–°–ö–ê–Ø"
        
        if 'active' in data:
            status = 'active'
            title += " (–ê–ö–¢–ò–í–ù–´–ï)"
        elif 'resolved' in data:
            status = 'resolved'
            title += " (–†–ï–®–Å–ù–ù–´–ï)"
        elif 'all' in data:
            status = None
        
        issues = self.issue_manager.list_issues(club=club, status=status)
        text = self.issue_manager.format_issues_list(issues, title)
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="issue_list")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_current_issues(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_owner(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É")
            return
        
        issues = self.issue_manager.list_issues(status='active')
        
        if not issues:
            text = "‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="issue_menu")]]
        else:
            text = "‚ö†Ô∏è –¢–ï–ö–£–©–ò–ï –ü–†–û–ë–õ–ï–ú–´\n"
            text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            
            keyboard = []
            
            for issue in issues[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
                club_emoji = "üè¢"
                desc_short = issue['description'][:30] + "..." if len(issue['description']) > 30 else issue['description']
                
                keyboard.append([InlineKeyboardButton(
                    f"#{issue['id']} | {desc_short}",
                    callback_data=f"issue_manage_{issue['id']}"
                )])
            
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="issue_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def manage_issue(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π"""
        query = update.callback_query
        await query.answer()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: –≤–ª–∞–¥–µ–ª–µ—Ü –ò–õ–ò –ø—Ä–∞–≤–æ issues_edit
        user_id = query.from_user.id
        if not (self.is_owner(user_id) or self.admin_manager.has_permission(user_id, 'issues_edit')):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ callback_data
        issue_id = int(query.data.split('_')[-1])
        
        issue = self.issue_manager.get_issue(issue_id)
        
        if not issue:
            await query.edit_message_text("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        text = self.issue_manager.format_issue(issue)
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –†–µ—à–µ–Ω–∞", callback_data=f"issue_resolve_{issue_id}")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"issue_edit_{issue_id}")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"issue_delete_{issue_id}")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="issue_current")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def resolve_issue(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–º–µ—Ç–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω—É—é"""
        query = update.callback_query
        await query.answer()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: –≤–ª–∞–¥–µ–ª–µ—Ü –ò–õ–ò –ø—Ä–∞–≤–æ issues_edit
        user_id = query.from_user.id
        if not (self.is_owner(user_id) or self.admin_manager.has_permission(user_id, 'issues_edit')):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
            return
        
        issue_id = int(query.data.split('_')[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É –ø–µ—Ä–µ–¥ —Ä–µ—à–µ–Ω–∏–µ–º
        issue = self.issue_manager.get_issue(issue_id)
        
        success = self.issue_manager.resolve_issue(issue_id)
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
            try:
                club_names = {'rio': '–†–∏–æ', 'michurinskaya': '–ú–∏—á—É—Ä–∏–Ω—Å–∫–∞—è/–°–µ–≤–µ—Ä'}
                question = f"–ü—Ä–æ–±–ª–µ–º–∞ –≤ –∫–ª—É–±–µ {club_names[issue['club']]}"
                answer = f"–ü—Ä–æ–±–ª–µ–º–∞ #{issue_id}: {issue['description']}\n–°—Ç–∞—Ç—É—Å: –†–ï–®–ï–ù–ê\n–°–æ–æ–±—â–∏–ª: {issue['created_by_name']}"
                
                self.kb.add(
                    question=question,
                    answer=answer,
                    category='club_issue',
                    tags=f'issue,{issue["club"]},resolved',
                    source='issue_tracker',
                    added_by=self.owner_id
                )
            except Exception as e:
                logger.error(f"‚ùå Failed to update KB: {e}")
            
            text = f"‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ #{issue_id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω–∞—è"
        else:
            text = "‚ùå –û—à–∏–±–∫–∞"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="issue_current")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def start_edit_issue(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"""
        query = update.callback_query
        await query.answer()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: –≤–ª–∞–¥–µ–ª–µ—Ü –ò–õ–ò –ø—Ä–∞–≤–æ issues_edit
        user_id = query.from_user.id
        if not (self.is_owner(user_id) or self.admin_manager.has_permission(user_id, 'issues_edit')):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
            return ConversationHandler.END
        
        issue_id = int(query.data.split('_')[-1])
        context.user_data['edit_issue_id'] = issue_id
        
        issue = self.issue_manager.get_issue(issue_id)
        
        await query.edit_message_text(
            f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{issue['description']}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
        )
        
        return ISSUE_EDIT_DESCRIPTION
    
    async def edit_issue_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"""
        new_description = update.message.text
        issue_id = context.user_data['edit_issue_id']
        
        issue = self.issue_manager.get_issue(issue_id)
        
        success = self.issue_manager.update_issue(issue_id, new_description)
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
            try:
                club_names = {'rio': '–†–∏–æ', 'michurinskaya': '–ú–∏—á—É—Ä–∏–Ω—Å–∫–∞—è/–°–µ–≤–µ—Ä'}
                question = f"–ü—Ä–æ–±–ª–µ–º–∞ –≤ –∫–ª—É–±–µ {club_names[issue['club']]}"
                answer = f"–ü—Ä–æ–±–ª–µ–º–∞ #{issue_id}: {new_description}\n–°—Ç–∞—Ç—É—Å: {issue['status']}\n–°–æ–æ–±—â–∏–ª: {issue['created_by_name']}"
                
                self.kb.add(
                    question=question,
                    answer=answer,
                    category='club_issue',
                    tags=f'issue,{issue["club"]}',
                    source='issue_tracker',
                    added_by=self.owner_id
                )
            except Exception as e:
                logger.error(f"‚ùå Failed to update KB: {e}")
            
            text = f"‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ #{issue_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        else:
            text = "‚ùå –û—à–∏–±–∫–∞"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="issue_current")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(text, reply_markup=reply_markup)
        
        context.user_data.clear()
        return ConversationHandler.END
    
    async def delete_issue(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_owner(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É")
            return
        
        issue_id = int(query.data.split('_')[-1])
        
        success = self.issue_manager.delete_issue(issue_id)
        
        if success:
            text = f"‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ #{issue_id} —É–¥–∞–ª–µ–Ω–∞"
        else:
            text = "‚ùå –û—à–∏–±–∫–∞"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="issue_current")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        context.user_data.clear()
        await self.show_issue_menu(update, context)
        return ConversationHandler.END
